00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/10/2014 11:53:37 PM

00000000                             1  
00000000                             2  *******************************************************************************
00000000                             3  * Sai Badey 
00000000                             4  * Sean Lai 
00000000                             5  * Duong Chau 
00000000                             6  * TEAM LITTLE INDIAN AND BIG FRIENDS
00000000                             7  * Motorola 68k Disassembler
00000000                             8  *******************************************************************************
00000000                             9  
00001000                            10      ORG    $1000
00001000                            11      START:                  ; first instruction of program
00001000                            12      
00001000                            13  START:                  
00001000                            14      
00001000  43F9 000038F5             15          LEA        INTRO,A1         Load Introduction
00001006  103C 000E                 16          MOVE.B     #14,D0           Trap #14 to print intro
0000100A  4E4F                      17          TRAP       #15              Print introduction to screen
0000100C  13FC 0000 00003DE5        18          MOVE.B     #0, LINECOUNT   Initialize line count
00001014                            19  STARTADDR  
00001014  43F9 00003F41             20          LEA        STARTADDRMS,A1   Load starting address prompt
0000101A  103C 000E                 21          MOVE.B     #14,D0           Trap #14 to print
0000101E  4E4F                      22          TRAP       #15              print prompt          
00001020  43F9 00003DE6             23          LEA        STARTINPUT,A1      Store the starting address into A1
00001026  7002                      24          MOVEQ      #2,D0            Trap #2 takes the input from user
00001028  4E4F                      25          TRAP       #15              Take the input
0000102A  4EB9 0000111A             26          JSR        CHECKLENGTH      Check input for validity
00001030  B83C 0000                 27          CMP.B      #0, D4           If 0, the input passed
00001034  6700 0010                 28          BEQ        NEXT2            Continue if correct
00001038  43F9 00003FCB             29          LEA        FAILMESSAGE,A1   Load Fail message if failed
0000103E  103C 000E                 30          MOVE.B     #14,D0           Trap #14 to print
00001042  4E4F                      31          TRAP       #15              Print fail message
00001044  60CE                      32          BRA        STARTADDR        Ask for the starting addr again           
00001046                            33  NEXT2
00001046  4EB9 000010EA             34          JSR        ASCHEX           Convert the ascii input to hex
0000104C  2A43                      35          MOVEA.L    D3,A5            Move the addr into A5
0000104E  4EB9 00001136             36          JSR        EVENTEST         Make sure input is not odd
00001054  B83C 0000                 37          CMP.B      #0,D4            If 0, input is even and passed
00001058  6700 0004                 38          BEQ        NEXT3            Continue after odd check
0000105C  60B6                      39          BRA        STARTADDR        Failed odd check, prompt again
0000105E                            40  NEXT3    
0000105E  4EB9 00001162             41          JSR        RANGETEST       Test if the input is within the range
00001064  B83C 0001                 42          CMP.B      #1,D4            If 1, it counts as fail
00001068  67AA                      43          BEQ        STARTADDR        Prompt the start addr again
0000106A  2E03                      44          MOVE.L     D3,D7            Moving the address           
0000106C  2A43                      45          MOVEA.L    D3,A5            Input all passed, move to A5
0000106E                            46  ENDADDR    
0000106E  43F9 00003F8B             47          LEA        ENDADDRMSG,A1    Store the ending addr prompt message
00001074  103C 000E                 48          MOVE.B     #14,D0           Trap #14
00001078  4E4F                      49          TRAP       #15              Print prompt
0000107A  43F9 00003E36             50          LEA        ENDINPUT,A1      Store the input prompt
00001080  7002                      51          MOVEQ      #2,D0            trap #2 to get input
00001082  4E4F                      52          TRAP       #15              Get input
00001084  4283                      53          CLR.L      D3               Clear D3 for the addr   
00001086  4EB9 0000111A             54          JSR        CHECKLENGTH      Test if the ending address is valid
0000108C  B83C 0000                 55          CMP.B      #0,D4            If 0, it is pass
00001090  6700 0010                 56          BEQ        NEXTEND2         If pass, continue the program
00001094  43F9 00003FCB             57          LEA        FAILMESSAGE,A1   Load fail message
0000109A  103C 000E                 58          MOVE.B     #14,D0           Trap #14 to print
0000109E  4E4F                      59          TRAP       #15              Print the fail message
000010A0  60CC                      60          BRA        ENDADDR          Prompt for end addr again           
000010A2                            61  NEXTEND2   
000010A2  4EB9 000010EA             62          JSR        ASCHEX           Branch to convert ascii to hex
000010A8  2C43                      63          MOVEA.L    D3,A6            Store ending addr D6
000010AA  4EB9 00001136             64          JSR        EVENTEST         Check if the ending addr is odd
000010B0  B83C 0000                 65          CMP.B      #0,D4            If 0, the address passed
000010B4  6700 0004                 66          BEQ        NEXTEND3         If pass, continue program
000010B8  60B4                      67          BRA        ENDADDR          If fail, prompt again
000010BA                            68  NEXTEND3   
000010BA  4EB9 00001162             69          JSR        RANGETEST        Tests if the input is within valid range
000010C0  B83C 0001                 70          CMP.B      #1,D4            If 1, it's fail
000010C4  67A8                      71          BEQ        ENDADDR          Prompt the addr again
000010C6  2C43                      72          MOVEA.L    D3,A6            All address passed, move to D6
000010C8  4EB9 000011A8             73          JSR        HIGHLOWCHECK     Check if the ending addr is higher
000010CE  B83C 0001                 74          CMP.B      #1,D4            If 1, ending addr not valid
000010D2  679A                      75          BEQ        ENDADDR          prompt ending addr again
000010D4  2C43                      76          MOVEA.L    D3,A6            All addr passed, move to D6
000010D6  4287                      77          CLR.L      D7               Clear D7
000010D8  544E                      78          ADD        #2,A6            Set offset to A6
000010DA  43F9 0000433A             79          LEA        KEYENTER, A1     Store next step message
000010E0  103C 000E                 80          MOVE.B     #14,D0           Trap $14 to print
000010E4  4E4F                      81          TRAP       #15              Prints
000010E6  6000 00E2                 82          BRA        GETKEY           Goes to GETKEY, grabs keyboard input
000010EA                            83  ASCHEX     
000010EA  0C01 0000                 84          CMPI.B     #$0,D1          Compares if all ascii are converted
000010EE  6700 00D8                 85          BEQ        DONE            If yes branch
000010F2  1419                      86          MOVE.B     (A1)+,D2        If not, move to D2
000010F4  0C02 0039                 87          CMPI.B     #$39,D2         Check if D2 is a number or alphabet
000010F8  6F00 000A                 88          BLE        NUMCONV         If ascii is number, skip letter conversion
000010FC                            89  LETTERCONV     
000010FC  0402 0037                 90          SUBI.B     #$37,D2         Convert ascii to hex (alphabet)
00001100  6000 000A                 91          BRA        COUNTER 
00001104                            92  NUMCONV     
00001104  0402 0030                 93          SUBI.B     #$30,D2         Convert ascii to hex (number)
00001108  6000 0002                 94          BRA        COUNTER            
0000110C                            95  COUNTER     
0000110C  5301                      96          SUBI.B     #$1,D1          Decrement counter
0000110E  D602                      97          ADD.B      D2,D3           Store the converted hex to D3
00001110  0C01 0000                 98          CMPI.B     #$0,D1          Check if everything is converted
00001114  67D4                      99          BEQ        ASCHEX          Keep converting
00001116  E99B                     100          ROL.L      #4,D3           Rotate first 4 bits. So continue the convert
00001118  60D0                     101          BRA        ASCHEX          Continue converting
0000111A                           102  CHECKLENGTH        
0000111A  4284                     103          CLR.L      D4               Clear D4
0000111C  7A00                     104          MOVEQ      #$0,D5           Use D5 for compare if input is 0
0000111E  B205                     105          CMP.B      D5,D1            Check if input is null or not
00001120  6700 0010                106          BEQ        INPUTFAIL        Test if input is null
00001124  0C41 0008                107          CMPI       #$8,D1           Check if address is longer than 8 bits
00001128  6E00 0008                108          BGT        INPUTFAIL        input failed
0000112C  183C 0000                109          MOVE.B     #$0,D4           input is of correct length
00001130  4E75                     110          RTS
00001132                           111  INPUTFAIL   
00001132  7801                     112          MOVEQ       #$1,D4              Move 1 in the D4 to mean fail
00001134  4E75                     113          RTS             
00001136                           114  EVENTEST     
00001136  4282                     115          CLR.L       D2                  Clear D2
00001138  4284                     116          CLR.L       D4                  Clear D4
0000113A  3403                     117          MOVE.W      D3,D2               Move D3 to D2 to use it for temp
0000113C  7202                     118          MOVE.L      #$00000002,D1       Put 2 into D1
0000113E  84C1                     119          DIVU        D1,D2               Divive the input by 2
00001140  4842                     120          SWAP        D2                  Store the remainder
00001142  B43C 0001                121          CMP.B       #1,D2               Check if the remaider is 1
00001146  6700 0008                122          BEQ         EVENTESTFAIL        If remainder exists. It is a fail
0000114A  183C 0000                123          MOVE.B      #$0,D4              Other wise, 0 means pass
0000114E  4E75                     124          RTS                         
00001150                           125  EVENTESTFAIL   
00001150  43F9 00003E86            126          LEA         ODDADDRMSG,A1       Store odd error msg
00001156  103C 000E                127          MOVE.B      #14,D0              Trap #14 to print
0000115A  4E4F                     128          TRAP        #15                 Print the msg
0000115C  7801                     129          MOVEQ       #$1,D4              If fail, put 1 into D4
0000115E  4283                     130          CLR.L       D3                  Clear D3
00001160  4E75                     131          RTS                
00001162                           132  RANGETEST   
00001162  4284                     133          CLR.L       D4                  Clear D4
00001164  223C 00007000            134          MOVE.L      #MINSTART,D1        Load the minimum address $7000
0000116A  B681                     135          CMP.L       D1,D3               Compare the two
0000116C  6D00 0012                136          BLT         TOOLOW              input too low
00001170  223C 00FFFFFE            137          MOVE.L      #MAXEND,D1          Load the maximum address $00FFFFFE
00001176  B681                     138          CMP.L       D1,D3               Compare the two
00001178  6E00 001A                139          BGT         TOOHIGH             input too high
0000117C  7800                     140          MOVEQ       #$0,D4              Passed test, put 0 into D4
0000117E  4E75                     141          RTS                         
00001180                           142  TOOLOW    
00001180  43F9 00003EB3            143          LEA         TOOLOWMSG,A1        Store too low error
00001186  103C 000E                144          MOVE.B      #14,D0              Trap #14 to print
0000118A  4E4F                     145          TRAP        #15                 print error
0000118C  183C 0001                146          MOVE.B      #$1,D4              Failed test, put 1 into D4
00001190  4283                     147          CLR.L       D3                  Clear D3
00001192  4E75                     148          RTS
00001194                           149  TOOHIGH    
00001194  43F9 00003EDF            150          LEA         TOOHIGHMSG,A1       Store too high error
0000119A  103C 000E                151          MOVE.B      #14,D0              Trap #14 to print
0000119E  4E4F                     152          TRAP        #15                 print error
000011A0  183C 0001                153          MOVE.B      #$1,D4              Failed test, put 1 into D4
000011A4  4283                     154          CLR.L       D3                  Clear D3
000011A6  4E75                     155          RTS    
000011A8                           156  HIGHLOWCHECK  
000011A8  4284                     157          CLR.L       D4                  Clear D4
000011AA  BE83                     158          CMP.L       D3,D7               Compare the start and ending addr
000011AC  6E00 0006                159          BGT         HIGHLOWFAIL         If starting addr is higher than ending
000011B0  7800                     160          MOVEQ       #$0,D4              If not, pass
000011B2  4E75                     161          RTS        
000011B4                           162  HIGHLOWFAIL
000011B4  43F9 00003F10            163          LEA         HIGHLOWMSG,A1       Store the error msg
000011BA  103C 000E                164          MOVE.B      #14,D0              Trap #14 to print
000011BE  4E4F                     165          TRAP        #15                 Print msg
000011C0  183C 0001                166          MOVE.B      #$1,D4              Put 1 into D4 for test fail
000011C4  4283                     167          CLR.L       D3                  Clear D3
000011C6  4E75                     168          RTS                              
000011C8                           169  DONE        
000011C8  4E75                     170          RTS
000011CA                           171  GETKEY
000011CA  103C 000C                172          MOVE.B      #12,D0              Keyboard echo trap
000011CE  123C 0000                173          MOVE.B      #0,D1               Reset keyboard input
000011D2  4E4F                     174          TRAP        #15                 Run the above commands
000011D4  103C 0005                175          MOVE.B      #5, D0              Keyboard echo
000011D8  4E4F                     176          TRAP        #15                 Trap the keyboard echo
000011DA  B23C 000D                177          CMP.B       #$D, D1             Compare key to Enter
000011DE  6700 00AC                178          BEQ         OPCODESETUP         Run the program
000011E2  B23C 0052                179          CMP.B       #$52, D1            Compare key to R
000011E6  6700 004E                180          BEQ         RESTART             restart program
000011EA  B23C 0072                181          CMP.B       #$72, D1            Compare key to r
000011EE  6700 0046                182          BEQ         RESTART             restart program
000011F2  B23C 0071                183          CMP.B       #$71, D1            Compare key to q
000011F6  6700 023C                184          BEQ         THEEND              end program
000011FA  B23C 0051                185          CMP.B       #$51, D1            Compare key to Q
000011FE  6700 0234                186          BEQ         THEEND              end program
00001202  60C6                     187          BRA         GETKEY              
00001204                           188  ENDGETKEY
00001204  103C 000C                189          MOVE.B      #12,D0              Keyboard echo trap
00001208  123C 0000                190          MOVE.B      #0,D1               Reset keyboard input
0000120C  4E4F                     191          TRAP        #15                 Run the above
0000120E  103C 0005                192          MOVE.B      #5, D0              Keyboard echo
00001212  4E4F                     193          TRAP        #15                 Trap echo
00001214  B23C 0052                194          CMP.B       #$52, D1            Compare key to r
00001218  6700 001C                195          BEQ         RESTART             restart program
0000121C  B23C 0072                196          CMP.B       #$72, D1            Compare key to R
00001220  6700 0014                197          BEQ         RESTART             restart program
00001224  B23C 0071                198          CMP.B       #$71, D1            Compare key to q
00001228  6700 020A                199          BEQ         THEEND              end program
0000122C  B23C 0051                200          CMP.B       #$51, D1            Compare key to Q
00001230  6700 0202                201          BEQ         THEEND              end program
00001234  6094                     202          BRA         GETKEY 
00001236                           203  RESTART     
00001236  103C 000B                204          MOVE.B      #11,D0              Trap #11
0000123A  323C FF00                205          MOVE.W      #$FF00,D1           Clear Screen
0000123E  4E4F                     206          TRAP        #15                 Trap the above
00001240  103C 000C                207          MOVE.B      #12,D0              Keyboard echo
00001244  123C 0001                208          MOVE.B      #1,D1               Display String
00001248  4E4F                     209          TRAP        #15                 Trap above
0000124A  4281                     210          CLR.L       D1                  Reset from D1 to D7
0000124C  4281                     211          CLR.L       D1                  
0000124E  4282                     212          CLR.L       D2                  
00001250  4283                     213          CLR.L       D3                  
00001252  4284                     214          CLR.L       D4                  
00001254  4285                     215          CLR.L       D5                  
00001256  4286                     216          CLR.L       D6                  
00001258  207C 00000000            217          MOVE.L      #$0000000,A0       Reset from A1 to A7
0000125E  227C 00000000            218          MOVE.L      #$0000000,A1       
00001264  247C 00000000            219          MOVE.L      #$0000000,A2       
0000126A  267C 00000000            220          MOVE.L      #$0000000,A3       
00001270  287C 00000000            221          MOVE.L      #$0000000,A4       
00001276  2A7C 00000000            222          MOVE.L      #$0000000,A5       
0000127C  2C7C 00000000            223          MOVE.L      #$0000000,A6       
00001282  2E7C 01000000            224          MOVEA.L     #$01000000,A7       
00001288  6000 FD76                225          BRA         START               
0000128C                           226  OPCODESETUP
0000128C  103C 000B                227          MOVE.B      #11,D0             Trap #11 to clear screen
00001290  323C FF00                228          MOVE.W      #$FF00,D1          Clear Screen
00001294  4E4F                     229          TRAP        #15                Trap
00001296  6000 0002                230          BRA         MAINLOOP           Go to Main Loop     
0000129A                           231  MAINLOOP
0000129A  1E3C 0000                232          MOVE.B      #$00,D7            Good flag     
0000129E  361D                     233          MOVE.W      (A5)+,D3           Move Instruction to D3
000012A0  47F9 00003890            234          LEA         buffer,A3          init. good buffer
000012A6                           235          
000012A6  4286                     236          CLR.L       D6                 Print out the addresses
000012A8  3C0D                     237          MOVE.W      A5,D6
000012AA  5506                     238          SUBQ.B      #2,D6
000012AC  E04E                     239          LSR.W       #8,D6
000012AE  E84E                     240          LSR.W       #4,D6
000012B0  4EB9 0000373C            241          JSR         print_absoluteAdd 
000012B6  3C0D                     242          MOVE.W      A5,D6
000012B8  5506                     243          SUBQ.B      #2,D6
000012BA  E94E                     244          LSL.W       #4,D6
000012BC  E04E                     245          LSR.W       #8,D6
000012BE  E84E                     246          LSR.W       #4,D6
000012C0  4EB9 0000373C            247          JSR         print_absoluteAdd
000012C6  3C0D                     248          MOVE.W      A5,D6
000012C8  5506                     249          SUBQ.B      #2,D6
000012CA  E14E                     250          LSL.W       #8,D6
000012CC  E04E                     251          LSR.W       #8,D6
000012CE  E84E                     252          LSR.W       #4,D6
000012D0  4EB9 0000373C            253          JSR         print_absoluteAdd
000012D6  3C0D                     254          MOVE.W      A5,D6
000012D8  5506                     255          SUBQ.B      #2,D6
000012DA  E14E                     256          LSL.W       #8,D6
000012DC  E94E                     257          LSL.W       #4,D6
000012DE  E04E                     258          LSR.W       #8,D6
000012E0  E84E                     259          LSR.W       #4,D6
000012E2  4EB9 0000373C            260          JSR         print_absoluteAdd
000012E8                           261      
000012E8                           262          
000012E8  16FC 0020                263          MOVE.B      #' ',(A3)+          Print spaces
000012EC  16FC 0020                264          MOVE.B      #' ',(A3)+
000012F0  16FC 0020                265          MOVE.B      #' ',(A3)+
000012F4                           266      
000012F4                           267  
000012F4  49F9 00004376            268          LEA         BADBUFFER, A4       store bad buffer
000012FA  4EB9 00001344            269          JSR         PUSHADDR            Push the good addr for process
00001300  4EB9 0000134C            270          JSR         SETUPBADDATA        Set up the bad data print
00001306  4EB9 0000143E            271          JSR         JTableSetUp         Get the first 4 bits of instruction
0000130C  BE3C 00FF                272          CMP.B       #$FF,D7             Check if instruction is Bad
00001310  6700 0060                273          BEQ         HANDLINGINVALIDS    If it's bad data, print bad data
00001314  16FC 0000                274          MOVE.B      #$00,(A3)+          Else add 00 to good data
00001318  43F9 00003890            275          LEA         buffer,A1           print good data
0000131E  700D                     276          MOVEQ       #13,D0              Print
00001320  4E4F                     277          TRAP        #15                 call Trap
00001322                           278          
00001322                           279  OUTERLOOP        
00001322  BDCD                     280          CMPA.L      A5,A6               Compare the starting pointer to ending addr
00001324  6700 00FE                281          BEQ         END                 If hit the end
00001328  BDCD                     282          CMPA.L      A5,A6               Compare starting and ending address
0000132A  6D00 00F8                283          BLT         END                 The starting is greater than ending!! End program
0000132E  5239 00003DE5            284          ADD.B       #1, LINECOUNT       Line count increment
00001334  0C39 0019 00003DE5       285          CMP.B       #25, LINECOUNT      Each page will have 25 lines. Then prompt user
0000133C  6700 00CC                286          BEQ         ENDOFPAGE       Hit end of page. 25 Lines, check prompt
00001340  6000 FF58                287          BRA         MAINLOOP                
00001344                           288          
00001344                           289  PUSHADDR
00001344  7008                     290          MOVEQ       #8,D0               Move current counter to D0
00001346  280D                     291          MOVE.L      A5,D4               Move address to D4
00001348  5504                     292          SUB.B       #2,D4               Subtract 2 to the counter
0000134A  4E75                     293          RTS
0000134C                           294  SETUPBADDATA
0000134C  18FC 0049                295          MOVE.B      #'I',(A4)+          Insert I into the output
00001350  18FC 004E                296          MOVE.B      #'N',(A4)+          Insert N into the output
00001354  18FC 0056                297          MOVE.B      #'V',(A4)+          Insert V into the output
00001358  18FC 0041                298          MOVE.B      #'A',(A4)+          Insert A space into the output
0000135C  18FC 004C                299          MOVE.B      #'L',(A4)+          Insert L into output
00001360  18FC 0049                300          MOVE.B      #'I',(A4)+          Insert I into output
00001364  18FC 0044                301          MOVE.B      #'D',(A4)+          Insert D into output
00001368  18FC 0020                302          MOVE.B      #' ',(A4)+          Insert space into output
0000136C  18FC 0024                303          MOVE.B      #'$',(A4)+          Insert a $ into output
00001370  4E75                     304          RTS
00001372                           305  
00001372                           306  HANDLINGINVALIDS
00001372                           307               
00001372  47F9 000038E0            308          LEA         EmptyStr, A3        Prints the invalid msgs
00001378  4286                     309          CLR.L       D6
0000137A  3C0D                     310          MOVE.W      A5,D6
0000137C  5506                     311          SUBQ.B      #2,D6
0000137E  E04E                     312          LSR.W       #8,D6
00001380  E84E                     313          LSR.W       #4,D6
00001382  4EB9 0000373C            314          JSR         print_absoluteAdd 
00001388  3C0D                     315          MOVE.W      A5,D6
0000138A  5506                     316          SUBQ.B      #2,D6
0000138C  E94E                     317          LSL.W       #4,D6
0000138E  E04E                     318          LSR.W       #8,D6
00001390  E84E                     319          LSR.W       #4,D6
00001392  4EB9 0000373C            320          JSR         print_absoluteAdd
00001398  3C0D                     321          MOVE.W      A5,D6
0000139A  5506                     322          SUBQ.B      #2,D6
0000139C  E14E                     323          LSL.W       #8,D6
0000139E  E04E                     324          LSR.W       #8,D6
000013A0  E84E                     325          LSR.W       #4,D6
000013A2  4EB9 0000373C            326          JSR         print_absoluteAdd
000013A8  3C0D                     327          MOVE.W      A5,D6
000013AA  5506                     328          SUBQ.B      #2,D6
000013AC  E14E                     329          LSL.W       #8,D6
000013AE  E94E                     330          LSL.W       #4,D6
000013B0  E04E                     331          LSR.W       #8,D6
000013B2  E84E                     332          LSR.W       #4,D6
000013B4  4EB9 0000373C            333          JSR         print_absoluteAdd
000013BA                           334          
000013BA  16FC 0020                335          MOVE.B      #' ',(A3)+
000013BE  16FC 0020                336          MOVE.B      #' ',(A3)+
000013C2  16FC 0020                337          MOVE.B      #' ',(A3)+
000013C6                           338          
000013C6  16FC 0044                339          MOVE.B      #'D',(A3)+
000013CA  16FC 0041                340          MOVE.B      #'A',(A3)+
000013CE  16FC 0054                341          MOVE.B      #'T',(A3)+
000013D2  16FC 0041                342          MOVE.B      #'A',(A3)+
000013D6                           343          
000013D6  16FC 0020                344          MOVE.B      #' ',(A3)+
000013DA  16FC 0020                345          MOVE.B      #' ',(A3)+
000013DE  16FC 0020                346          MOVE.B      #' ',(A3)+
000013E2  16FC 0020                347          MOVE.B      #' ',(A3)+
000013E6                           348          
000013E6  16FC 0024                349          MOVE.B      #'$',(A3)+
000013EA  16FC 0057                350          MOVE.B      #'W',(A3)+
000013EE  16FC 0058                351          MOVE.B      #'X',(A3)+
000013F2  16FC 0059                352          MOVE.B      #'Y',(A3)+
000013F6  16FC 005A                353          MOVE.B      #'Z',(A3)+
000013FA                           354          
000013FA  43F9 000038E0            355          LEA         EmptyStr,A1
00001400  103C 000D                356          MOVE.B      #13,D0
00001404  4E4F                     357          TRAP        #15
00001406  6000 FF1A                358          BRA         OUTERLOOP
0000140A                           359  ENDOFPAGE
0000140A  700D                     360          MOVEQ       #13,D0              Set trap to 13 to print
0000140C  13FC 0000 00003DE5       361          MOVE.B      #$00, LINECOUNT     Reset the Line Count
00001414  43F9 0000433A            362          LEA         KEYENTER,A1         Print out next step instruction
0000141A  103C 000D                363          MOVE.B      #13, D0             Set trap to 13 to print
0000141E  4E4F                     364          TRAP        #15                 Call trap
00001420  6000 FDA8                365          BRA         GETKEY              Find out what the user wants to do
00001424                           366  END
00001424  43F9 00004300            367          LEA         ENDPROMPT,A1        Print out next step message
0000142A  103C 000D                368          MOVE.B      #13, D0             Set trap to 13 to print
0000142E  4E4F                     369          TRAP        #15                 Call trap
00001430  6000 FDD2                370          BRA         ENDGETKEY           Find out what the user wants to do
00001434                           371  THEEND     
00001434  43F9 00003FFB            372          LEA         ENDMSG,A1           print the end message on the screen
0000143A  700E                     373          MOVEQ       #14,D0              Set printing trap
0000143C  4E4F                     374          TRAP        #15                 Call trip
0000143E                           375          
0000143E                           376          
0000143E                           377  *----------------------------------------------------------------
0000143E                           378  *                           JUMP TABLES                         *
0000143E                           379  *----------------------------------------------------------------
0000143E                           380  * Jump tables are used to quickly determine the op code by removing
0000143E                           381  * possibilities by comparing different sections of the binary command.
0000143E                           382  * Each jump table checks 4-bit lengths to see if it is valid.
0000143E                           383  
0000143E                           384  JTableSetUp               *This section sets up jumping for first 4 bits
0000143E  4284                     385          CLR.L   D4
00001440  3803                     386          MOVE.W  D3,D4     *grab the 16 bits
00001442  E84C                     387          LSR.W   #4,D4
00001444  E04C                     388          LSR.W   #8,D4     *shift to obtain first 4 bits
00001446  C8FC 0006                389          MULU    #6,D4     *set offset
0000144A  49F9 00001456            390          LEA     TABLEPRIME,A4 *load table prime for jumping
00001450  4EB4 4000                391          JSR     0(A4,D4)      *jump
00001454  4E75                     392          RTS
00001456                           393  
00001456                           394  TABLEPRIME 
00001456  4EF9 00001576            395          JMP     PRIME0000  *SUBI,ORI,EORI,BTST,CMPI
0000145C  4EF9 000015B2            396          JMP     PRIME0001  *MOVE.B
00001462  4EF9 000015CA            397          JMP     PRIME0010  *MOVE.L,MOVEA.L
00001468  4EF9 000015E2            398          JMP     PRIME0011  *MOVE.W,MOVEA.W
0000146E  4EF9 000015FA            399          JMP     PRIME0100  *MOVEM,NEG,NOT,JSR,RTS,LEA
00001474  4EF9 0000163E            400          JMP     PRIME0101  *ADDQ
0000147A  4EF9 00001668            401          JMP     PRIME0110  *BCC,BRA
00001480  4EF9 000016A2            402          JMP     PRIME0111  *----------
00001486  4EF9 000016AA            403          JMP     PRIME1000  *DIVS
0000148C  4EF9 000016C4            404          JMP     PRIME1001  *SUB,SUBA
00001492  4EF9 0000170E            405          JMP     PRIME1010  *----------
00001498  4EF9 00001716            406          JMP     PRIME1011  *EOR,CMP,CMPA
0000149E  4EF9 00001760            407          JMP     PRIME1100  *AND,MULS
000014A4  4EF9 000017AA            408          JMP     PRIME1101  *ADD,ADDA
000014AA  4EF9 000017F4            409          JMP     PRIME1110  *LSL,LSR,ASL,ASR,ROL,ROR
000014B0  4EF9 000018B8            410          JMP     PRIME1111  *----------
000014B6                           411  
000014B6                           412  TABLE0000                  *SUBI,ORI,EORI,CMPI
000014B6  4EF9 000018C0            413          JMP     subtab1_0000    *ORI
000014BC  4EF9 000018EA            414          JMP     subtab1_0001    *----------
000014C2  4EF9 000018F2            415          JMP     subtab1_0010    *----------
000014C8  4EF9 000018FA            416          JMP     subtab1_0011    *----------
000014CE  4EF9 00001902            417          JMP     subtab1_0100    *SUBI
000014D4  4EF9 00001928            418          JMP     subtab1_0101    *----------
000014DA  4EF9 0000192C            419          JMP     subtab1_0110    *----------
000014E0  4EF9 00001930            420          JMP     subtab1_0111    *----------
000014E6  4EF9 00001934            421          JMP     subtab1_1000    *----------
000014EC  4EF9 00001938            422          JMP     subtab1_1001    *----------
000014F2  4EF9 0000193C            423          JMP     subtab1_1010    *EORI
000014F8  4EF9 00001962            424          JMP     subtab1_1011    *----------
000014FE  4EF9 00001966            425          JMP     subtab1_1100    *CMPI
00001504  4EF9 0000198C            426          JMP     subtab1_1101    *----------
0000150A  4EF9 00001990            427          JMP     subtab1_1110    *----------
00001510  4EF9 00001994            428          JMP     subtab1_1111    *----------
00001516                           429          
00001516                           430  TABLE0100                  *MOVEM_,NEG,NOT,JSR,RTS,LEA_
00001516  4EF9 00001998            431          JMP     subtab2_0000    *----------
0000151C  4EF9 0000199C            432          JMP     subtab2_0001    *----------
00001522  4EF9 000019A0            433          JMP     subtab2_0010    *----------
00001528  4EF9 000019A4            434          JMP     subtab2_0011    *----------
0000152E  4EF9 000019A8            435          JMP     subtab2_0100    *NEG
00001534  4EF9 000019CE            436          JMP     subtab2_0101    *----------
0000153A  4EF9 000019D2            437          JMP     subtab2_0110    *NOT
00001540  4EF9 000019F8            438          JMP     subtab2_0111    *----------
00001546  4EF9 000019FC            439          JMP     subtab2_1000    *----------
0000154C  4EF9 00001A00            440          JMP     subtab2_1001    *----------
00001552  4EF9 00001A04            441          JMP     subtab2_1010    *----------
00001558  4EF9 00001A08            442          JMP     subtab2_1011    *----------
0000155E  4EF9 00001A0C            443          JMP     subtab2_1100    *----------
00001564  4EF9 00001A10            444          JMP     subtab2_1101    *----------
0000156A  4EF9 00001A14            445          JMP     subtab2_1110    *JSR,RTS
00001570  4EF9 00001A36            446          JMP     subtab2_1111    *----------
00001576                           447  
00001576                           448  *----------------------------------------------------------------
00001576                           449  *                       TABLE SUBROUTINES                       *
00001576                           450  *----------------------------------------------------------------
00001576                           451  * The following subroutines work by determining the op code that
00001576                           452  * is given in data register 3. They check for multiple 
00001576                           453  * possibilities before finalizing the actual op code. 
00001576                           454  * Once it is determined, the opcode subroutines are called to 
00001576                           455  * load the pertinent command to the buffer.
00001576                           456  
00001576                           457  PRIME0000                  *SUBI,ORI,EORI,BTST,CMPI
00001576                           458                             *BTST checked before TABLE0000
00001576  4284                     459          CLR.L   D4
00001578  3803                     460          MOVE.W  D3,D4
0000157A  E94C                     461          LSL.W   #$4,D4      *Remove first 4 bits,
0000157C  E84C                     462          LSR.W   #$4,D4
0000157E  EC4C                     463          LSR.W   #$6,D4      *Remove last 6 bits
00001580  B87C 0020                464          CMP.W   #%100000,D4 *Compare remaining to BTST
00001584  6700 0B10                465          BEQ     BTST_v2OP
00001588                           466          
00001588  4284                     467          CLR.L   D4
0000158A  3803                     468          MOVE.W  D3,D4       *Grab original 16 bits again
0000158C  EF4C                     469          LSL.W   #$7,D4
0000158E  EE4C                     470          LSR.W   #$7,D4
00001590  EC4C                     471          LSR.W   #$6,D4      *shift out first 7 and last 6
00001592  B87C 0004                472          CMP.W   #%100,D4    *Check alternative BTST
00001596  6700 0AE6                473          BEQ     BTST_v1OP
0000159A                           474  
0000159A  4284                     475          CLR.L   D4          *Check values against table
0000159C  3803                     476          MOVE.W  D3,D4       
0000159E  E04C                     477          LSR.W   #$8,D4
000015A0  0244 000F                478          ANDI.W  #$000F,D4   *Remove first 12 bits
000015A4  C8FC 0006                479          MULU    #$6,D4
000015A8  49F8 14B6                480          LEA     TABLE0000,A4 *Table 0000 checked
000015AC  4EB4 4000                481          JSR     0(A4,D4)
000015B0  4E75                     482          RTS
000015B2                           483          
000015B2                           484  PRIME0001                  *MOVE.B
000015B2  4284                     485          CLR.L   D4
000015B4  3803                     486          MOVE.W  D3,D4
000015B6  EF4C                     487          LSL.W   #$7,D4
000015B8  EE4C                     488          LSR.W   #$7,D4
000015BA  EC4C                     489          LSR.W   #$6,D4      *error check
000015BC  B87C 0001                490          CMP.W   #%001,D4    *cannot be addr reg
000015C0  6700 114C                491          BEQ     FLAGINVALID
000015C4  6000 09FC                492          BRA     MOVEBOP
000015C8  4E75                     493          RTS
000015CA                           494          
000015CA                           495  PRIME0010                  *MOVE.L, MOVEA.L
000015CA  4284                     496          CLR.L   D4
000015CC  3803                     497          MOVE.W  D3,D4
000015CE  EF4C                     498          LSL.W   #$7,D4
000015D0  EE4C                     499          LSR.W   #$7,D4
000015D2  EC4C                     500          LSR.W   #$6,D4
000015D4  B87C 0001                501          CMP.W   #%001,D4   *is addr reg destination?
000015D8  6700 0A30                502          BEQ     MOVEALOP   *yes = movea
000015DC  6000 0A08                503          BRA     MOVELOP    *no  = move
000015E0  4E75                     504          RTS
000015E2                           505          
000015E2                           506  PRIME0011                  *MOVE.W, MOVEA.W
000015E2  4284                     507          CLR.L   D4
000015E4  3803                     508          MOVE.W  D3,D4
000015E6  EF4C                     509          LSL.W   #$7,D4
000015E8  EE4C                     510          LSR.W   #$7,D4
000015EA  EC4C                     511          LSR.W   #$6,D4
000015EC  B87C 0001                512          CMP.W   #%001,D4   *is addr reg destination?
000015F0  6700 0A64                513          BEQ     MOVEAWOP   *yes = movea
000015F4  6000 0A3C                514          BRA     MOVEWOP    *no  = move
000015F8  4E75                     515          RTS
000015FA                           516  PRIME0100                  *MOVEM,NEG,NOT,JSR,RTS,LEA
000015FA                           517                             *Check for MOVEM & LEA ahead of time
000015FA  4284                     518          CLR.L   D4
000015FC  3803                     519          MOVE.W  D3,D4
000015FE  E94C                     520          LSL.W   #$4,D4      *Remove first 4 bits
00001600  E84C                     521          LSR.W   #$4,D4
00001602  EE4C                     522          LSR.W   #$7,D4      *Remove last 7 bits
00001604  B87C 0011                523          CMP.W   #%10001,D4
00001608  6700 0AA4                524          BEQ     MOVEM_0OP
0000160C  B87C 0019                525          CMP.W   #%11001,D4  *Check 2 types of MOVEM
00001610  6700 0AD6                526          BEQ     MOVEM_1OP
00001614                           527          
00001614  4284                     528          CLR.L   D4
00001616  3803                     529          MOVE.W  D3,D4
00001618  EF4C                     530          LSL.W   #$7,D4      *Reset and check diff bits for LEA
0000161A  EE4C                     531          LSR.W   #$7,D4
0000161C  EC4C                     532          LSR.W   #$6,D4
0000161E  B87C 0007                533          CMP.W   #%111,D4    *Reset and check for LEA
00001622  6700 0BB2                534          BEQ     LEAOP
00001626                           535  
00001626  4284                     536          CLR.L   D4
00001628  3803                     537          MOVE.W  D3,D4
0000162A  E04C                     538          LSR.W   #$8,D4
0000162C  0244 000F                539          ANDI.W  #$000F,D4
00001630  C8FC 0006                540          MULU    #$6,D4
00001634  49F8 1516                541          LEA     TABLE0100,A4    *Check table 0100
00001638  4EB4 4000                542          JSR     0(A4,D4)
0000163C  4E75                     543          RTS
0000163E                           544  PRIME0101                  *ADDQ
0000163E  4244                     545          CLR.W   D4
00001640  3803                     546          MOVE.W  D3,D4
00001642  EF4C                     547          LSL.W   #7,D4
00001644  EE4C                     548          LSR.W   #7,D4
00001646  EC4C                     549          LSR.W   #6,D4
00001648  B87C 0000                550          CMP.W   #%000,D4    *Determine type of ADDQ
0000164C  6700 0B1C                551          BEQ     ADDQBOP     *Must be B,W,L size
00001650  B87C 0001                552          CMP.W   #%001,D4    *or invalid
00001654  6700 0B38                553          BEQ     ADDQWOP
00001658  B87C 0002                554          CMP.W   #%010,D4
0000165C  6700 0B54                555          BEQ     ADDQLOP    
00001660                           556          
00001660  2E3C 000000FF            557          MOVE.L  #$FF,D7     *put in the bad flag value
00001666  4E75                     558          RTS
00001668                           559          
00001668                           560  PRIME0110                  *BCC,BRA
00001668  4244                     561          CLR.W   D4
0000166A  3803                     562          MOVE.W  D3,D4
0000166C  E94C                     563          LSL.W   #4,D4
0000166E  E84C                     564          LSR.W   #4,D4
00001670  E04C                     565          LSR.W   #8,D4
00001672  B87C 0000                566          CMP.W   #%0000,D4   *Check for bra
00001676  6700 0936                567          BEQ     BRAOP
0000167A  B87C 0002                568          CMP.W   #%0010,D4   *check for bhi
0000167E  6700 091A                569          BEQ     BHIOP
00001682  B87C 0006                570          CMP.W   #%0110,D4   *check for bne
00001686  6700 08EA                571          BEQ     BNEOP
0000168A  B87C 0007                572          CMP.W   #%0111,D4   *check for beq
0000168E  6700 08CE                573          BEQ     BEQOP
00001692  B87C 000D                574          CMP.W   #%1101,D4   *check for blt
00001696  6700 08EE                575          BEQ     BLTOP
0000169A  2E3C 000000FF            576          MOVE.L  #$FF,D7     *put in the bad flag value
000016A0  4E75                     577          RTS
000016A2                           578     
000016A2                           579  PRIME0111                  *----------
000016A2  2E3C 000000FF            580          MOVE.L  #$FF,D7     *put in the bad flag value
000016A8  4E75                     581          RTS
000016AA                           582          
000016AA                           583  PRIME1000                  *DIVS
000016AA  4244                     584          CLR.W   D4
000016AC  3803                     585          MOVE.W  D3,D4
000016AE  EF4C                     586          LSL.W   #7,D4
000016B0  EE4C                     587          LSR.W   #7,D4
000016B2  EC4C                     588          LSR.W   #6,D4
000016B4  B87C 0007                589          CMP.W   #%111,D4
000016B8  6700 0B2C                590          BEQ     DIVSOP
000016BC  2E3C 000000FF            591          MOVE.L  #$FF,D7     *put in the bad flag value
000016C2  4E75                     592          RTS
000016C4                           593  
000016C4                           594  *This method checks for all the different versions of
000016C4                           595  *sub and suba
000016C4                           596  PRIME1001                  *SUB,SUBA
000016C4  4244                     597          CLR.W   D4
000016C6  3803                     598          MOVE.W  D3,D4
000016C8  EF4C                     599          LSL.W   #7,D4
000016CA  EE4C                     600          LSR.W   #7,D4
000016CC  EC4C                     601          LSR.W   #6,D4
000016CE  B87C 0000                602          CMP.W   #%000,D4
000016D2  6700 075A                603          BEQ     SUBB_v1OP
000016D6  B87C 0001                604          CMP.W   #%001,D4
000016DA  6700 0792                605          BEQ     SUBW_v1OP
000016DE  B87C 0002                606          CMP.W   #%010,D4
000016E2  6700 07CA                607          BEQ     SUBL_v1OP
000016E6  B87C 0003                608          CMP.W   #%011,D4
000016EA  6700 0802                609          BEQ     SUBAWOP
000016EE  B87C 0004                610          CMP.W   #%100,D4
000016F2  6700 075A                611          BEQ     SUBB_v2OP
000016F6  B87C 0005                612          CMP.W   #%101,D4
000016FA  6700 0792                613          BEQ     SUBW_v2OP
000016FE  B87C 0006                614          CMP.W   #%110,D4
00001702  6700 07CA                615          BEQ     SUBL_v2OP
00001706  B87C 0007                616          CMP.W   #%111,D4
0000170A  6700 0806                617          BEQ     SUBALOP
0000170E                           618          
0000170E                           619  PRIME1010                  *---------
0000170E  2E3C 000000FF            620          MOVE.L  #$FF,D7     *put in the bad flag value
00001714  4E75                     621          RTS
00001716                           622          
00001716                           623  PRIME1011                  *EOR,CMP,CMPA
00001716  4244                     624          CLR.W   D4
00001718  3803                     625          MOVE.W  D3,D4
0000171A  EF4C                     626          LSL.W   #7,D4
0000171C  EE4C                     627          LSR.W   #7,D4
0000171E  EC4C                     628          LSR.W   #6,D4
00001720  B87C 0000                629          CMP.W   #%000,D4
00001724  6700 0BB0                630          BEQ     CMPBOP
00001728  B87C 0001                631          CMP.W   #%001,D4
0000172C  6700 0BC8                632          BEQ     CMPWOP
00001730  B87C 0002                633          CMP.W   #%010,D4
00001734  6700 0BE0                634          BEQ     CMPLOP
00001738  B87C 0003                635          CMP.W   #%011,D4
0000173C  6700 0BF8                636          BEQ     CMPAWOP
00001740  B87C 0004                637          CMP.W   #%100,D4
00001744  6700 0AC4                638          BEQ     EORBOP
00001748  B87C 0005                639          CMP.W   #%101,D4
0000174C  6700 0ADC                640          BEQ     EORWOP        
00001750  B87C 0006                641          CMP.W   #%110,D4
00001754  6700 0AF4                642          BEQ     EORLOP
00001758  B87C 0007                643          CMP.W   #%111,D4
0000175C  6700 0BFC                644          BEQ     CMPALOP
00001760                           645          
00001760                           646  *This method checks for all the versions of
00001760                           647  *AND and MULS
00001760                           648  PRIME1100                  *AND,MULS
00001760  4244                     649          CLR.W   D4
00001762  3803                     650          MOVE.W  D3,D4
00001764  EF4C                     651          LSL.W   #7,D4
00001766  EE4C                     652          LSR.W   #7,D4
00001768  EC4C                     653          LSR.W   #6,D4
0000176A  B87C 0000                654          CMP.W   #%000,D4
0000176E  6700 0446                655          BEQ     ANDB_v1OP
00001772  B87C 0001                656          CMP.W   #%001,D4
00001776  6700 047E                657          BEQ     ANDW_v1OP
0000177A  B87C 0002                658          CMP.W   #%010,D4
0000177E  6700 04B6                659          BEQ     ANDL_v1OP
00001782  B87C 0003                660          CMP.W   #%011,D4
00001786  6700 0F86                661          BEQ     FLAGINVALID
0000178A  B87C 0004                662          CMP.W   #%100,D4
0000178E  6700 0446                663          BEQ     ANDB_v2OP
00001792  B87C 0005                664          CMP.W   #%101,D4
00001796  6700 047E                665          BEQ     ANDW_v2OP        
0000179A  B87C 0006                666          CMP.W   #%110,D4
0000179E  6700 04B6                667          BEQ     ANDL_v2OP
000017A2  B87C 0007                668          CMP.W   #%111,D4
000017A6  6700 04CE                669          BEQ     MULSOP
000017AA                           670  
000017AA                           671          
000017AA                           672  *This method checks for all the ADD and ADDA
000017AA                           673  PRIME1101                  *ADD,ADDA
000017AA  4244                     674          CLR.W   D4
000017AC  3803                     675          MOVE.W  D3,D4
000017AE  EF4C                     676          LSL.W   #7,D4
000017B0  EE4C                     677          LSR.W   #7,D4
000017B2  EC4C                     678          LSR.W   #6,D4
000017B4  B87C 0000                679          CMP.W   #%000,D4
000017B8  6700 02DC                680          BEQ     ADDB_v1OP
000017BC  B87C 0001                681          CMP.W   #%001,D4
000017C0  6700 0314                682          BEQ     ADDW_v1OP        
000017C4  B87C 0002                683          CMP.W   #%010,D4
000017C8  6700 034C                684          BEQ     ADDL_v1OP
000017CC  B87C 0003                685          CMP.W   #%011,D4
000017D0  6700 0384                686          BEQ     ADDAWOP
000017D4  B87C 0004                687          CMP.W   #%100,D4
000017D8  6700 02DC                688          BEQ     ADDB_v2OP
000017DC  B87C 0005                689          CMP.W   #%101,D4
000017E0  6700 0314                690          BEQ     ADDW_v2OP
000017E4  B87C 0006                691          CMP.W   #%110,D4
000017E8  6700 034C                692          BEQ     ADDL_v2OP
000017EC  B87C 0007                693          CMP.W   #%111,D4
000017F0  6700 0388                694          BEQ     ADDALOP
000017F4                           695  
000017F4                           696  *This funciton relies on MEMSHIFT and the REGOP
000017F4                           697  PRIME1110                  *LSL,LSR,ASL,ASR,ROL,ROR
000017F4                           698  
000017F4  4244                     699          CLR.W   D4
000017F6  3803                     700          MOVE.W  D3,D4
000017F8  E14C                     701          LSL.W   #8,D4
000017FA  E04C                     702          LSR.W   #8,D4
000017FC  EC4C                     703          LSR.W   #6,D4
000017FE  B87C 0003                704          CMP.W   #%11,D4
00001802  6700 0030                705          BEQ     MEMSHIFT
00001806                           706  
00001806  4244                     707          CLR.W   D4
00001808  3803                     708          MOVE.W  D3,D4
0000180A  E14C                     709          LSL.W   #8,D4
0000180C  E74C                     710          LSL.W   #3,D4
0000180E  E04C                     711          LSR.W   #8,D4
00001810  E64C                     712          LSR.W   #3,D4
00001812  E64C                     713          LSR.W   #3,D4
00001814  B87C 0003                714          CMP.W   #%11,D4
00001818  6700 005C                715          BEQ     ROTATE_REGOP
0000181C  B87C 0001                716          CMP.W   #%01,D4
00001820  6700 006A                717          BEQ     LSHIFT_REGOP
00001824  B87C 0000                718          CMP.W   #%00,D4
00001828  6700 0078                719          BEQ     ASHIFT_REGOP
0000182C                           720  
0000182C  2E3C 000000FF            721          MOVE.L  #$FF,D7     *put in the bad flag value
00001832  4E75                     722          RTS
00001834                           723  
00001834                           724  *This funciton calls on the rotate and shifts for memory
00001834                           725  MEMSHIFT
00001834  4244                     726          CLR.W   D4
00001836  3803                     727          MOVE.W  D3,D4
00001838  E94C                     728          LSL.W   #4,D4
0000183A  E84C                     729          LSR.W   #4,D4
0000183C  E04C                     730          LSR.W   #8,D4
0000183E  B87C 0007                731          CMP.W   #%0111,D4   ;check for direction, type of shift/rotate
00001842  6700 0B3A                732          BEQ     ROL_MEMOP
00001846  B87C 0006                733          CMP.W   #%0110,D4
0000184A  6700 0B46                734          BEQ     ROR_MEMOP
0000184E  B87C 0003                735          CMP.W   #%0011,D4
00001852  6700 0D62                736          BEQ     LSL_MEMOP
00001856  B87C 0002                737          CMP.W   #%0010,D4
0000185A  6700 0D6E                738          BEQ     LSR_MEMOP
0000185E  B87C 0001                739          CMP.W   #%0001,D4
00001862  6700 0E82                740          BEQ     ASL_MEMOP
00001866  B87C 0000                741          CMP.W   #%0000,D4
0000186A  6700 0E8E                742          BEQ     ASR_MEMOP
0000186E                           743          
0000186E  2E3C 000000FF            744          MOVE.L  #$FF,D7     *put in the bad flag value
00001874  4E75                     745          RTS
00001876                           746  
00001876                           747  ROTATE_REGOP
00001876  4244                     748          CLR.W   D4
00001878  3803                     749          MOVE.W  D3,D4
0000187A  EF4C                     750          LSL.W   #7,D4
0000187C  EE4C                     751          LSR.W   #7,D4
0000187E  E04C                     752          LSR.W   #8,D4
00001880  B87C 0000                753          CMP.W   #%0,D4
00001884  6700 0C06                754          BEQ     ROR_REGOP
00001888  6000 0BDC                755          BRA     ROL_REGOP
0000188C                           756  
0000188C                           757  LSHIFT_REGOP
0000188C  4244                     758          CLR.W   D4
0000188E  3803                     759          MOVE.W  D3,D4
00001890  EF4C                     760          LSL.W   #7,D4
00001892  EE4C                     761          LSR.W   #7,D4
00001894  E04C                     762          LSR.W   #8,D4
00001896  B87C 0000                763          CMP.W   #%0,D4
0000189A  6700 0CF8                764          BEQ     LSR_REGOP
0000189E  6000 0CCE                765          BRA     LSL_REGOP
000018A2                           766  
000018A2                           767  ASHIFT_REGOP
000018A2  4244                     768          CLR.W   D4
000018A4  3803                     769          MOVE.W  D3,D4
000018A6  EF4C                     770          LSL.W   #7,D4
000018A8  EE4C                     771          LSR.W   #7,D4
000018AA  E04C                     772          LSR.W   #8,D4
000018AC  B87C 0000                773          CMP.W   #%0,D4
000018B0  6700 0E12                774          BEQ     ASR_REGOP
000018B4  6000 0DE8                775          BRA     ASL_REGOP
000018B8                           776  
000018B8                           777  
000018B8                           778  PRIME1111                  *---------
000018B8  2E3C 000000FF            779          MOVE.L  #$FF,D7     *put in the bad flag value
000018BE  4E75                     780          RTS
000018C0                           781  
000018C0                           782  subtab1_0000                  *ORI, determine byte/word/long
000018C0  4244                     783          CLR.W   D4
000018C2  3803                     784          MOVE.W  D3,D4
000018C4  E14C                     785          LSL.W   #8,D4
000018C6  E04C                     786          LSR.W   #8,D4
000018C8  EC4C                     787          LSR.W   #6,D4
000018CA  B87C 0000                788          CMP.W   #%00,D4     ;check opmode
000018CE  6700 016A                789          BEQ     ORIBOP
000018D2  B87C 0001                790          CMP.W   #%01,D4
000018D6  6700 017E                791          BEQ     ORIWOP
000018DA  B87C 0002                792          CMP.W   #%10,D4
000018DE  6700 0196                793          BEQ     ORILOP
000018E2                           794          
000018E2  2E3C 000000FF            795          MOVE.L  #$FF,D7     *put in the bad flag value
000018E8  4E75                     796          RTS
000018EA                           797          
000018EA                           798  subtab1_0001
000018EA  2E3C 000000FF            799          MOVE.L  #$FF,D7     *put in the bad flag value
000018F0  4E75                     800          RTS
000018F2                           801          
000018F2                           802  subtab1_0010
000018F2  2E3C 000000FF            803          MOVE.L  #$FF,D7     *put in the bad flag value
000018F8  4E75                     804          RTS
000018FA                           805          
000018FA                           806  subtab1_0011
000018FA  2E3C 000000FF            807          MOVE.L  #$FF,D7     *put in the bad flag value
00001900  4E75                     808          RTS
00001902                           809          
00001902                           810  subtab1_0100                  *SUBI,determine byte,word,long
00001902  4244                     811          CLR.W   D4
00001904  3803                     812          MOVE.W  D3,D4
00001906  E14C                     813          LSL.W   #8,D4
00001908  E04C                     814          LSR.W   #8,D4
0000190A  EC4C                     815          LSR.W   #6,D4
0000190C  B87C 0000                816          CMP.W   #%00,D4     ;check opmode
00001910  6700 04B0                817          BEQ     SUBIBOP
00001914  B87C 0001                818          CMP.W   #%01,D4
00001918  6700 04CC                819          BEQ     SUBIWOP
0000191C  B87C 0002                820          CMP.W   #%10,D4
00001920  6700 04E8                821          BEQ     SUBILOP
00001924                           822          
00001924  6000 0DE8                823          BRA     FLAGINVALID
00001928                           824          
00001928                           825  subtab1_0101
00001928  6000 0DE4                826          BRA     FLAGINVALID
0000192C                           827          
0000192C                           828  subtab1_0110
0000192C  6000 0DE0                829          BRA     FLAGINVALID
00001930                           830  subtab1_0111 
00001930  6000 0DDC                831          BRA     FLAGINVALID
00001934                           832  subtab1_1000
00001934  6000 0DD8                833          BRA     FLAGINVALID
00001938                           834  subtab1_1001
00001938  6000 0DD4                835          BRA     FLAGINVALID
0000193C                           836  subtab1_1010                  *EORI,determine byte/word/long
0000193C  4244                     837          CLR.W   D4
0000193E  3803                     838          MOVE.W  D3,D4
00001940  E14C                     839          LSL.W   #8,D4
00001942  E04C                     840          LSR.W   #8,D4
00001944  EC4C                     841          LSR.W   #6,D4
00001946  B87C 0000                842          CMP.W   #%00,D4
0000194A  6700 040A                843          BEQ     EORIBOP
0000194E  B87C 0001                844          CMP.W   #%01,D4
00001952  6700 0426                845          BEQ     EORIWOP
00001956  B87C 0002                846          CMP.W   #%10,D4
0000195A  6700 0442                847          BEQ     EORILOP
0000195E                           848          
0000195E  6000 0DAE                849          BRA     FLAGINVALID
00001962                           850          
00001962                           851  subtab1_1011
00001962  6000 0DAA                852          BRA     FLAGINVALID
00001966                           853          
00001966                           854  subtab1_1100                  *CMPI,determine byte/word/long
00001966  4244                     855          CLR.W   D4
00001968  3803                     856          MOVE.W  D3,D4
0000196A  E14C                     857          LSL.W   #8,D4
0000196C  E04C                     858          LSR.W   #8,D4
0000196E  EC4C                     859          LSR.W   #6,D4
00001970  B87C 0000                860          CMP.W   #%00,D4 ;check opmode
00001974  6700 08F4                861          BEQ     CMPIBOP
00001978  B87C 0001                862          CMP.W   #%01,D4
0000197C  6700 0910                863          BEQ     CMPIWOP
00001980  B87C 0002                864          CMP.W   #%10,D4
00001984  6700 092C                865          BEQ     CMPILOP
00001988                           866          
00001988  6000 0D84                867          BRA     FLAGINVALID
0000198C                           868          
0000198C                           869  subtab1_1101
0000198C  6000 0D80                870          BRA     FLAGINVALID
00001990                           871          
00001990                           872  subtab1_1110
00001990  6000 0D7C                873          BRA     FLAGINVALID
00001994                           874          
00001994                           875  subtab1_1111 
00001994  6000 0D78                876          BRA     FLAGINVALID
00001998                           877          
00001998                           878  subtab2_0000
00001998  6000 0D74                879          BRA     FLAGINVALID
0000199C                           880  
0000199C                           881  subtab2_0001
0000199C  6000 0D70                882          BRA     FLAGINVALID
000019A0                           883  
000019A0                           884  subtab2_0010
000019A0  6000 0D6C                885          BRA     FLAGINVALID
000019A4                           886  
000019A4                           887  subtab2_0011
000019A4  6000 0D68                888          BRA     FLAGINVALID
000019A8                           889  
000019A8                           890  subtab2_0100    *NEG,determine byte/word/long
000019A8  4244                     891          CLR.W   D4
000019AA  3803                     892          MOVE.W  D3,D4 ;check opmode
000019AC  E14C                     893          LSL.W   #8,D4
000019AE  E04C                     894          LSR.W   #8,D4
000019B0  EC4C                     895          LSR.W   #6,D4
000019B2  B87C 0000                896          CMP.W   #%00,D4
000019B6  6700 02E2                897          BEQ     NEGBOP
000019BA  B87C 0001                898          CMP.W   #%01,D4
000019BE  6700 02F6                899          BEQ     NEGWOP
000019C2  B87C 0002                900          CMP.W   #%10,D4
000019C6  6700 030E                901          BEQ     NEGLOP
000019CA                           902          
000019CA  6000 0D42                903          BRA     FLAGINVALID
000019CE                           904  
000019CE                           905  subtab2_0101
000019CE  6000 0D3E                906          BRA     FLAGINVALID
000019D2                           907  
000019D2                           908  subtab2_0110    *NOT, determine byte/word/long
000019D2  4244                     909          CLR.W   D4
000019D4  3803                     910          MOVE.W  D3,D4
000019D6  E14C                     911          LSL.W   #8,D4
000019D8  E04C                     912          LSR.W   #8,D4
000019DA  EC4C                     913          LSR.W   #6,D4
000019DC  B87C 0000                914          CMP.W   #%00,D4 ;check opmode
000019E0  6700 0314                915          BEQ     NOTBOP
000019E4  B87C 0001                916          CMP.W   #%01,D4
000019E8  6700 032C                917          BEQ     NOTWOP
000019EC  B87C 0002                918          CMP.W   #%10,D4
000019F0  6700 0344                919          BEQ     NOTLOP
000019F4                           920          
000019F4  6000 0D18                921          BRA     FLAGINVALID
000019F8                           922          
000019F8                           923  subtab2_0111
000019F8  6000 0D14                924          BRA     FLAGINVALID
000019FC                           925  
000019FC                           926  subtab2_1000
000019FC  6000 0D10                927          BRA     FLAGINVALID
00001A00                           928  
00001A00                           929  subtab2_1001
00001A00  6000 0D0C                930          BRA     FLAGINVALID
00001A04                           931  
00001A04                           932  subtab2_1010
00001A04  6000 0D08                933          BRA     FLAGINVALID
00001A08                           934  
00001A08                           935  
00001A08                           936  subtab2_1011
00001A08  6000 0D04                937          BRA     FLAGINVALID
00001A0C                           938  
00001A0C                           939  subtab2_1100
00001A0C  6000 0D00                940          BRA     FLAGINVALID
00001A10                           941  
00001A10                           942  subtab2_1101
00001A10  6000 0CFC                943          BRA     FLAGINVALID
00001A14                           944  
00001A14                           945  subtab2_1110    *JSR,RTS
00001A14  4244                     946          CLR.W   D4
00001A16  3803                     947          MOVE.W  D3,D4
00001A18  E14C                     948          LSL.W   #8,D4
00001A1A  E04C                     949          LSR.W   #8,D4
00001A1C  EC4C                     950          LSR.W   #6,D4
00001A1E  B87C 0002                951          CMP.W   #%10,D4
00001A22  6700 0512                952          BEQ     JSROP
00001A26                           953          
00001A26  4244                     954          CLR.W   D4
00001A28  3803                     955          MOVE.W  D3,D4
00001A2A  EF4C                     956          LSL.W   #7,D4
00001A2C  EE4C                     957          LSR.W   #7,D4
00001A2E  B87C 0075                958          CMP.W   #%01110101,D4
00001A32  6700 0516                959          BEQ     RTSOP
00001A36                           960          
00001A36                           961  subtab2_1111
00001A36  6000 0CD6                962          BRA     FLAGINVALID
00001A3A                           963  
00001A3A                           964  
00001A3A                           965  *----------------------------------------------------------------
00001A3A                           966  *               INSERTING OP CODES TO BUFFER                    *
00001A3A                           967  *----------------------------------------------------------------
00001A3A                           968  * This section of the code has determined the final op codes and
00001A3A                           969  * so it uploads the command and size (if relevant) to the buffer.
00001A3A                           970  * It then branches to the relevant EA section of the code
00001A3A                           971  
00001A3A                           972  ORIBOP
00001A3A  16FC 004F                973          MOVE.B  #'O',(A3)+                  Insert O into output
00001A3E  16FC 0052                974          MOVE.B  #'R',(A3)+                  Insert R into output
00001A42  16FC 0049                975          MOVE.B  #'I',(A3)+                  Insert I into output
00001A46  16FC 002E                976          MOVE.B  #'.',(A3)+                  Insert . into output
00001A4A  16FC 0042                977          MOVE.B  #'B',(A3)+                  Insert B into output
00001A4E  16FC 0020                978          MOVE.B  #' ',(A3)+
00001A52  6000 1440                979          BRA     ORI
00001A56                           980          
00001A56                           981  ORIWOP
00001A56  16FC 004F                982          MOVE.B  #'O',(A3)+                  Insert O into output
00001A5A  16FC 0052                983          MOVE.B  #'R',(A3)+                  Insert R into output
00001A5E  16FC 0049                984          MOVE.B  #'I',(A3)+                  Insert I into output
00001A62  16FC 002E                985          MOVE.B  #'.',(A3)+                  Insert . into output
00001A66  16FC 0057                986          MOVE.B  #'W',(A3)+                  Insert W into output
00001A6A  16FC 0020                987          MOVE.B  #' ',(A3)+
00001A6E  1A3C 0000                988          MOVE.B  #%0,D5
00001A72  6000 1420                989          BRA     ORI
00001A76                           990          
00001A76                           991  ORILOP
00001A76  16FC 004F                992          MOVE.B  #'O',(A3)+                  Insert O into output
00001A7A  16FC 0052                993          MOVE.B  #'R',(A3)+                  Insert R into output
00001A7E  16FC 0049                994          MOVE.B  #'I',(A3)+                  Insert I into output
00001A82  16FC 002E                995          MOVE.B  #'.',(A3)+                  Insert . into output
00001A86  16FC 004C                996          MOVE.B  #'L',(A3)+                  Insert L into output
00001A8A  16FC 0020                997          MOVE.B  #' ',(A3)+
00001A8E  1A3C 0001                998          MOVE.B  #%1,D5
00001A92  6000 1400                999          BRA     ORI
00001A96                          1000  
00001A96                          1001  ADDB_v1OP
00001A96  16FC 0041               1002          MOVE.B  #'A',(A3)+                  Insert A into output
00001A9A  16FC 0044               1003          MOVE.B  #'D',(A3)+                  Insert D into output
00001A9E  16FC 0044               1004          MOVE.B  #'D',(A3)+                  Insert D into output
00001AA2  16FC 002E               1005          MOVE.B  #'.',(A3)+                  Insert . into output
00001AA6  16FC 0042               1006          MOVE.B  #'B',(A3)+                  Insert B into output
00001AAA  16FC 0020               1007          MOVE.B  #' ',(A3)+                  
00001AAE  1A3C 0000               1008          MOVE.B  #%0,D5
00001AB2  6000 0F4E               1009          BRA     ADD_v1
00001AB6                          1010  
00001AB6                          1011  ADDB_v2OP
00001AB6  16FC 0041               1012          MOVE.B  #'A',(A3)+                  Insert A into output
00001ABA  16FC 0044               1013          MOVE.B  #'D',(A3)+                  Insert D into output
00001ABE  16FC 0044               1014          MOVE.B  #'D',(A3)+                  Insert D into output
00001AC2  16FC 002E               1015          MOVE.B  #'.',(A3)+                  Insert . into output
00001AC6  16FC 0042               1016          MOVE.B  #'B',(A3)+                  Insert B into output
00001ACA  16FC 0020               1017          MOVE.B  #' ',(A3)+                  
00001ACE  1A3C 0000               1018          MOVE.B  #%0,D5
00001AD2  6000 0F76               1019          BRA     ADD_v2
00001AD6                          1020  
00001AD6                          1021  ADDW_v1OP
00001AD6  16FC 0041               1022          MOVE.B  #'A',(A3)+                  Insert A into output
00001ADA  16FC 0044               1023          MOVE.B  #'D',(A3)+                  Insert D into output
00001ADE  16FC 0044               1024          MOVE.B  #'D',(A3)+                  Insert D into output
00001AE2  16FC 002E               1025          MOVE.B  #'.',(A3)+                  Insert . into output
00001AE6  16FC 0057               1026          MOVE.B  #'W',(A3)+                  Insert W into output
00001AEA  16FC 0020               1027          MOVE.B  #' ',(A3)+                  
00001AEE  1A3C 0000               1028          MOVE.B  #%0,D5
00001AF2  6000 0F0E               1029          BRA     ADD_v1
00001AF6                          1030  
00001AF6                          1031  ADDW_v2OP
00001AF6  16FC 0041               1032          MOVE.B  #'A',(A3)+                  Insert A into output
00001AFA  16FC 0044               1033          MOVE.B  #'D',(A3)+                  Insert D into output
00001AFE  16FC 0044               1034          MOVE.B  #'D',(A3)+                  Insert D into output
00001B02  16FC 002E               1035          MOVE.B  #'.',(A3)+                  Insert . into output
00001B06  16FC 0057               1036          MOVE.B  #'W',(A3)+                  Insert W into output
00001B0A  16FC 0020               1037          MOVE.B  #' ',(A3)+                  
00001B0E  1A3C 0000               1038          MOVE.B  #%0,D5
00001B12  6000 0F36               1039          BRA     ADD_v2
00001B16                          1040  
00001B16                          1041  ADDL_v1OP
00001B16  16FC 0041               1042          MOVE.B  #'A',(A3)+                  Insert A into output
00001B1A  16FC 0044               1043          MOVE.B  #'D',(A3)+                  Insert D into output
00001B1E  16FC 0044               1044          MOVE.B  #'D',(A3)+                  Insert D into output
00001B22  16FC 002E               1045          MOVE.B  #'.',(A3)+                  Insert . into output
00001B26  16FC 004C               1046          MOVE.B  #'L',(A3)+                  Insert L into output
00001B2A  16FC 0020               1047          MOVE.B  #' ',(A3)+                  
00001B2E  1A3C 0001               1048          MOVE.B  #%1,D5
00001B32  6000 0ECE               1049          BRA     ADD_v1
00001B36                          1050  
00001B36                          1051  ADDL_v2OP
00001B36  16FC 0041               1052          MOVE.B  #'A',(A3)+                  Insert A into output
00001B3A  16FC 0044               1053          MOVE.B  #'D',(A3)+                  Insert D into output
00001B3E  16FC 0044               1054          MOVE.B  #'D',(A3)+                  Insert D into output
00001B42  16FC 002E               1055          MOVE.B  #'.',(A3)+                  Insert . into output
00001B46  16FC 004C               1056          MOVE.B  #'L',(A3)+                  Insert L into output
00001B4A  16FC 0020               1057          MOVE.B  #' ',(A3)+                  
00001B4E  1A3C 0001               1058          MOVE.B  #%1,D5
00001B52  6000 0EF6               1059          BRA     ADD_v2
00001B56                          1060  
00001B56                          1061  ADDAWOP
00001B56  16FC 0041               1062          MOVE.B  #'A',(A3)+                  Insert A into output
00001B5A  16FC 0044               1063          MOVE.B  #'D',(A3)+                  Insert D into output
00001B5E  16FC 0044               1064          MOVE.B  #'D',(A3)+                  Insert D into output
00001B62  16FC 0041               1065          MOVE.B  #'A',(A3)+                  Insert A into output
00001B66  16FC 002E               1066          MOVE.B  #'.',(A3)+                  Insert . into output
00001B6A  16FC 0057               1067          MOVE.B  #'W',(A3)+                  Insert W into output
00001B6E  16FC 0020               1068          MOVE.B  #' ',(A3)+                  
00001B72  1A3C 0000               1069          MOVE.B  #%0,D5
00001B76  6000 0F3A               1070          BRA     ADDA
00001B7A                          1071          
00001B7A                          1072  ADDALOP
00001B7A  16FC 0041               1073          MOVE.B  #'A',(A3)+                  Insert A into output
00001B7E  16FC 0044               1074          MOVE.B  #'D',(A3)+                  Insert D into output
00001B82  16FC 0044               1075          MOVE.B  #'D',(A3)+                  Insert D into output
00001B86  16FC 0041               1076          MOVE.B  #'A',(A3)+                  Insert A into output
00001B8A  16FC 002E               1077          MOVE.B  #'.',(A3)+                  Insert . into output
00001B8E  16FC 004C               1078          MOVE.B  #'L',(A3)+                  Insert L into output
00001B92  16FC 0020               1079          MOVE.B  #' ',(A3)+                  
00001B96  1A3C 0001               1080          MOVE.B  #%1,D5
00001B9A  6000 0F16               1081          BRA     ADDA
00001B9E                          1082  
00001B9E                          1083  ADDAOP
00001B9E  16FC 0041               1084          MOVE.B  #'A',(A3)+                  Insert A into output
00001BA2  16FC 0044               1085          MOVE.B  #'D',(A3)+                  Insert D into output
00001BA6  16FC 0044               1086          MOVE.B  #'D',(A3)+                  Insert D into output
00001BAA  16FC 0041               1087          MOVE.B  #'A',(A3)+                  Insert A into output
00001BAE  16FC 0020               1088          MOVE.B  #' ',(A3)+                  
00001BB2                          1089          
00001BB2  6000 0EFE               1090          BRA     ADDA
00001BB6                          1091  
00001BB6                          1092  ANDB_v1OP
00001BB6  16FC 0041               1093          MOVE.B  #'A',(A3)+                  Insert A into output
00001BBA  16FC 004E               1094          MOVE.B  #'N',(A3)+                  Insert N into output
00001BBE  16FC 0044               1095          MOVE.B  #'D',(A3)+                  Insert D into output
00001BC2  16FC 002E               1096          MOVE.B  #'.',(A3)+                  Insert . into output
00001BC6  16FC 0042               1097          MOVE.B  #'B',(A3)+                  Insert B into output
00001BCA  16FC 0020               1098          MOVE.B  #' ',(A3)+
00001BCE  1A3C 0000               1099          MOVE.B  #%0,D5                  
00001BD2  6000 1208               1100          BRA     AND_v1
00001BD6                          1101          
00001BD6                          1102  ANDB_v2OP
00001BD6  16FC 0041               1103          MOVE.B  #'A',(A3)+                  Insert A into output
00001BDA  16FC 004E               1104          MOVE.B  #'N',(A3)+                  Insert N into output
00001BDE  16FC 0044               1105          MOVE.B  #'D',(A3)+                  Insert D into output
00001BE2  16FC 002E               1106          MOVE.B  #'.',(A3)+                  Insert . into output
00001BE6  16FC 0042               1107          MOVE.B  #'B',(A3)+                  Insert B into output
00001BEA  16FC 0020               1108          MOVE.B  #' ',(A3)+
00001BEE  1A3C 0000               1109          MOVE.B  #%0,D5                  
00001BF2  6000 1238               1110          BRA     AND_v2
00001BF6                          1111  
00001BF6                          1112  ANDW_v1OP
00001BF6  16FC 0041               1113          MOVE.B  #'A',(A3)+                  Insert A into output
00001BFA  16FC 004E               1114          MOVE.B  #'N',(A3)+                  Insert N into output
00001BFE  16FC 0044               1115          MOVE.B  #'D',(A3)+                  Insert D into output
00001C02  16FC 002E               1116          MOVE.B  #'.',(A3)+                  Insert . into output
00001C06  16FC 0057               1117          MOVE.B  #'W',(A3)+                  Insert W into output
00001C0A  16FC 0020               1118          MOVE.B  #' ',(A3)+
00001C0E  1A3C 0000               1119          MOVE.B  #%0,D5                  
00001C12  6000 11C8               1120          BRA     AND_v1
00001C16                          1121  
00001C16                          1122  ANDW_v2OP
00001C16  16FC 0041               1123          MOVE.B  #'A',(A3)+                  Insert A into output
00001C1A  16FC 004E               1124          MOVE.B  #'N',(A3)+                  Insert N into output
00001C1E  16FC 0044               1125          MOVE.B  #'D',(A3)+                  Insert D into output
00001C22  16FC 002E               1126          MOVE.B  #'.',(A3)+                  Insert . into output
00001C26  16FC 0057               1127          MOVE.B  #'W',(A3)+                  Insert W into output
00001C2A  16FC 0020               1128          MOVE.B  #' ',(A3)+
00001C2E  1A3C 0000               1129          MOVE.B  #%0,D5                  
00001C32  6000 11F8               1130          BRA     AND_v2
00001C36                          1131          
00001C36                          1132  ANDL_v1OP
00001C36  16FC 0041               1133          MOVE.B  #'A',(A3)+                  Insert A into output
00001C3A  16FC 004E               1134          MOVE.B  #'N',(A3)+                  Insert N into output
00001C3E  16FC 0044               1135          MOVE.B  #'D',(A3)+                  Insert D into output
00001C42  16FC 002E               1136          MOVE.B  #'.',(A3)+                  Insert . into output
00001C46  16FC 004C               1137          MOVE.B  #'L',(A3)+                  Insert L into output
00001C4A  16FC 0020               1138          MOVE.B  #' ',(A3)+
00001C4E  1A3C 0001               1139          MOVE.B  #%1,D5                  
00001C52  6000 1188               1140          BRA     AND_v1
00001C56                          1141          
00001C56                          1142  ANDL_v2OP
00001C56  16FC 0041               1143          MOVE.B  #'A',(A3)+                  Insert A into output
00001C5A  16FC 004E               1144          MOVE.B  #'N',(A3)+                  Insert N into output
00001C5E  16FC 0044               1145          MOVE.B  #'D',(A3)+                  Insert D into output
00001C62  16FC 002E               1146          MOVE.B  #'.',(A3)+                  Insert . into output
00001C66  16FC 004C               1147          MOVE.B  #'L',(A3)+                  Insert L into output
00001C6A  16FC 0020               1148          MOVE.B  #' ',(A3)+
00001C6E  1A3C 0001               1149          MOVE.B  #%1,D5                  
00001C72  6000 11B8               1150          BRA     AND_v2
00001C76                          1151          
00001C76                          1152  MULSOP
00001C76  16FC 004D               1153          MOVE.B  #'M',(A3)+                  Insert M into output
00001C7A  16FC 0055               1154          MOVE.B  #'U',(A3)+                  Insert U into output
00001C7E  16FC 004C               1155          MOVE.B  #'L',(A3)+                  Insert L into output
00001C82  16FC 0053               1156          MOVE.B  #'S',(A3)+                  Insert S into output
00001C86  16FC 002E               1157          MOVE.B  #'.',(A3)+                  Insert . into output
00001C8A  16FC 0057               1158          MOVE.B  #'W',(A3)+                  Insert W into output
00001C8E  16FC 0020               1159          MOVE.B  #' ',(A3)+                  
00001C92  1A3C 0000               1160          MOVE.B  #%0,D5 
00001C96  6000 102C               1161          BRA     MULS
00001C9A                          1162          
00001C9A                          1163  NEGBOP
00001C9A  16FC 004E               1164          MOVE.B  #'N',(A3)+                  Insert N into output
00001C9E  16FC 0045               1165          MOVE.B  #'E',(A3)+                  Insert E into output
00001CA2  16FC 0047               1166          MOVE.B  #'G',(A3)+                  Insert G into output
00001CA6  16FC 002E               1167          MOVE.B  #'.',(A3)+                  Insert . into output
00001CAA  16FC 0042               1168          MOVE.B  #'B',(A3)+                  Insert B into output
00001CAE  16FC 0020               1169          MOVE.B  #' ',(A3)+                  
00001CB2                          1170          
00001CB2  6000 1252               1171          BRA     NEG
00001CB6                          1172          
00001CB6                          1173  NEGWOP
00001CB6  16FC 004E               1174          MOVE.B  #'N',(A3)+                  Insert N into output
00001CBA  16FC 0045               1175          MOVE.B  #'E',(A3)+                  Insert E into output
00001CBE  16FC 0047               1176          MOVE.B  #'G',(A3)+                  Insert G into output
00001CC2  16FC 002E               1177          MOVE.B  #'.',(A3)+                  Insert . into output
00001CC6  16FC 0057               1178          MOVE.B  #'W',(A3)+                  Insert W into output
00001CCA  16FC 0020               1179          MOVE.B  #' ',(A3)+                  
00001CCE  1A3C 0000               1180          MOVE.B  #%0,D5
00001CD2  6000 1232               1181          BRA     NEG
00001CD6                          1182  
00001CD6                          1183  NEGLOP
00001CD6  16FC 004E               1184          MOVE.B  #'N',(A3)+                  Insert N into output
00001CDA  16FC 0045               1185          MOVE.B  #'E',(A3)+                  Insert E into output
00001CDE  16FC 0047               1186          MOVE.B  #'G',(A3)+                  Insert G into output
00001CE2  16FC 002E               1187          MOVE.B  #'.',(A3)+                  Insert . into output
00001CE6  16FC 004C               1188          MOVE.B  #'L',(A3)+                  Insert L into output
00001CEA  16FC 0020               1189          MOVE.B  #' ',(A3)+                  
00001CEE  1A3C 0001               1190          MOVE.B  #%1,D5
00001CF2  6000 1212               1191          BRA     NEG
00001CF6                          1192          
00001CF6                          1193  NOTBOP
00001CF6  16FC 004E               1194          MOVE.B  #'N',(A3)+                  Insert N into output
00001CFA  16FC 004F               1195          MOVE.B  #'O',(A3)+                  Insert O into output
00001CFE  16FC 0054               1196          MOVE.B  #'T',(A3)+                  Insert T into output
00001D02  16FC 002E               1197          MOVE.B  #'.',(A3)+                  Insert . into output
00001D06  16FC 0042               1198          MOVE.B  #'B',(A3)+                  Insert B into output
00001D0A  16FC 0020               1199          MOVE.B  #' ',(A3)+                  
00001D0E  1A3C 0000               1200          MOVE.B  #%0,D5
00001D12  6000 1314               1201          BRA     NOT
00001D16                          1202          
00001D16                          1203  NOTWOP
00001D16  16FC 004E               1204          MOVE.B  #'N',(A3)+                  Insert N into output
00001D1A  16FC 004F               1205          MOVE.B  #'O',(A3)+                  Insert O into output
00001D1E  16FC 0054               1206          MOVE.B  #'T',(A3)+                  Insert T into output
00001D22  16FC 002E               1207          MOVE.B  #'.',(A3)+                  Insert . into output
00001D26  16FC 0057               1208          MOVE.B  #'W',(A3)+                  Insert W into output
00001D2A  16FC 0020               1209          MOVE.B  #' ',(A3)+                  
00001D2E  1A3C 0000               1210          MOVE.B  #%0,D5
00001D32  6000 12F4               1211          BRA     NOT
00001D36                          1212          
00001D36                          1213  NOTLOP
00001D36  16FC 004E               1214          MOVE.B  #'N',(A3)+                  Insert N into output
00001D3A  16FC 004F               1215          MOVE.B  #'O',(A3)+                  Insert O into output
00001D3E  16FC 0054               1216          MOVE.B  #'T',(A3)+                  Insert T into output
00001D42  16FC 002E               1217          MOVE.B  #'.',(A3)+                  Insert . into output
00001D46  16FC 004C               1218          MOVE.B  #'L',(A3)+                  Insert L into output
00001D4A  16FC 0020               1219          MOVE.B  #' ',(A3)+                  
00001D4E  1A3C 0001               1220          MOVE.B  #%1,D5
00001D52  6000 12D4               1221          BRA     NOT
00001D56                          1222          
00001D56                          1223  EORIBOP
00001D56  16FC 0045               1224          MOVE.B  #'E',(A3)+                  Insert E into output
00001D5A  16FC 004F               1225          MOVE.B  #'O',(A3)+                  Insert O into output
00001D5E  16FC 0052               1226          MOVE.B  #'R',(A3)+                  Insert R into output
00001D62  16FC 0049               1227          MOVE.B  #'I',(A3)+                  Insert I into output
00001D66  16FC 002E               1228          MOVE.B  #'.',(A3)+                  Insert . into output
00001D6A  16FC 0042               1229          MOVE.B  #'B',(A3)+                  Insert B into output
00001D6E  16FC 0020               1230          MOVE.B  #' ',(A3)+
00001D72  1A3C 0000               1231          MOVE.B  #%0,D5
00001D76  6000 122E               1232          BRA     EORI
00001D7A                          1233          
00001D7A                          1234  EORIWOP
00001D7A  16FC 0045               1235          MOVE.B  #'E',(A3)+                  Insert E into output
00001D7E  16FC 004F               1236          MOVE.B  #'O',(A3)+                  Insert O into output
00001D82  16FC 0052               1237          MOVE.B  #'R',(A3)+                  Insert R into output
00001D86  16FC 0049               1238          MOVE.B  #'I',(A3)+                  Insert I into output
00001D8A  16FC 002E               1239          MOVE.B  #'.',(A3)+                  Insert . into output
00001D8E  16FC 0057               1240          MOVE.B  #'W',(A3)+                  Insert W into output
00001D92  16FC 0020               1241          MOVE.B  #' ',(A3)+
00001D96  1A3C 0000               1242          MOVE.B  #%0,D5
00001D9A  6000 120A               1243          BRA     EORI
00001D9E                          1244  
00001D9E                          1245  EORILOP
00001D9E  16FC 0045               1246          MOVE.B  #'E',(A3)+                  Insert E into output
00001DA2  16FC 004F               1247          MOVE.B  #'O',(A3)+                  Insert O into output
00001DA6  16FC 0052               1248          MOVE.B  #'R',(A3)+                  Insert R into output
00001DAA  16FC 0049               1249          MOVE.B  #'I',(A3)+                  Insert I into output
00001DAE  16FC 002E               1250          MOVE.B  #'.',(A3)+                  Insert . into output
00001DB2  16FC 004C               1251          MOVE.B  #'L',(A3)+                  Insert L into output
00001DB6  16FC 0020               1252          MOVE.B  #' ',(A3)+
00001DBA  1A3C 0001               1253          MOVE.B  #%1,D5
00001DBE  6000 11E6               1254          BRA     EORI
00001DC2                          1255  
00001DC2                          1256  SUBIBOP
00001DC2  16FC 0053               1257          MOVE.B  #'S',(A3)+                  Insert S into output
00001DC6  16FC 0055               1258          MOVE.B  #'U',(A3)+                  Insert U into output
00001DCA  16FC 0042               1259          MOVE.B  #'B',(A3)+                  Insert B into output
00001DCE  16FC 0049               1260          MOVE.B  #'I',(A3)+                  Insert I into output
00001DD2  16FC 002E               1261          MOVE.B  #'.',(A3)+                  Insert . into output
00001DD6  16FC 0042               1262          MOVE.B  #'B',(A3)+                  Insert B into output  
00001DDA  16FC 0020               1263          MOVE.B  #' ',(A3)+
00001DDE  1A3C 0000               1264          MOVE.B  #%0,D5
00001DE2  6000 0E6E               1265          BRA     SUBI
00001DE6                          1266          
00001DE6                          1267  SUBIWOP
00001DE6  16FC 0053               1268          MOVE.B  #'S',(A3)+                  Insert S into output
00001DEA  16FC 0055               1269          MOVE.B  #'U',(A3)+                  Insert U into output
00001DEE  16FC 0042               1270          MOVE.B  #'B',(A3)+                  Insert B into output
00001DF2  16FC 0049               1271          MOVE.B  #'I',(A3)+                  Insert I into output
00001DF6  16FC 002E               1272          MOVE.B  #'.',(A3)+                  Insert . into output
00001DFA  16FC 0057               1273          MOVE.B  #'W',(A3)+                  Insert W into output  
00001DFE  16FC 0020               1274          MOVE.B  #' ',(A3)+
00001E02  1A3C 0000               1275          MOVE.B  #%0,D5
00001E06  6000 0E4A               1276          BRA     SUBI
00001E0A                          1277          
00001E0A                          1278  SUBILOP
00001E0A  16FC 0053               1279          MOVE.B  #'S',(A3)+                  Insert S into output
00001E0E  16FC 0055               1280          MOVE.B  #'U',(A3)+                  Insert U into output
00001E12  16FC 0042               1281          MOVE.B  #'B',(A3)+                  Insert B into output
00001E16  16FC 0049               1282          MOVE.B  #'I',(A3)+                  Insert I into output
00001E1A  16FC 002E               1283          MOVE.B  #'.',(A3)+                  Insert . into output
00001E1E  16FC 004C               1284          MOVE.B  #'L',(A3)+                  Insert L into output  
00001E22  16FC 0020               1285          MOVE.B  #' ',(A3)+
00001E26  1A3C 0001               1286          MOVE.B  #%1,D5
00001E2A  6000 0E26               1287          BRA     SUBI
00001E2E                          1288  
00001E2E                          1289  SUBB_v1OP
00001E2E  16FC 0053               1290          MOVE.B  #'S',(A3)+                  Insert S into output
00001E32  16FC 0055               1291          MOVE.B  #'U',(A3)+                  Insert U into output
00001E36  16FC 0042               1292          MOVE.B  #'B',(A3)+                  Insert B into output  
00001E3A  16FC 002E               1293          MOVE.B  #'.',(A3)+                  Insert . into output
00001E3E  16FC 0042               1294          MOVE.B  #'B',(A3)+                  Insert B into output      
00001E42  16FC 0020               1295          MOVE.B  #' ',(A3)+                  
00001E46  1A3C 0000               1296          MOVE.B  #%0,D5
00001E4A  6000 0D76               1297          BRA     SUB_v1
00001E4E                          1298          
00001E4E                          1299  SUBB_v2OP
00001E4E  16FC 0053               1300          MOVE.B  #'S',(A3)+                  Insert S into output
00001E52  16FC 0055               1301          MOVE.B  #'U',(A3)+                  Insert U into output
00001E56  16FC 0042               1302          MOVE.B  #'B',(A3)+                  Insert B into output  
00001E5A  16FC 002E               1303          MOVE.B  #'.',(A3)+                  Insert . into output
00001E5E  16FC 0042               1304          MOVE.B  #'B',(A3)+                  Insert B into output      
00001E62  16FC 0020               1305          MOVE.B  #' ',(A3)+                  
00001E66  1A3C 0000               1306          MOVE.B  #%0,D5
00001E6A  6000 0CEE               1307          BRA     SUB_v2
00001E6E                          1308  
00001E6E                          1309  SUBW_v1OP
00001E6E  16FC 0053               1310          MOVE.B  #'S',(A3)+                  Insert S into output
00001E72  16FC 0055               1311          MOVE.B  #'U',(A3)+                  Insert U into output
00001E76  16FC 0042               1312          MOVE.B  #'B',(A3)+                  Insert B into output  
00001E7A  16FC 002E               1313          MOVE.B  #'.',(A3)+                  Insert . into output
00001E7E  16FC 0057               1314          MOVE.B  #'W',(A3)+                  Insert W into output      
00001E82  16FC 0020               1315          MOVE.B  #' ',(A3)+                  
00001E86  1A3C 0000               1316          MOVE.B  #%0,D5
00001E8A  6000 0D36               1317          BRA     SUB_v1
00001E8E                          1318          
00001E8E                          1319  SUBW_v2OP
00001E8E  16FC 0053               1320          MOVE.B  #'S',(A3)+                  Insert S into output
00001E92  16FC 0055               1321          MOVE.B  #'U',(A3)+                  Insert U into output
00001E96  16FC 0042               1322          MOVE.B  #'B',(A3)+                  Insert B into output  
00001E9A  16FC 002E               1323          MOVE.B  #'.',(A3)+                  Insert . into output
00001E9E  16FC 0057               1324          MOVE.B  #'W',(A3)+                  Insert W into output      
00001EA2  16FC 0020               1325          MOVE.B  #' ',(A3)+                  
00001EA6  1A3C 0000               1326          MOVE.B  #%0,D5
00001EAA  6000 0CAE               1327          BRA     SUB_v2
00001EAE                          1328          
00001EAE                          1329  SUBL_v1OP
00001EAE  16FC 0053               1330          MOVE.B  #'S',(A3)+                  Insert S into output
00001EB2  16FC 0055               1331          MOVE.B  #'U',(A3)+                  Insert U into output
00001EB6  16FC 0042               1332          MOVE.B  #'B',(A3)+                  Insert B into output  
00001EBA  16FC 002E               1333          MOVE.B  #'.',(A3)+                  Insert . into output
00001EBE  16FC 004C               1334          MOVE.B  #'L',(A3)+                  Insert L into output      
00001EC2  16FC 0020               1335          MOVE.B  #' ',(A3)+                  
00001EC6  1A3C 0001               1336          MOVE.B  #%1,D5
00001ECA  6000 0CF6               1337          BRA     SUB_v1
00001ECE                          1338          
00001ECE                          1339  SUBL_v2OP
00001ECE  16FC 0053               1340          MOVE.B  #'S',(A3)+                  Insert S into output
00001ED2  16FC 0055               1341          MOVE.B  #'U',(A3)+                  Insert U into output
00001ED6  16FC 0042               1342          MOVE.B  #'B',(A3)+                  Insert B into output  
00001EDA  16FC 002E               1343          MOVE.B  #'.',(A3)+                  Insert . into output
00001EDE  16FC 004C               1344          MOVE.B  #'L',(A3)+                  Insert L into output      
00001EE2  16FC 0020               1345          MOVE.B  #' ',(A3)+                  
00001EE6  1A3C 0001               1346          MOVE.B  #%1,D5
00001EEA  6000 0C6E               1347          BRA     SUB_v2
00001EEE                          1348          
00001EEE                          1349  SUBAWOP
00001EEE  16FC 0053               1350          MOVE.B  #'S',(A3)+                  Insert S into output
00001EF2  16FC 0055               1351          MOVE.B  #'U',(A3)+                  Insert U into output
00001EF6  16FC 0042               1352          MOVE.B  #'B',(A3)+                  Insert B into output 
00001EFA  16FC 0041               1353          MOVE.B  #'A',(A3)+                  Insert A into output        
00001EFE  16FC 002E               1354          MOVE.B  #'.',(A3)+                  Insert . into output
00001F02  16FC 0057               1355          MOVE.B  #'W',(A3)+                  Insert W into output      
00001F06  16FC 0020               1356          MOVE.B  #' ',(A3)+                  
00001F0A  1A3C 0000               1357          MOVE.B  #%0,D5
00001F0E  6000 0CFA               1358          BRA     SUBA
00001F12                          1359          
00001F12                          1360  SUBALOP
00001F12  16FC 0053               1361          MOVE.B  #'S',(A3)+                  Insert S into output
00001F16  16FC 0055               1362          MOVE.B  #'U',(A3)+                  Insert U into output
00001F1A  16FC 0042               1363          MOVE.B  #'B',(A3)+                  Insert B into output  
00001F1E  16FC 0041               1364          MOVE.B  #'A',(A3)+                  Insert A into output       
00001F22  16FC 002E               1365          MOVE.B  #'.',(A3)+                  Insert . into output
00001F26  16FC 004C               1366          MOVE.B  #'L',(A3)+                  Insert L into output      
00001F2A  16FC 0020               1367          MOVE.B  #' ',(A3)+                  
00001F2E  1A3C 0001               1368          MOVE.B  #%1,D5
00001F32  6000 0CD6               1369          BRA     SUBA
00001F36                          1370          
00001F36                          1371  JSROP
00001F36  16FC 004A               1372          MOVE.B  #'J',(A3)+                  Insert J into output
00001F3A  16FC 0053               1373          MOVE.B  #'S',(A3)+                  Insert S into output
00001F3E  16FC 0052               1374          MOVE.B  #'R',(A3)+                  Insert R into output        
00001F42  16FC 0020               1375          MOVE.B  #' ',(A3)+                  
00001F46                          1376          
00001F46  6000 1548               1377          BRA     JSR
00001F4A                          1378          
00001F4A                          1379  RTSOP
00001F4A  16FC 0052               1380          MOVE.B  #'R',(A3)+                  Insert R into output
00001F4E  16FC 0054               1381          MOVE.B  #'T',(A3)+                  Insert T into output
00001F52  16FC 0053               1382          MOVE.B  #'S',(A3)+                  Insert S into output
00001F56  16FC 0020               1383          MOVE.B  #' ',(A3)+           
00001F5A                          1384          
00001F5A  6000 158C               1385          BRA     RTS
00001F5E                          1386          
00001F5E                          1387  BEQOP
00001F5E  16FC 0042               1388          MOVE.B  #'B',(A3)+                  Insert B into output
00001F62  16FC 0045               1389          MOVE.B  #'E',(A3)+                  Insert E into output
00001F66  16FC 0051               1390          MOVE.B  #'Q',(A3)+                  Insert Q into output
00001F6A  16FC 0020               1391          MOVE.B  #' ',(A3)+           
00001F6E                          1392          
00001F6E  6000 14C0               1393          BRA     Bcc
00001F72                          1394  BNEOP
00001F72  16FC 0042               1395          MOVE.B  #'B',(A3)+                  Insert B into output
00001F76  16FC 004E               1396          MOVE.B  #'N',(A3)+                  Insert N into output
00001F7A  16FC 0045               1397          MOVE.B  #'E',(A3)+                  Insert E into output
00001F7E  16FC 0020               1398          MOVE.B  #' ',(A3)+           
00001F82                          1399          
00001F82  6000 14AC               1400          BRA     Bcc
00001F86                          1401  BLTOP
00001F86  16FC 0042               1402          MOVE.B  #'B',(A3)+                  Insert B into output
00001F8A  16FC 004C               1403          MOVE.B  #'L',(A3)+                  Insert L into output
00001F8E  16FC 0054               1404          MOVE.B  #'T',(A3)+                  Insert T into output
00001F92  16FC 0020               1405          MOVE.B  #' ',(A3)+           
00001F96                          1406          
00001F96  6000 1498               1407          BRA     Bcc
00001F9A                          1408  BHIOP
00001F9A  16FC 0042               1409          MOVE.B  #'B',(A3)+                  Insert B into output
00001F9E  16FC 0048               1410          MOVE.B  #'H',(A3)+                  Insert H into output
00001FA2  16FC 0049               1411          MOVE.B  #'I',(A3)+                  Insert I into output
00001FA6  16FC 0020               1412          MOVE.B  #' ',(A3)+           
00001FAA                          1413          
00001FAA  6000 1484               1414          BRA     Bcc
00001FAE                          1415  BRAOP
00001FAE  16FC 0042               1416          MOVE.B  #'B',(A3)+                  Insert B into output
00001FB2  16FC 0052               1417          MOVE.B  #'R',(A3)+                  Insert R into output
00001FB6  16FC 0041               1418          MOVE.B  #'A',(A3)+                  Insert A into output
00001FBA  16FC 0020               1419          MOVE.B  #' ',(A3)+           
00001FBE                          1420          
00001FBE  6000 1498               1421          BRA     BRANCH        
00001FC2                          1422          
00001FC2                          1423  MOVEBOP
00001FC2  16FC 004D               1424          MOVE.B  #'M',(A3)+                  Insert M into output
00001FC6  16FC 004F               1425          MOVE.B  #'O',(A3)+                  Insert O into output
00001FCA  16FC 0056               1426          MOVE.B  #'V',(A3)+                  Insert V into output
00001FCE  16FC 0045               1427          MOVE.B  #'E',(A3)+                  Insert E into output
00001FD2  16FC 002E               1428          MOVE.B  #'.',(A3)+                  Insert . into output
00001FD6  16FC 0042               1429          MOVE.B  #'B',(A3)+                  Insert B into output
00001FDA  16FC 0020               1430          MOVE.B  #' ',(A3)+
00001FDE  1A3C 0000               1431          MOVE.B  #%0,D5
00001FE2                          1432          
00001FE2  6000 0732               1433          BRA     MOVE
00001FE6                          1434  
00001FE6                          1435  MOVELOP        
00001FE6  16FC 004D               1436          MOVE.B  #'M',(A3)+                  Insert M into output
00001FEA  16FC 004F               1437          MOVE.B  #'O',(A3)+                  Insert O into output
00001FEE  16FC 0056               1438          MOVE.B  #'V',(A3)+                  Insert V into output
00001FF2  16FC 0045               1439          MOVE.B  #'E',(A3)+                  Insert E into output
00001FF6  16FC 002E               1440          MOVE.B  #'.',(A3)+                  Insert . into output
00001FFA  16FC 004C               1441          MOVE.B  #'L',(A3)+                  Insert L into output
00001FFE  16FC 0020               1442          MOVE.B  #' ',(A3)+
00002002  1A3C 0001               1443          MOVE.B  #%1,D5
00002006                          1444          
00002006  6000 070E               1445          BRA     MOVE
0000200A                          1446  MOVEALOP
0000200A  16FC 004D               1447          MOVE.B  #'M',(A3)+                  Insert M into output
0000200E  16FC 004F               1448          MOVE.B  #'O',(A3)+                  Insert O into output
00002012  16FC 0056               1449          MOVE.B  #'V',(A3)+                  Insert V into output
00002016  16FC 0045               1450          MOVE.B  #'E',(A3)+                  Insert E into output
0000201A  16FC 0041               1451          MOVE.B  #'A',(A3)+                  Insert A into output
0000201E  16FC 002E               1452          MOVE.B  #'.',(A3)+                  Insert . into output
00002022  16FC 004C               1453          MOVE.B  #'L',(A3)+                  Insert L into output
00002026  16FC 0020               1454          MOVE.B  #' ',(A3)+
0000202A  1A3C 0001               1455          MOVE.B  #%1,D5
0000202E                          1456  
0000202E  6000 0746               1457          BRA     MOVEA
00002032                          1458  MOVEWOP
00002032  16FC 004D               1459          MOVE.B  #'M',(A3)+                  Insert M into output
00002036  16FC 004F               1460          MOVE.B  #'O',(A3)+                  Insert O into output
0000203A  16FC 0056               1461          MOVE.B  #'V',(A3)+                  Insert V into output
0000203E  16FC 0045               1462          MOVE.B  #'E',(A3)+                  Insert E into output
00002042  16FC 002E               1463          MOVE.B  #'.',(A3)+                  Insert . into output
00002046  16FC 0057               1464          MOVE.B  #'W',(A3)+                  Insert W into output
0000204A  16FC 0020               1465          MOVE.B  #' ',(A3)+
0000204E  1A3C 0000               1466          MOVE.B  #%0,D5
00002052                          1467  
00002052  6000 06C2               1468          BRA     MOVE
00002056                          1469  
00002056                          1470  MOVEAWOP
00002056  16FC 004D               1471          MOVE.B  #'M',(A3)+                  Insert M into output
0000205A  16FC 004F               1472          MOVE.B  #'O',(A3)+                  Insert O into output
0000205E  16FC 0056               1473          MOVE.B  #'V',(A3)+                  Insert V into output
00002062  16FC 0045               1474          MOVE.B  #'E',(A3)+                  Insert E into output
00002066  16FC 0041               1475          MOVE.B  #'A',(A3)+                  Insert A into output
0000206A  16FC 002E               1476          MOVE.B  #'.',(A3)+                  Insert . into output
0000206E  16FC 0057               1477          MOVE.B  #'W',(A3)+                  Insert W into output
00002072  16FC 0020               1478          MOVE.B  #' ',(A3)+
00002076  1A3C 0000               1479          MOVE.B  #%0,D5
0000207A                          1480  
0000207A  6000 06FA               1481          BRA     MOVEA
0000207E                          1482  
0000207E                          1483  BTST_v1OP
0000207E  16FC 0042               1484          MOVE.B  #'B',(A3)+                  Insert B into output
00002082  16FC 0054               1485          MOVE.B  #'T',(A3)+                  Insert T into output
00002086  16FC 0053               1486          MOVE.B  #'S',(A3)+                  Insert S into output
0000208A  16FC 0054               1487          MOVE.B  #'T',(A3)+                  Insert T into output
0000208E  16FC 0020               1488          MOVE.B  #' ',(A3)+
00002092                          1489  
00002092  6000 11F0               1490          BRA     BTST_v1
00002096                          1491  
00002096                          1492  BTST_v2OP
00002096  16FC 0042               1493          MOVE.B  #'B',(A3)+                  Insert B into output
0000209A  16FC 0054               1494          MOVE.B  #'T',(A3)+                  Insert T into output
0000209E  16FC 0053               1495          MOVE.B  #'S',(A3)+                  Insert S into output
000020A2  16FC 0054               1496          MOVE.B  #'T',(A3)+                  Insert T into output
000020A6  16FC 0020               1497          MOVE.B  #' ',(A3)+
000020AA                          1498          
000020AA  6000 1228               1499          BRA     BTST_v2
000020AE                          1500  
000020AE                          1501  MOVEM_0OP
000020AE  4244                    1502          CLR.W   D4
000020B0  3803                    1503          MOVE.W  D3,D4
000020B2  E14C                    1504          LSL.W   #8,D4
000020B4  E34C                    1505          LSL.W   #1,D4
000020B6  E04C                    1506          LSR.W   #8,D4
000020B8  E24C                    1507          LSR.W   #1,D4
000020BA  EC4C                    1508          LSR.W   #6,D4
000020BC  B87C 0000               1509          CMP.W   #%0,D4
000020C0  6700 0060               1510          BEQ     MOVEM_0WOP
000020C4                          1511  
000020C4  16FC 004D               1512          MOVE.B  #'M',(A3)+                  Insert M into output
000020C8  16FC 004F               1513          MOVE.B  #'O',(A3)+                  Insert O into output
000020CC  16FC 0056               1514          MOVE.B  #'V',(A3)+                  Insert V into output
000020D0  16FC 0045               1515          MOVE.B  #'E',(A3)+                  Insert E into output
000020D4  16FC 004D               1516          MOVE.B  #'M',(A3)+                  Insert M into output
000020D8  16FC 002E               1517          MOVE.B  #'.',(A3)+                  Insert . into output
000020DC  16FC 004C               1518          MOVE.B  #'L',(A3)+                  Insert L into output
000020E0  1A3C 0001               1519          MOVE.B  #%1,D5
000020E4  6000 078E               1520          BRA     MOVEM_0L
000020E8                          1521          
000020E8                          1522  MOVEM_1OP
000020E8  4244                    1523          CLR.W   D4
000020EA  3803                    1524          MOVE.W  D3,D4
000020EC  E14C                    1525          LSL.W   #8,D4
000020EE  E34C                    1526          LSL.W   #1,D4
000020F0  E04C                    1527          LSR.W   #8,D4
000020F2  E24C                    1528          LSR.W   #1,D4
000020F4  EC4C                    1529          LSR.W   #6,D4
000020F6  B87C 0000               1530          CMP.W   #%0,D4
000020FA  6700 004A               1531          BEQ     MOVEM_1WOP
000020FE                          1532  
000020FE  16FC 004D               1533          MOVE.B  #'M',(A3)+                  Insert M into output
00002102  16FC 004F               1534          MOVE.B  #'O',(A3)+                  Insert O into output
00002106  16FC 0056               1535          MOVE.B  #'V',(A3)+                  Insert V into output
0000210A  16FC 0045               1536          MOVE.B  #'E',(A3)+                  Insert E into output
0000210E  16FC 004D               1537          MOVE.B  #'M',(A3)+                  Insert M into output
00002112  16FC 002E               1538          MOVE.B  #'.',(A3)+                  Insert . into output
00002116  16FC 004C               1539          MOVE.B  #'L',(A3)+                  Insert L into output
0000211A  1A3C 0001               1540          MOVE.B  #%1,D5
0000211E  6000 0876               1541          BRA     MOVEM_1L
00002122                          1542  
00002122                          1543  MOVEM_0WOP
00002122  16FC 004D               1544          MOVE.B  #'M',(A3)+                  Insert M into output
00002126  16FC 004F               1545          MOVE.B  #'O',(A3)+                  Insert O into output
0000212A  16FC 0056               1546          MOVE.B  #'V',(A3)+                  Insert V into output
0000212E  16FC 0045               1547          MOVE.B  #'E',(A3)+                  Insert E into output
00002132  16FC 004D               1548          MOVE.B  #'M',(A3)+                  Insert M into output
00002136  16FC 002E               1549          MOVE.B  #'.',(A3)+                  Insert . into output
0000213A  16FC 0057               1550          MOVE.B  #'W',(A3)+                  Insert W into output
0000213E  1A3C 0000               1551          MOVE.B  #%0,D5
00002142  6000 068A               1552          BRA     MOVEM_0W
00002146                          1553  
00002146                          1554  MOVEM_1WOP
00002146  16FC 004D               1555          MOVE.B  #'M',(A3)+                  Insert M into output
0000214A  16FC 004F               1556          MOVE.B  #'O',(A3)+                  Insert O into output
0000214E  16FC 0056               1557          MOVE.B  #'V',(A3)+                  Insert V into output
00002152  16FC 0045               1558          MOVE.B  #'E',(A3)+                  Insert E into output
00002156  16FC 004D               1559          MOVE.B  #'M',(A3)+                  Insert M into output
0000215A  16FC 002E               1560          MOVE.B  #'.',(A3)+                  Insert . into output
0000215E  16FC 0057               1561          MOVE.B  #'W',(A3)+                  Insert W into output
00002162  1A3C 0000               1562          MOVE.B  #%0,D5
00002166  6000 07C2               1563          BRA     MOVEM_1W
0000216A                          1564          
0000216A                          1565  ADDQBOP
0000216A  16FC 0041               1566          MOVE.B  #'A',(A3)+                  Insert A into output
0000216E  16FC 0044               1567          MOVE.B  #'D',(A3)+                  Insert D into output
00002172  16FC 0044               1568          MOVE.B  #'D',(A3)+                  Insert D into output
00002176  16FC 0051               1569          MOVE.B  #'Q',(A3)+                  Insert Q into output
0000217A  16FC 002E               1570          MOVE.B  #'.',(A3)+                  Insert . into output
0000217E  16FC 0042               1571          MOVE.B  #'B',(A3)+                  Insert B into output
00002182  16FC 0020               1572          MOVE.B  #' ',(A3)+
00002186  1A3C 0000               1573          MOVE.B  #%0,D5
0000218A  6000 096E               1574          BRA     ADDQ
0000218E                          1575  
0000218E                          1576  ADDQWOP
0000218E  16FC 0041               1577          MOVE.B  #'A',(A3)+                  Insert A into output
00002192  16FC 0044               1578          MOVE.B  #'D',(A3)+                  Insert D into output
00002196  16FC 0044               1579          MOVE.B  #'D',(A3)+                  Insert D into output
0000219A  16FC 0051               1580          MOVE.B  #'Q',(A3)+                  Insert Q into output
0000219E  16FC 002E               1581          MOVE.B  #'.',(A3)+                  Insert . into output
000021A2  16FC 0057               1582          MOVE.B  #'W',(A3)+                  Insert W into output
000021A6  16FC 0020               1583          MOVE.B  #' ',(A3)+
000021AA  1A3C 0000               1584          MOVE.B  #%0,D5
000021AE  6000 094A               1585          BRA     ADDQ
000021B2                          1586  
000021B2                          1587  ADDQLOP
000021B2  16FC 0041               1588          MOVE.B  #'A',(A3)+                  Insert A into output
000021B6  16FC 0044               1589          MOVE.B  #'D',(A3)+                  Insert D into output
000021BA  16FC 0044               1590          MOVE.B  #'D',(A3)+                  Insert D into output
000021BE  16FC 0051               1591          MOVE.B  #'Q',(A3)+                  Insert Q into output
000021C2  16FC 002E               1592          MOVE.B  #'.',(A3)+                  Insert . into output
000021C6  16FC 004C               1593          MOVE.B  #'L',(A3)+                  Insert L into output
000021CA  16FC 0020               1594          MOVE.B  #' ',(A3)+
000021CE  1A3C 0001               1595          MOVE.B  #%1,D5
000021D2  6000 0926               1596          BRA     ADDQ
000021D6                          1597          
000021D6                          1598  LEAOP
000021D6  16FC 004C               1599          MOVE.B  #'L',(A3)+                  Insert L into output
000021DA  16FC 0045               1600          MOVE.B  #'E',(A3)+                  Insert E into output
000021DE  16FC 0041               1601          MOVE.B  #'A',(A3)+                  Insert A into output
000021E2                          1602          
000021E2  6000 0B80               1603          BRA     LEA
000021E6                          1604          
000021E6                          1605  DIVSOP
000021E6  16FC 0044               1606          MOVE.B  #'D',(A3)+                  Insert D into output
000021EA  16FC 0049               1607          MOVE.B  #'I',(A3)+                  Insert I into output
000021EE  16FC 0056               1608          MOVE.B  #'V',(A3)+                  Insert V into output
000021F2  16FC 0053               1609          MOVE.B  #'S',(A3)+                  Insert S into output
000021F6  16FC 002E               1610          MOVE.B  #'.',(A3)+                  Insert . into output
000021FA  16FC 0057               1611          MOVE.B  #'W',(A3)+                  Insert W into output
000021FE  16FC 0020               1612          MOVE.B  #' ',(A3)+
00002202  1A3C 0000               1613          MOVE.B  #%0,D5 
00002206  6000 0B0C               1614          BRA     DIVS
0000220A                          1615          
0000220A                          1616  EORBOP
0000220A  16FC 0045               1617          MOVE.B  #'E',(A3)+                  Insert E into output
0000220E  16FC 004F               1618          MOVE.B  #'O',(A3)+                  Insert O into output
00002212  16FC 0052               1619          MOVE.B  #'R',(A3)+                  Insert R into output
00002216  16FC 002E               1620          MOVE.B  #'.',(A3)+                  Insert . into output
0000221A  16FC 0042               1621          MOVE.B  #'B',(A3)+                  Insert B into output
0000221E  16FC 0020               1622          MOVE.B  #' ',(A3)+
00002222  1A3C 0000               1623          MOVE.B  #%0,D5
00002226  6000 0D1E               1624          BRA     EOR
0000222A                          1625          
0000222A                          1626  EORWOP
0000222A  16FC 0045               1627          MOVE.B  #'E',(A3)+                  Insert E into output
0000222E  16FC 004F               1628          MOVE.B  #'O',(A3)+                  Insert O into output
00002232  16FC 0052               1629          MOVE.B  #'R',(A3)+                  Insert R into output
00002236  16FC 002E               1630          MOVE.B  #'.',(A3)+                  Insert . into output
0000223A  16FC 0057               1631          MOVE.B  #'W',(A3)+                  Insert W into output
0000223E  16FC 0020               1632          MOVE.B  #' ',(A3)+
00002242  1A3C 0000               1633          MOVE.B  #%0,D5
00002246  6000 0CFE               1634          BRA     EOR
0000224A                          1635          
0000224A                          1636  EORLOP
0000224A  16FC 0045               1637          MOVE.B  #'E',(A3)+                  Insert E into output
0000224E  16FC 004F               1638          MOVE.B  #'O',(A3)+                  Insert O into output
00002252  16FC 0052               1639          MOVE.B  #'R',(A3)+                  Insert R into output
00002256  16FC 002E               1640          MOVE.B  #'.',(A3)+                  Insert . into output
0000225A  16FC 004C               1641          MOVE.B  #'L',(A3)+                  Insert L into output
0000225E  16FC 0020               1642          MOVE.B  #' ',(A3)+
00002262  1A3C 0001               1643          MOVE.B  #%1,D5
00002266  6000 0CDE               1644          BRA     EOR
0000226A                          1645          
0000226A                          1646  CMPIBOP
0000226A  16FC 0043               1647          MOVE.B  #'C',(A3)+                  Insert C into output
0000226E  16FC 004D               1648          MOVE.B  #'M',(A3)+                  Insert M into output
00002272  16FC 0050               1649          MOVE.B  #'P',(A3)+                  Insert P into output
00002276  16FC 0049               1650          MOVE.B  #'I',(A3)+                  Insert I into output
0000227A  16FC 002E               1651          MOVE.B  #'.',(A3)+                  Insert . into output
0000227E  16FC 0042               1652          MOVE.B  #'B',(A3)+                  Insert B into output
00002282  16FC 0020               1653          MOVE.B  #' ',(A3)+
00002286  1A3C 0000               1654          MOVE.B  #%0,D5
0000228A  6000 10DA               1655          BRA     CMPI
0000228E                          1656          
0000228E                          1657  CMPIWOP
0000228E  16FC 0043               1658          MOVE.B  #'C',(A3)+                  Insert C into output
00002292  16FC 004D               1659          MOVE.B  #'M',(A3)+                  Insert M into output
00002296  16FC 0050               1660          MOVE.B  #'P',(A3)+                  Insert P into output
0000229A  16FC 0049               1661          MOVE.B  #'I',(A3)+                  Insert I into output
0000229E  16FC 002E               1662          MOVE.B  #'.',(A3)+                  Insert . into output
000022A2  16FC 0057               1663          MOVE.B  #'W',(A3)+                  Insert W into output
000022A6  16FC 0020               1664          MOVE.B  #' ',(A3)+
000022AA  1A3C 0000               1665          MOVE.B  #%0,D5
000022AE  6000 10B6               1666          BRA     CMPI
000022B2                          1667          
000022B2                          1668  CMPILOP
000022B2  16FC 0043               1669          MOVE.B  #'C',(A3)+                  Insert C into output
000022B6  16FC 004D               1670          MOVE.B  #'M',(A3)+                  Insert M into output
000022BA  16FC 0050               1671          MOVE.B  #'P',(A3)+                  Insert P into output
000022BE  16FC 0049               1672          MOVE.B  #'I',(A3)+                  Insert I into output
000022C2  16FC 002E               1673          MOVE.B  #'.',(A3)+                  Insert . into output
000022C6  16FC 004C               1674          MOVE.B  #'L',(A3)+                  Insert L into output
000022CA  16FC 0020               1675          MOVE.B  #' ',(A3)+
000022CE  1A3C 0001               1676          MOVE.B  #%1,D5
000022D2  6000 1092               1677          BRA     CMPI
000022D6                          1678          
000022D6                          1679  CMPBOP
000022D6  16FC 0043               1680          MOVE.B  #'C',(A3)+                  Insert C into output
000022DA  16FC 004D               1681          MOVE.B  #'M',(A3)+                  Insert M into output
000022DE  16FC 0050               1682          MOVE.B  #'P',(A3)+                  Insert P into output
000022E2  16FC 002E               1683          MOVE.B  #'.',(A3)+                  Insert . into output
000022E6  16FC 0042               1684          MOVE.B  #'B',(A3)+                  Insert B into output
000022EA  16FC 0020               1685          MOVE.B  #' ',(A3)+
000022EE  1A3C 0000               1686          MOVE.B  #%0,D5
000022F2  6000 102A               1687          BRA     CMP
000022F6                          1688          
000022F6                          1689  CMPWOP
000022F6  16FC 0043               1690          MOVE.B  #'C',(A3)+                  Insert C into output
000022FA  16FC 004D               1691          MOVE.B  #'M',(A3)+                  Insert M into output
000022FE  16FC 0050               1692          MOVE.B  #'P',(A3)+                  Insert P into output
00002302  16FC 002E               1693          MOVE.B  #'.',(A3)+                  Insert . into output
00002306  16FC 0057               1694          MOVE.B  #'W',(A3)+                  Insert W into output
0000230A  16FC 0020               1695          MOVE.B  #' ',(A3)+
0000230E  1A3C 0000               1696          MOVE.B  #%0,D5
00002312  6000 100A               1697          BRA     CMP
00002316                          1698          
00002316                          1699  CMPLOP
00002316  16FC 0043               1700          MOVE.B  #'C',(A3)+                  Insert C into output
0000231A  16FC 004D               1701          MOVE.B  #'M',(A3)+                  Insert M into output
0000231E  16FC 0050               1702          MOVE.B  #'P',(A3)+                  Insert P into output
00002322  16FC 002E               1703          MOVE.B  #'.',(A3)+                  Insert . into output
00002326  16FC 004C               1704          MOVE.B  #'L',(A3)+                  Insert L into output
0000232A  16FC 0020               1705          MOVE.B  #' ',(A3)+
0000232E  1A3C 0001               1706          MOVE.B  #%1,D5
00002332  6000 0FEA               1707          BRA     CMP
00002336                          1708          
00002336                          1709  CMPAWOP
00002336  16FC 0043               1710          MOVE.B  #'C',(A3)+                  Insert C into output
0000233A  16FC 004D               1711          MOVE.B  #'M',(A3)+                  Insert M into output
0000233E  16FC 0050               1712          MOVE.B  #'P',(A3)+                  Insert P into output
00002342  16FC 0041               1713          MOVE.B  #'A',(A3)+                  Insert A into output
00002346  16FC 002E               1714          MOVE.B  #'.',(A3)+                  Insert . into output
0000234A  16FC 0057               1715          MOVE.B  #'W',(A3)+                  Insert W into output
0000234E  16FC 0020               1716          MOVE.B  #' ',(A3)+
00002352  1A3C 0000               1717          MOVE.B  #%0,D5
00002356  6000 1090               1718          BRA     CMPA
0000235A                          1719  
0000235A                          1720  CMPALOP
0000235A  16FC 0043               1721          MOVE.B  #'C',(A3)+                  Insert C into output
0000235E  16FC 004D               1722          MOVE.B  #'M',(A3)+                  Insert M into output
00002362  16FC 0050               1723          MOVE.B  #'P',(A3)+                  Insert P into output
00002366  16FC 0041               1724          MOVE.B  #'A',(A3)+                  Insert A into output
0000236A  16FC 002E               1725          MOVE.B  #'.',(A3)+                  Insert . into output
0000236E  16FC 004C               1726          MOVE.B  #'L',(A3)+                  Insert L into output
00002372  16FC 0020               1727          MOVE.B  #' ',(A3)+
00002376  1A3C 0001               1728          MOVE.B  #%1,D5
0000237A  6000 106C               1729          BRA     CMPA
0000237E                          1730  
0000237E                          1731  ROL_MEMOP
0000237E  16FC 0052               1732          MOVE.B  #'R',(A3)+                  Insert R into output
00002382  16FC 004F               1733          MOVE.B  #'O',(A3)+                  Insert O into output
00002386  16FC 004C               1734          MOVE.B  #'L',(A3)+                  Insert L into output
0000238A  16FC 0020               1735          MOVE.B  #' ',(A3)+
0000238E  6000 0E40               1736          BRA     ROd_v1
00002392                          1737          
00002392                          1738  ROR_MEMOP
00002392  16FC 0052               1739          MOVE.B  #'R',(A3)+                  Insert R into output
00002396  16FC 004F               1740          MOVE.B  #'O',(A3)+                  Insert O into output
0000239A  16FC 0052               1741          MOVE.B  #'R',(A3)+                  Insert R into output
0000239E  16FC 0020               1742          MOVE.B  #' ',(A3)+
000023A2  6000 0E2C               1743          BRA     ROd_v1
000023A6                          1744          
000023A6                          1745  ROLB_REGOP
000023A6  16FC 0052               1746          MOVE.B  #'R',(A3)+                  Insert R into output
000023AA  16FC 004F               1747          MOVE.B  #'O',(A3)+                  Insert O into output
000023AE  16FC 004C               1748          MOVE.B  #'L',(A3)+                  Insert L into output
000023B2  16FC 002E               1749          MOVE.B  #'.',(A3)+                  Insert . into output
000023B6  16FC 0042               1750          MOVE.B  #'B',(A3)+                  Insert B into output
000023BA  16FC 0020               1751          MOVE.B  #' ',(A3)+
000023BE  1A3C 0000               1752          MOVE.B  #%0,D5
000023C2  6000 0E54               1753          BRA     ROd_v2
000023C6                          1754  ROLW_REGOP
000023C6  16FC 0052               1755          MOVE.B  #'R',(A3)+                  Insert R into output
000023CA  16FC 004F               1756          MOVE.B  #'O',(A3)+                  Insert O into output
000023CE  16FC 004C               1757          MOVE.B  #'L',(A3)+                  Insert L into output
000023D2  16FC 002E               1758          MOVE.B  #'.',(A3)+                  Insert . into output
000023D6  16FC 0057               1759          MOVE.B  #'W',(A3)+                  Insert W into output
000023DA  16FC 0020               1760          MOVE.B  #' ',(A3)+
000023DE  1A3C 0000               1761          MOVE.B  #%0,D5
000023E2  6000 0E34               1762          BRA     ROd_v2
000023E6                          1763  ROLL_REGOP
000023E6  16FC 0052               1764          MOVE.B  #'R',(A3)+                  Insert R into output
000023EA  16FC 004F               1765          MOVE.B  #'O',(A3)+                  Insert O into output
000023EE  16FC 004C               1766          MOVE.B  #'L',(A3)+                  Insert L into output
000023F2  16FC 002E               1767          MOVE.B  #'.',(A3)+                  Insert . into output
000023F6  16FC 004C               1768          MOVE.B  #'L',(A3)+                  Insert L into output
000023FA  16FC 0020               1769          MOVE.B  #' ',(A3)+
000023FE  1A3C 0001               1770          MOVE.B  #%1,D5
00002402  6000 0E14               1771          BRA     ROd_v2
00002406                          1772  RORB_REGOP
00002406  16FC 0052               1773          MOVE.B  #'R',(A3)+                  Insert R into output
0000240A  16FC 004F               1774          MOVE.B  #'O',(A3)+                  Insert O into output
0000240E  16FC 0052               1775          MOVE.B  #'R',(A3)+                  Insert R into output
00002412  16FC 002E               1776          MOVE.B  #'.',(A3)+                  Insert . into output
00002416  16FC 0042               1777          MOVE.B  #'B',(A3)+                  Insert B into output
0000241A  16FC 0020               1778          MOVE.B  #' ',(A3)+
0000241E  1A3C 0000               1779          MOVE.B  #%0,D5
00002422  6000 0DF4               1780          BRA     ROd_v2
00002426                          1781  RORW_REGOP
00002426  16FC 0052               1782          MOVE.B  #'R',(A3)+                  Insert R into output
0000242A  16FC 004F               1783          MOVE.B  #'O',(A3)+                  Insert O into output
0000242E  16FC 0052               1784          MOVE.B  #'R',(A3)+                  Insert R into output
00002432  16FC 002E               1785          MOVE.B  #'.',(A3)+                  Insert . into output
00002436  16FC 0057               1786          MOVE.B  #'W',(A3)+                  Insert W into output
0000243A  16FC 0020               1787          MOVE.B  #' ',(A3)+
0000243E  1A3C 0000               1788          MOVE.B  #%0,D5
00002442  6000 0DD4               1789          BRA     ROd_v2
00002446                          1790  RORL_REGOP     
00002446  16FC 0052               1791          MOVE.B  #'R',(A3)+                  Insert R into output
0000244A  16FC 004F               1792          MOVE.B  #'O',(A3)+                  Insert O into output
0000244E  16FC 0052               1793          MOVE.B  #'R',(A3)+                  Insert R into output
00002452  16FC 002E               1794          MOVE.B  #'.',(A3)+                  Insert . into output
00002456  16FC 004C               1795          MOVE.B  #'L',(A3)+                  Insert L into output
0000245A  16FC 0020               1796          MOVE.B  #' ',(A3)+
0000245E  1A3C 0001               1797          MOVE.B  #%1,D5
00002462  6000 0DB4               1798          BRA     ROd_v2
00002466                          1799  
00002466                          1800                  ;Determine which  reg op type to call
00002466                          1801  ROL_REGOP
00002466  4244                    1802          CLR.W   D4
00002468  3803                    1803          MOVE.W  D3,D4
0000246A  E14C                    1804          LSL.W   #8,D4
0000246C  E04C                    1805          LSR.W   #8,D4
0000246E  EC4C                    1806          LSR.W   #6,D4
00002470  B87C 0000               1807          CMP.W   #%00,D4
00002474  6700 FF30               1808          BEQ     ROLB_REGOP
00002478  B87C 0001               1809          CMP.W   #%01,D4
0000247C  6700 FF48               1810          BEQ     ROLW_REGOP
00002480  B87C 0002               1811          CMP.W   #%10,D4
00002484  6700 FF60               1812          BEQ     ROLL_REGOP
00002488                          1813  
00002488  6000 0284               1814          BRA     FLAGINVALID
0000248C                          1815          
0000248C                          1816                  ;Determine which regop type to call
0000248C                          1817  ROR_REGOP
0000248C  4244                    1818          CLR.W   D4
0000248E  3803                    1819          MOVE.W  D3,D4
00002490  E14C                    1820          LSL.W   #8,D4
00002492  E04C                    1821          LSR.W   #8,D4
00002494  EC4C                    1822          LSR.W   #6,D4
00002496  B87C 0000               1823          CMP.W   #%00,D4
0000249A  6700 FF6A               1824          BEQ     RORB_REGOP
0000249E  B87C 0001               1825          CMP.W   #%01,D4
000024A2  6782                    1826          BEQ     RORW_REGOP
000024A4  B87C 0002               1827          CMP.W   #%10,D4
000024A8  679C                    1828          BEQ     RORL_REGOP
000024AA                          1829  
000024AA  6000 0262               1830          BRA     FLAGINVALID
000024AE                          1831          
000024AE                          1832  LSLB_REGOP
000024AE  16FC 004C               1833          MOVE.B  #'L',(A3)+                  Insert L into output
000024B2  16FC 0053               1834          MOVE.B  #'S',(A3)+                  Insert S into output
000024B6  16FC 004C               1835          MOVE.B  #'L',(A3)+                  Insert L into output
000024BA  16FC 002E               1836          MOVE.B  #'.',(A3)+                  Insert . into output
000024BE  16FC 0042               1837          MOVE.B  #'B',(A3)+                  Insert B into output
000024C2  16FC 0020               1838          MOVE.B  #' ',(A3)+
000024C6  1A3C 0000               1839          MOVE.B  #%0,D5
000024CA  6000 0BE4               1840          BRA     LSd_v2
000024CE                          1841  LSLW_REGOP
000024CE  16FC 004C               1842          MOVE.B  #'L',(A3)+                  Insert L into output
000024D2  16FC 0053               1843          MOVE.B  #'S',(A3)+                  Insert S into output
000024D6  16FC 004C               1844          MOVE.B  #'L',(A3)+                  Insert L into output
000024DA  16FC 002E               1845          MOVE.B  #'.',(A3)+                  Insert . into output
000024DE  16FC 0057               1846          MOVE.B  #'W',(A3)+                  Insert W into output
000024E2  16FC 0020               1847          MOVE.B  #' ',(A3)+
000024E6  1A3C 0000               1848          MOVE.B  #%0,D5
000024EA  6000 0BC4               1849          BRA     LSd_v2
000024EE                          1850  LSLL_REGOP
000024EE  16FC 004C               1851          MOVE.B  #'L',(A3)+                  Insert L into output
000024F2  16FC 0053               1852          MOVE.B  #'S',(A3)+                  Insert S into output
000024F6  16FC 004C               1853          MOVE.B  #'L',(A3)+                  Insert L into output
000024FA  16FC 002E               1854          MOVE.B  #'.',(A3)+                  Insert . into output
000024FE  16FC 004C               1855          MOVE.B  #'L',(A3)+                  Insert L into output
00002502  16FC 0020               1856          MOVE.B  #' ',(A3)+
00002506  1A3C 0001               1857          MOVE.B  #%1,D5
0000250A  6000 0BA4               1858          BRA     LSd_v2
0000250E                          1859  LSRB_REGOP
0000250E  16FC 004C               1860          MOVE.B  #'L',(A3)+                  Insert L into output
00002512  16FC 0053               1861          MOVE.B  #'S',(A3)+                  Insert S into output
00002516  16FC 0052               1862          MOVE.B  #'R',(A3)+                  Insert R into output
0000251A  16FC 002E               1863          MOVE.B  #'.',(A3)+                  Insert . into output
0000251E  16FC 0042               1864          MOVE.B  #'B',(A3)+                  Insert B into output
00002522  16FC 0020               1865          MOVE.B  #' ',(A3)+
00002526  1A3C 0000               1866          MOVE.B  #%0,D5
0000252A  6000 0B84               1867          BRA     LSd_v2
0000252E                          1868  LSRW_REGOP
0000252E  16FC 004C               1869          MOVE.B  #'L',(A3)+                  Insert L into output
00002532  16FC 0053               1870          MOVE.B  #'S',(A3)+                  Insert S into output
00002536  16FC 0052               1871          MOVE.B  #'R',(A3)+                  Insert R into output
0000253A  16FC 002E               1872          MOVE.B  #'.',(A3)+                  Insert . into output
0000253E  16FC 0057               1873          MOVE.B  #'W',(A3)+                  Insert W into output
00002542  16FC 0020               1874          MOVE.B  #' ',(A3)+
00002546  1A3C 0000               1875          MOVE.B  #%0,D5
0000254A  6000 0B64               1876          BRA     LSd_v2
0000254E                          1877  LSRL_REGOP     
0000254E  16FC 004C               1878          MOVE.B  #'L',(A3)+                  Insert L into output
00002552  16FC 0053               1879          MOVE.B  #'S',(A3)+                  Insert S into output
00002556  16FC 0052               1880          MOVE.B  #'R',(A3)+                  Insert R into output
0000255A  16FC 002E               1881          MOVE.B  #'.',(A3)+                  Insert . into output
0000255E  16FC 004C               1882          MOVE.B  #'L',(A3)+                  Insert L into output
00002562  16FC 0020               1883          MOVE.B  #' ',(A3)+
00002566  1A3C 0001               1884          MOVE.B  #%1,D5
0000256A  6000 0B44               1885          BRA     LSd_v2
0000256E                          1886          
0000256E                          1887          ;Determine which ls regop to call
0000256E                          1888  LSL_REGOP
0000256E  4244                    1889          CLR.W   D4
00002570  3803                    1890          MOVE.W  D3,D4
00002572  E14C                    1891          LSL.W   #8,D4
00002574  E04C                    1892          LSR.W   #8,D4
00002576  EC4C                    1893          LSR.W   #6,D4
00002578  B87C 0000               1894          CMP.W   #%00,D4
0000257C  6700 FF30               1895          BEQ     LSLB_REGOP
00002580  B87C 0001               1896          CMP.W   #%01,D4
00002584  6700 FF48               1897          BEQ     LSLW_REGOP
00002588  B87C 0002               1898          CMP.W   #%10,D4
0000258C  6700 FF60               1899          BEQ     LSLL_REGOP
00002590                          1900  
00002590  6000 017C               1901          BRA     FLAGINVALID
00002594                          1902  
00002594                          1903          ;Determine which ls regop to call
00002594                          1904  LSR_REGOP
00002594  4244                    1905          CLR.W   D4
00002596  3803                    1906          MOVE.W  D3,D4
00002598  E14C                    1907          LSL.W   #8,D4
0000259A  E04C                    1908          LSR.W   #8,D4
0000259C  EC4C                    1909          LSR.W   #6,D4
0000259E  B87C 0000               1910          CMP.W   #%00,D4
000025A2  6700 FF6A               1911          BEQ     LSRB_REGOP
000025A6  B87C 0001               1912          CMP.W   #%01,D4
000025AA  6782                    1913          BEQ     LSRW_REGOP
000025AC  B87C 0002               1914          CMP.W   #%10,D4
000025B0  679C                    1915          BEQ     LSRL_REGOP
000025B2                          1916  
000025B2  6000 015A               1917          BRA     FLAGINVALID
000025B6                          1918         
000025B6                          1919  LSL_MEMOP
000025B6  16FC 004C               1920          MOVE.B  #'L',(A3)+                  Insert L into output
000025BA  16FC 0053               1921          MOVE.B  #'S',(A3)+                  Insert S into output
000025BE  16FC 004C               1922          MOVE.B  #'L',(A3)+                  Insert L into output
000025C2  16FC 0020               1923          MOVE.B  #' ',(A3)+
000025C6  6000 0C08               1924          BRA     ROd_v1
000025CA                          1925  LSR_MEMOP
000025CA  16FC 004C               1926          MOVE.B  #'L',(A3)+                  Insert L into output
000025CE  16FC 0053               1927          MOVE.B  #'S',(A3)+                  Insert S into output
000025D2  16FC 0052               1928          MOVE.B  #'R',(A3)+                  Insert R into output
000025D6  16FC 0020               1929          MOVE.B  #' ',(A3)+
000025DA  6000 0BF4               1930          BRA     ROd_v1
000025DE                          1931  
000025DE                          1932  ASLB_REGOP
000025DE  16FC 0041               1933          MOVE.B  #'A',(A3)+                  Insert A into output
000025E2  16FC 0053               1934          MOVE.B  #'S',(A3)+                  Insert S into output
000025E6  16FC 004C               1935          MOVE.B  #'L',(A3)+                  Insert L into output
000025EA  16FC 002E               1936          MOVE.B  #'.',(A3)+                  Insert . into output
000025EE  16FC 0042               1937          MOVE.B  #'B',(A3)+                  Insert B into output
000025F2  16FC 0020               1938          MOVE.B  #' ',(A3)+
000025F6  1A3C 0000               1939          MOVE.B  #%0,D5
000025FA  6000 0AB4               1940          BRA     LSd_v2
000025FE                          1941  ASLW_REGOP
000025FE  16FC 0041               1942          MOVE.B  #'A',(A3)+                  Insert A into output
00002602  16FC 0053               1943          MOVE.B  #'S',(A3)+                  Insert S into output
00002606  16FC 004C               1944          MOVE.B  #'L',(A3)+                  Insert L into output
0000260A  16FC 002E               1945          MOVE.B  #'.',(A3)+                  Insert . into output
0000260E  16FC 0057               1946          MOVE.B  #'W',(A3)+                  Insert W into output
00002612  16FC 0020               1947          MOVE.B  #' ',(A3)+
00002616  1A3C 0000               1948          MOVE.B  #%0,D5
0000261A  6000 0A94               1949          BRA     LSd_v2
0000261E                          1950  ASLL_REGOP
0000261E  16FC 0041               1951          MOVE.B  #'A',(A3)+                  Insert A into output
00002622  16FC 0053               1952          MOVE.B  #'S',(A3)+                  Insert S into output
00002626  16FC 004C               1953          MOVE.B  #'L',(A3)+                  Insert L into output
0000262A  16FC 002E               1954          MOVE.B  #'.',(A3)+                  Insert . into output
0000262E  16FC 004C               1955          MOVE.B  #'L',(A3)+                  Insert L into output
00002632  16FC 0020               1956          MOVE.B  #' ',(A3)+
00002636  1A3C 0001               1957          MOVE.B  #%1,D5
0000263A  6000 0A74               1958          BRA     LSd_v2
0000263E                          1959  ASRB_REGOP
0000263E  16FC 0041               1960          MOVE.B  #'A',(A3)+                  Insert A into output
00002642  16FC 0053               1961          MOVE.B  #'S',(A3)+                  Insert S into output
00002646  16FC 0052               1962          MOVE.B  #'R',(A3)+                  Insert R into output
0000264A  16FC 002E               1963          MOVE.B  #'.',(A3)+                  Insert . into output
0000264E  16FC 0042               1964          MOVE.B  #'B',(A3)+                  Insert B into output
00002652  16FC 0020               1965          MOVE.B  #' ',(A3)+
00002656  1A3C 0000               1966          MOVE.B  #%0,D5
0000265A  6000 0A54               1967          BRA     LSd_v2
0000265E                          1968  ASRW_REGOP
0000265E  16FC 0041               1969          MOVE.B  #'A',(A3)+                  Insert A into output
00002662  16FC 0053               1970          MOVE.B  #'S',(A3)+                  Insert S into output
00002666  16FC 0052               1971          MOVE.B  #'R',(A3)+                  Insert R into output
0000266A  16FC 002E               1972          MOVE.B  #'.',(A3)+                  Insert . into output
0000266E  16FC 0057               1973          MOVE.B  #'W',(A3)+                  Insert W into output
00002672  16FC 0020               1974          MOVE.B  #' ',(A3)+
00002676  1A3C 0000               1975          MOVE.B  #%0,D5
0000267A  6000 0A34               1976          BRA     LSd_v2
0000267E                          1977  ASRL_REGOP     
0000267E  16FC 0041               1978          MOVE.B  #'A',(A3)+                  Insert A into output
00002682  16FC 0053               1979          MOVE.B  #'S',(A3)+                  Insert S into output
00002686  16FC 0052               1980          MOVE.B  #'R',(A3)+                  Insert R into output
0000268A  16FC 002E               1981          MOVE.B  #'.',(A3)+                  Insert . into output
0000268E  16FC 004C               1982          MOVE.B  #'L',(A3)+                  Insert L into output
00002692  16FC 0020               1983          MOVE.B  #' ',(A3)+
00002696  1A3C 0001               1984          MOVE.B  #%1,D5
0000269A  6000 0A14               1985          BRA     LSd_v2
0000269E                          1986          
0000269E                          1987          ;Determine ASL regops
0000269E                          1988  ASL_REGOP
0000269E  4244                    1989          CLR.W   D4
000026A0  3803                    1990          MOVE.W  D3,D4
000026A2  E14C                    1991          LSL.W   #8,D4
000026A4  E04C                    1992          LSR.W   #8,D4
000026A6  EC4C                    1993          LSR.W   #6,D4
000026A8  B87C 0000               1994          CMP.W   #%00,D4
000026AC  6700 FF30               1995          BEQ     ASLB_REGOP
000026B0  B87C 0001               1996          CMP.W   #%01,D4
000026B4  6700 FF48               1997          BEQ     ASLW_REGOP
000026B8  B87C 0002               1998          CMP.W   #%10,D4
000026BC  6700 FF60               1999          BEQ     ASLL_REGOP
000026C0                          2000  
000026C0  6000 004C               2001          BRA     FLAGINVALID
000026C4                          2002  
000026C4                          2003          ;Determine ASR regops
000026C4                          2004  ASR_REGOP
000026C4  4244                    2005          CLR.W   D4
000026C6  3803                    2006          MOVE.W  D3,D4
000026C8  E14C                    2007          LSL.W   #8,D4
000026CA  E04C                    2008          LSR.W   #8,D4
000026CC  EC4C                    2009          LSR.W   #6,D4
000026CE  B87C 0000               2010          CMP.W   #%00,D4
000026D2  6700 FF6A               2011          BEQ     ASRB_REGOP
000026D6  B87C 0001               2012          CMP.W   #%01,D4
000026DA  6782                    2013          BEQ     ASRW_REGOP
000026DC  B87C 0002               2014          CMP.W   #%10,D4
000026E0  679C                    2015          BEQ     ASRL_REGOP
000026E2                          2016  
000026E2  6000 002A               2017          BRA     FLAGINVALID
000026E6                          2018  
000026E6                          2019  ASL_MEMOP
000026E6  16FC 0041               2020          MOVE.B  #'A',(A3)+                  Insert A into output
000026EA  16FC 0053               2021          MOVE.B  #'S',(A3)+                  Insert S into output
000026EE  16FC 004C               2022          MOVE.B  #'L',(A3)+                  Insert L into output
000026F2  16FC 0020               2023          MOVE.B  #' ',(A3)+                  Insert . into output
000026F6  6000 0A24               2024          BRA     ASd_v1
000026FA                          2025  
000026FA                          2026  ASR_MEMOP
000026FA  16FC 0041               2027          MOVE.B  #'A',(A3)+                  Insert A into output
000026FE  16FC 0053               2028          MOVE.B  #'S',(A3)+                  Insert S into output
00002702  16FC 0052               2029          MOVE.B  #'R',(A3)+                  Insert R into output
00002706  16FC 0020               2030          MOVE.B  #' ',(A3)+                  Insert . into output
0000270A  6000 0A10               2031          BRA     ASd_v1
0000270E                          2032          
0000270E                          2033  FLAGINVALID
0000270E  2E3C 000000FF           2034          MOVE.L  #$FF,D7     *put in the bad flag value
00002714  4E75                    2035          RTS
00002716                          2036          
00002716                          2037  
00002716                          2038  ************************EFFECTIVE ADDRESS**************************
00002716                          2039  MOVE
00002716  49F9 000034EA           2040      LEA     addressing_mode,A4  *load the jump table for addressing_mode
0000271C                          2041      
0000271C  4286                    2042      CLR.L   D6          *ZERO OUT D6
0000271E  4287                    2043      CLR.L   D7          *ZERO OUT D7
00002720  2C03                    2044      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002722  2E03                    2045      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002724                          2046      *getting the source mode and register
00002724  E14E                    2047      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00002726  E54E                    2048      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
00002728  E04E                    2049      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
0000272A  EA4E                    2050      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
0000272C                          2051      
0000272C  E14F                    2052      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
0000272E  EB4F                    2053      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00002730  E04F                    2054      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002732  EA4F                    2055      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002734                          2056      
00002734  CCFC 0006               2057      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002738  4EB4 6000               2058      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
0000273C                          2059      
0000273C  16FC 0020               2060      MOVE.B  #' ',(A3)+
00002740  16FC 002C               2061      MOVE.B  #',',(A3)+
00002744                          2062      
00002744  4286                    2063      CLR.L   D6          *ZERO OUT D6
00002746  4287                    2064      CLR.L   D7          *ZERO OUT D7
00002748  2C03                    2065      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
0000274A  2E03                    2066      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
0000274C                          2067      
0000274C                          2068      *getting the destination mode and register
0000274C  EF4E                    2069      LSL.W   #7,D6       *SHIFT TO THE LEFT 7
0000274E  E04E                    2070      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00002750  EA4E                    2071      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00002752                          2072  
00002752  E94F                    2073      LSL.W   #4,D7       *SHIFT TO THE LEFT 4
00002754  E04F                    2074      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002756  EA4F                    2075      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002758                          2076      
00002758                          2077      *error checking
00002758  BC3C 0001               2078      CMP.B   #%001,D6    
0000275C  67B0                    2079      BEQ     FLAGINVALID
0000275E  BC3C 0007               2080      CMP.B   #%111,D6
00002762  6600 0008               2081      BNE     whatever
00002766  BE3C 0004               2082      CMP.B   #%100,D7
0000276A  67A2                    2083      BEQ     FLAGINVALID
0000276C                          2084       
0000276C                          2085  whatever     
0000276C  CCFC 0006               2086      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002770  4EB4 6000               2087      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002774                          2088      
00002774  4E75                    2089      RTS
00002776                          2090      
00002776                          2091  
00002776                          2092      
00002776                          2093  MOVEA
00002776  49F9 000034EA           2094      LEA     addressing_mode,A4  *load the jump table for addressing_mode
0000277C                          2095      
0000277C  4286                    2096      CLR.L   D6          *ZERO OUT D6
0000277E  4287                    2097      CLR.L   D7          *ZERO OUT D7
00002780  2C03                    2098      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002782  2E03                    2099      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002784                          2100      *getting the source mode and register
00002784  E14E                    2101      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00002786  E54E                    2102      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
00002788  E04E                    2103      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
0000278A  EA4E                    2104      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
0000278C                          2105      
0000278C  E14F                    2106      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
0000278E  EB4F                    2107      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00002790  E04F                    2108      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002792  EA4F                    2109      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002794                          2110      
00002794  BC3C 0005               2111      CMP.B #%101,D6 
00002798  6700 FF74               2112      BEQ FLAGINVALID 
0000279C  BC3C 0006               2113      CMP.B #%110,D6 
000027A0  6700 FF6C               2114      BEQ FLAGINVALID 
000027A4                          2115      
000027A4  CCFC 0006               2116      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
000027A8  4EB4 6000               2117      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
000027AC                          2118      
000027AC  16FC 0020               2119      MOVE.B  #' ',(A3)+
000027B0  16FC 002C               2120      MOVE.B  #',',(A3)+
000027B4                          2121      
000027B4  4286                    2122      CLR.L   D6          *ZERO OUT D6
000027B6  4287                    2123      CLR.L   D7          *ZERO OUT D7
000027B8  2E03                    2124      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
000027BA                          2125      *getting the destination mode and register
000027BA  1C3C 0001               2126      MOVE.B  #%001,D6    *DESTINATION MODE IS 001 FOR ADDRESS
000027BE                          2127  
000027BE  E94F                    2128      LSL.W   #4,D7       *SHIFT TO THE LEFT 4
000027C0  E04F                    2129      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
000027C2  EA4F                    2130      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
000027C4                          2131      
000027C4  CCFC 0006               2132      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
000027C8  4EB4 6000               2133      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
000027CC                          2134      
000027CC  4E75                    2135      RTS
000027CE                          2136          
000027CE                          2137  
000027CE                          2138  MOVEM_0W    *Register to Memory - Word size
000027CE  49F9 000034EA           2139      LEA     addressing_mode,A4  *load the jump table for addressing_mode
000027D4  4286                    2140      CLR.L   D6          *ZERO OUT D6
000027D6  4287                    2141      CLR.L   D7          *ZERO OUT D7
000027D8  2C03                    2142      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
000027DA  2E03                    2143      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
000027DC                          2144      
000027DC  0246 0038               2145      ANDI.W  #%0000000000111000,D6
000027E0  E64E                    2146      LSR.W   #3,D6
000027E2  0247 0007               2147      ANDI.W  #%0000000000000111,D7
000027E6                          2148      
000027E6                          2149      *error checking
000027E6  BC3C 0000               2150      CMP.B #%000,D6 
000027EA  6700 FF22               2151      BEQ FLAGINVALID 
000027EE  BC3C 0001               2152      CMP.B #%001,D6 
000027F2  6700 FF1A               2153      BEQ FLAGINVALID 
000027F6  BC3C 0003               2154      CMP.B #%011,D6 
000027FA  6700 FF12               2155      BEQ FLAGINVALID
000027FE  BC3C 0005               2156      CMP.B #%101,D6 
00002802  6700 FF0A               2157      BEQ FLAGINVALID 
00002806  BC3C 0006               2158      CMP.B #%110,D6 
0000280A  6700 FF02               2159      BEQ FLAGINVALID 
0000280E  BC3C 0007               2160      CMP.B #%111,D6 
00002812  6600 000A               2161      BNE   HELP112
00002816  BE3C 0004               2162      CMP.B   #%100,D7
0000281A  6700 FEF2               2163      BEQ     FLAGINVALID
0000281E                          2164      *getting the source
0000281E                          2165  HELP112    
0000281E  16FC 0023               2166      MOVE.B  #'#',(A3)+
00002822  4EB9 00003774           2167      JSR     getWord
00002828                          2168      
00002828  16FC 0020               2169      MOVE.B  #' ',(A3)+
0000282C  16FC 002C               2170      MOVE.B  #',',(A3)+
00002830                          2171      
00002830                          2172      *getting the destination
00002830  4286                    2173      CLR.L   D6          *ZERO OUT D6
00002832  4287                    2174      CLR.L   D7          *ZERO OUT D7
00002834  2C03                    2175      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002836  2E03                    2176      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002838                          2177      
00002838  0246 0038               2178      ANDI.W  #%0000000000111000,D6
0000283C  E64E                    2179      LSR.W   #3,D6
0000283E  0247 0007               2180      ANDI.W  #%0000000000000111,D7
00002842                          2181      
00002842                          2182      *error checking
00002842  BC3C 0000               2183      CMP.B #%000,D6 
00002846  6700 FEC6               2184      BEQ FLAGINVALID 
0000284A  BC3C 0001               2185      CMP.B #%001,D6 
0000284E  6700 FEBE               2186      BEQ FLAGINVALID 
00002852  BC3C 0003               2187      CMP.B #%011,D6 
00002856  6700 FEB6               2188      BEQ FLAGINVALID
0000285A  BC3C 0005               2189      CMP.B #%101,D6 
0000285E  6700 FEAE               2190      BEQ FLAGINVALID 
00002862  BC3C 0006               2191      CMP.B #%110,D6 
00002866  6700 FEA6               2192      BEQ FLAGINVALID 
0000286A                          2193       
0000286A                          2194     
0000286A  CCFC 0006               2195      MULU    #6,D6
0000286E  4EB4 6000               2196      JSR     0(A4,D6)
00002872                          2197      
00002872  4E75                    2198      RTS
00002874                          2199      
00002874                          2200  MOVEM_0L    *Register to Memory - Long size
00002874  49F9 000034EA           2201      LEA     addressing_mode,A4  *load the jump table for addressing_mode
0000287A                          2202      
0000287A  4286                    2203      CLR.L   D6          *ZERO OUT D6
0000287C  4287                    2204      CLR.L   D7          *ZERO OUT D7
0000287E  2C03                    2205      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002880  2E03                    2206      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002882                          2207      
00002882  0246 0038               2208      ANDI.W  #%0000000000111000,D6
00002886  E64E                    2209      LSR.W   #3,D6
00002888  0247 0007               2210      ANDI.W  #%0000000000000111,D7
0000288C                          2211      
0000288C                          2212      *error checking
0000288C  BC3C 0000               2213      CMP.B #%000,D6 
00002890  6700 FE7C               2214      BEQ FLAGINVALID 
00002894  BC3C 0001               2215      CMP.B #%001,D6 
00002898  6700 FE74               2216      BEQ FLAGINVALID 
0000289C  BC3C 0003               2217      CMP.B #%011,D6 
000028A0  6700 FE6C               2218      BEQ FLAGINVALID 
000028A4  BC3C 0005               2219      CMP.B #%101,D6 
000028A8  6700 FE64               2220      BEQ FLAGINVALID 
000028AC  BC3C 0006               2221      CMP.B #%110,D6 
000028B0  6700 FE5C               2222      BEQ FLAGINVALID
000028B4  BC3C 0007               2223      CMP.B #%111,D6 
000028B8  6600 000A               2224      BNE   HELP113
000028BC  BE3C 0004               2225      CMP.B   #%100,D7
000028C0  6700 FE4C               2226      BEQ     FLAGINVALID
000028C4                          2227      *getting the source
000028C4                          2228  HELP113    
000028C4  16FC 0023               2229      MOVE.B  #'#',(A3)+
000028C8  4EB9 00003774           2230      JSR     getWord
000028CE                          2231      
000028CE  16FC 002C               2232      MOVE.B  #',',(A3)+
000028D2  16FC 0020               2233      MOVE.B  #' ',(A3)+
000028D6                          2234      
000028D6                          2235      *getting the destination
000028D6  4286                    2236      CLR.L   D6          *ZERO OUT D6
000028D8  4287                    2237      CLR.L   D7          *ZERO OUT D7
000028DA  2C03                    2238      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
000028DC  2E03                    2239      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
000028DE                          2240      
000028DE  0246 0038               2241      ANDI.W  #%0000000000111000,D6
000028E2  E64E                    2242      LSR.W   #3,D6
000028E4  0247 0007               2243      ANDI.W  #%0000000000000111,D7
000028E8                          2244      
000028E8                          2245      *error checking
000028E8  BC3C 0000               2246      CMP.B #%000,D6 
000028EC  6700 FE20               2247      BEQ FLAGINVALID 
000028F0  BC3C 0001               2248      CMP.B #%001,D6 
000028F4  6700 FE18               2249      BEQ FLAGINVALID 
000028F8  BC3C 0003               2250      CMP.B #%011,D6 
000028FC  6700 FE10               2251      BEQ FLAGINVALID 
00002900  BC3C 0005               2252      CMP.B #%101,D6 
00002904  6700 FE08               2253      BEQ FLAGINVALID 
00002908  BC3C 0006               2254      CMP.B #%110,D6 
0000290C  6700 FE00               2255      BEQ FLAGINVALID
00002910  BC3C 0007               2256      CMP.B #%111,D6 
00002914  6600 000A               2257      BNE   HELP111
00002918  BE3C 0004               2258      CMP.B   #%100,D7
0000291C  6700 FDF0               2259      BEQ     FLAGINVALID 
00002920                          2260  
00002920                          2261  HELP111    
00002920  CCFC 0006               2262      MULU    #6,D6
00002924  4EB4 6000               2263      JSR     0(A4,D6)
00002928                          2264      
00002928  4E75                    2265      RTS
0000292A                          2266      
0000292A                          2267      
0000292A                          2268  MOVEM_1W    *Memory to Register - Word size
0000292A  49F9 000034EA           2269      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00002930                          2270      
00002930                          2271      *getting the source
00002930  4286                    2272      CLR.L   D6          *ZERO OUT D6
00002932  4287                    2273      CLR.L   D7          *ZERO OUT D7
00002934  2C03                    2274      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002936  2E03                    2275      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002938                          2276      
00002938  0246 0038               2277      ANDI.W  #%0000000000111000,D6
0000293C  E64E                    2278      LSR.W   #3,D6
0000293E  0247 0007               2279      ANDI.W  #%0000000000000111,D7
00002942                          2280      
00002942                          2281      *error checking
00002942  BC3C 0000               2282      CMP.B #%000,D6 
00002946  6700 FDC6               2283      BEQ FLAGINVALID 
0000294A  BC3C 0001               2284      CMP.B #%001,D6 
0000294E  6700 FDBE               2285      BEQ FLAGINVALID 
00002952  BC3C 0004               2286      CMP.B #%100,D6 
00002956  6700 FDB6               2287      BEQ FLAGINVALID
0000295A  BC3C 0005               2288      CMP.B #%101,D6 
0000295E  6700 FDAE               2289      BEQ FLAGINVALID 
00002962  BC3C 0006               2290      CMP.B #%110,D6 
00002966  6700 FDA6               2291      BEQ FLAGINVALID
0000296A  BC3C 0007               2292      CMP.B #%111,D6 
0000296E  6600 000A               2293      BNE   HELP114
00002972  BE3C 0004               2294      CMP.B   #%100,D7
00002976  6700 FD96               2295      BEQ     FLAGINVALID
0000297A                          2296  
0000297A                          2297  HELP114    
0000297A  CCFC 0006               2298      MULU    #6,D6
0000297E  4EB4 6000               2299      JSR     0(A4,D6)
00002982                          2300      
00002982  16FC 002C               2301      MOVE.B  #',',(A3)+
00002986  16FC 0020               2302      MOVE.B  #' ',(A3)+
0000298A                          2303      *getting the destination
0000298A  16FC 0023               2304      MOVE.B  #'#',(A3)+            
0000298E  4EB9 00003774           2305      JSR     getWord
00002994                          2306      
00002994  4E75                    2307      RTS
00002996                          2308      
00002996                          2309  MOVEM_1L    *Memory to Register - Long size
00002996  49F9 000034EA           2310      LEA     addressing_mode,A4  *load the jump table for addressing_mode
0000299C                          2311      
0000299C                          2312      *getting the source     
0000299C  4286                    2313      CLR.L   D6          *ZERO OUT D6
0000299E  4287                    2314      CLR.L   D7          *ZERO OUT D7
000029A0  2C03                    2315      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
000029A2  2E03                    2316      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
000029A4                          2317      
000029A4  0246 0038               2318      ANDI.W  #%0000000000111000,D6
000029A8  E64E                    2319      LSR.W   #3,D6
000029AA  0247 0007               2320      ANDI.W  #%0000000000000111,D7
000029AE                          2321      
000029AE                          2322      *error checking
000029AE  BC3C 0000               2323      CMP.B #%000,D6 
000029B2  6700 FD5A               2324      BEQ FLAGINVALID 
000029B6  BC3C 0001               2325      CMP.B #%001,D6 
000029BA  6700 FD52               2326      BEQ FLAGINVALID 
000029BE  BC3C 0004               2327      CMP.B #%100,D6 
000029C2  6700 FD4A               2328      BEQ FLAGINVALID 
000029C6  BC3C 0005               2329      CMP.B #%101,D6 
000029CA  6700 FD42               2330      BEQ FLAGINVALID 
000029CE  BC3C 0006               2331      CMP.B #%110,D6 
000029D2  6700 FD3A               2332      BEQ FLAGINVALID
000029D6  BC3C 0007               2333      CMP.B #%111,D6 
000029DA  6600 000A               2334      BNE   HELP115
000029DE  BE3C 0004               2335      CMP.B   #%100,D7
000029E2  6700 FD2A               2336      BEQ     FLAGINVALID
000029E6                          2337      
000029E6                          2338  HELP115    
000029E6  CCFC 0006               2339      MULU    #6,D6
000029EA  4EB4 6000               2340      JSR     0(A4,D6)
000029EE                          2341      
000029EE  16FC 002C               2342      MOVE.B  #',',(A3)+
000029F2  16FC 0020               2343      MOVE.B  #' ',(A3)+
000029F6                          2344      
000029F6                          2345      *getting the destination    
000029F6  16FC 0023               2346      MOVE.B  #'#',(A3)+
000029FA  4EB9 00003774           2347      JSR     getWord
00002A00                          2348      
00002A00  4E75                    2349      RTS    
00002A02                          2350            
00002A02                          2351  ADD_v1  *SOURCE IS <EA>
00002A02  49F9 000034EA           2352      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00002A08                          2353      
00002A08  4286                    2354      CLR.L   D6          *ZERO OUT D6
00002A0A  4287                    2355      CLR.L   D7          *ZERO OUT D7
00002A0C  2C03                    2356      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002A0E  2E03                    2357      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002A10                          2358      *getting the source mode and register
00002A10  E14E                    2359      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00002A12  E54E                    2360      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
00002A14  E04E                    2361      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00002A16  EA4E                    2362      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00002A18                          2363      
00002A18  E14F                    2364      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00002A1A  EB4F                    2365      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00002A1C  E04F                    2366      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002A1E  EA4F                    2367      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002A20                          2368      
00002A20  CCFC 0006               2369      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002A24  4EB4 6000               2370      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002A28                          2371      
00002A28  16FC 002C               2372      MOVE.B  #',',(A3)+
00002A2C  16FC 0020               2373      MOVE.B  #' ',(A3)+
00002A30                          2374      
00002A30  4286                    2375      CLR.L   D6          *ZERO OUT D6
00002A32  4287                    2376      CLR.L   D7          *ZERO OUT D7
00002A34                          2377      *MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002A34  2E03                    2378      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002A36                          2379      
00002A36                          2380      *getting the destination mode and register
00002A36  1C3C 0000               2381      MOVE.B  #%000,D6    *DESTINATION IS A DATA REGISTER
00002A3A                          2382  
00002A3A  E94F                    2383      LSL.W   #4,D7       *SHIFT TO THE LEFT 4
00002A3C  E04F                    2384      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002A3E  EA4F                    2385      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002A40                          2386      
00002A40                          2387       
00002A40  CCFC 0006               2388      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002A44  4EB4 6000               2389      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002A48                          2390      
00002A48  4E75                    2391      RTS
00002A4A                          2392  
00002A4A                          2393      
00002A4A                          2394  ADD_v2      *SOURCE IS Dn
00002A4A  49F9 000034EA           2395      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00002A50                          2396      
00002A50  4286                    2397      CLR.L   D6          *ZERO OUT D6
00002A52  4287                    2398      CLR.L   D7          *ZERO OUT D7
00002A54                          2399      *MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002A54  2E03                    2400      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002A56                          2401      *getting the source mode and register
00002A56  1C3C 0000               2402      MOVE.B  #%000,D6    *SOURCE IS A DATA REGISTER
00002A5A                          2403      
00002A5A  E94F                    2404      LSL.W   #4,D7       *SHIFT TO THE LEFT 4
00002A5C  E04F                    2405      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002A5E  EA4F                    2406      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002A60                          2407      
00002A60  CCFC 0006               2408      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002A64  4EB4 6000               2409      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002A68                          2410      
00002A68  16FC 0020               2411      MOVE.B  #' ',(A3)+
00002A6C  16FC 002C               2412      MOVE.B  #',',(A3)+
00002A70                          2413      
00002A70  4286                    2414      CLR.L   D6          *ZERO OUT D6
00002A72  4287                    2415      CLR.L   D7          *ZERO OUT D7
00002A74  2C03                    2416      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002A76  2E03                    2417      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002A78                          2418      
00002A78                          2419      *getting the destination mode and register
00002A78  E14E                    2420      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00002A7A  E54E                    2421      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
00002A7C  E04E                    2422      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00002A7E  EA4E                    2423      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00002A80                          2424  
00002A80  E14F                    2425      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00002A82  EB4F                    2426      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00002A84  E04F                    2427      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002A86  EA4F                    2428      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002A88                          2429      
00002A88                          2430      *error checking
00002A88  BC3C 0000               2431      CMP.B   #%000,D6
00002A8C  6700 FC80               2432      BEQ     FLAGINVALID 
00002A90  BC3C 0001               2433      CMP.B   #%001,D6
00002A94  6700 FC78               2434      BEQ     FLAGINVALID 
00002A98  BC3C 0007               2435      CMP.B   #%111,D6
00002A9C  6600 000A               2436      BNE     continue
00002AA0  BE3C 0004               2437      CMP.B   #%100,D7
00002AA4  6700 FC68               2438      BEQ     FLAGINVALID 
00002AA8                          2439      
00002AA8                          2440  continue
00002AA8  CCFC 0006               2441      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002AAC  4EB4 6000               2442      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002AB0                          2443      
00002AB0  4E75                    2444      RTS
00002AB2                          2445  
00002AB2                          2446  ADDA
00002AB2  49F9 000034EA           2447      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00002AB8                          2448      
00002AB8  4286                    2449      CLR.L   D6          *ZERO OUT D6
00002ABA  4287                    2450      CLR.L   D7          *ZERO OUT D7
00002ABC  2C03                    2451      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002ABE  2E03                    2452      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002AC0                          2453      *getting the source mode and register
00002AC0  E14E                    2454      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00002AC2  E54E                    2455      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
00002AC4  E04E                    2456      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00002AC6  EA4E                    2457      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00002AC8                          2458      
00002AC8  E14F                    2459      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00002ACA  EB4F                    2460      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00002ACC  E04F                    2461      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002ACE  EA4F                    2462      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002AD0                          2463      
00002AD0  CCFC 0006               2464      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002AD4  4EB4 6000               2465      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002AD8                          2466      
00002AD8  16FC 0020               2467      MOVE.B  #' ',(A3)+
00002ADC  16FC 002C               2468      MOVE.B  #',',(A3)+
00002AE0                          2469      
00002AE0  4286                    2470      CLR.L   D6          *ZERO OUT D6
00002AE2  4287                    2471      CLR.L   D7          *ZERO OUT D7
00002AE4                          2472      *MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002AE4  2E03                    2473      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002AE6                          2474      
00002AE6                          2475      *getting the destination mode and register
00002AE6  1C3C 0001               2476      MOVE.B  #%001,D6    *DESTINATION IS 001 FOR ADDRESS
00002AEA                          2477  
00002AEA  E94F                    2478      LSL.W   #4,D7       *SHIFT TO THE LEFT 4
00002AEC  E04F                    2479      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002AEE  EA4F                    2480      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002AF0                          2481      
00002AF0                          2482       
00002AF0  CCFC 0006               2483      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002AF4  4EB4 6000               2484      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002AF8                          2485      
00002AF8  4E75                    2486      RTS
00002AFA                          2487      
00002AFA                          2488  ADDQ
00002AFA  49F9 000034EA           2489      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00002B00                          2490      
00002B00  4286                    2491      CLR.L   D6          *ZERO OUT D6
00002B02  4287                    2492      CLR.L   D7          *ZERO OUT D7
00002B04  2C03                    2493      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002B06  2E03                    2494      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002B08                          2495      *getting the source mode and register
00002B08                          2496      
00002B08  E94F                    2497      LSL.W   #4,D7       *SHIFT TO THE LEFT 4
00002B0A  E04F                    2498      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002B0C  EA4F                    2499      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002B0E                          2500      
00002B0E  16FC 0023               2501      MOVE.B  #'#',(A3)+
00002B12  45F9 00003820           2502      LEA     data_mode,A2    *load the jump table for data
00002B18  CEFC 0006               2503      MULU    #6,D7
00002B1C  4EB2 7000               2504      JSR     0(A2,D7)
00002B20                          2505      
00002B20  16FC 0020               2506      MOVE.B  #' ',(A3)+
00002B24  16FC 002C               2507      MOVE.B  #',',(A3)+
00002B28                          2508      
00002B28  4286                    2509      CLR.L   D6          *ZERO OUT D6
00002B2A  4287                    2510      CLR.L   D7          *ZERO OUT D7
00002B2C  2C03                    2511      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002B2E  2E03                    2512      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002B30                          2513      
00002B30                          2514      *getting the destination mode and register
00002B30  E14E                    2515      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00002B32  E54E                    2516      LSL.W   #2,D6       =SHIFT TO THE LEFT 2
00002B34  E04E                    2517      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00002B36  EA4E                    2518      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00002B38                          2519  
00002B38  E14F                    2520      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00002B3A  EB4F                    2521      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00002B3C  E04F                    2522      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002B3E  EA4F                    2523      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002B40                          2524      
00002B40                          2525      *error checking
00002B40  BC3C 0007               2526      CMP.B   #%111,D6
00002B44  6600 000A               2527      BNE     continue2
00002B48  BE3C 0004               2528      CMP.B   #%100,D7
00002B4C  6700 FBC0               2529      BEQ     FLAGINVALID 
00002B50                          2530  
00002B50                          2531  continue2     
00002B50  CCFC 0006               2532      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002B54  4EB4 6000               2533      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002B58                          2534      
00002B58  4E75                    2535      RTS
00002B5A                          2536      
00002B5A                          2537  SUB_v2      *SOURCE is <EA>
00002B5A  49F9 000034EA           2538      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00002B60                          2539      
00002B60  4286                    2540      CLR.L   D6          *ZERO OUT D6
00002B62  4287                    2541      CLR.L   D7          *ZERO OUT D7
00002B64                          2542      ;MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002B64  2E03                    2543      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002B66                          2544      *getting the source mode and register
00002B66  1C3C 0000               2545      MOVE.B  #%000,D6    *SOURCE MODE IS A DATA REGISTER
00002B6A                          2546      
00002B6A  E94F                    2547      LSL.W   #4,D7       *SHIFT TO THE LEFT 4
00002B6C  E04F                    2548      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002B6E  EA4F                    2549      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002B70                          2550      
00002B70  CCFC 0006               2551      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002B74  4EB4 6000               2552      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002B78                          2553      
00002B78  16FC 0020               2554      MOVE.B  #' ',(A3)+
00002B7C  16FC 002C               2555      MOVE.B  #',',(A3)+
00002B80                          2556      
00002B80  4286                    2557      CLR.L   D6          *ZERO OUT D6
00002B82  4287                    2558      CLR.L   D7          *ZERO OUT D7
00002B84  2C03                    2559      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002B86  2E03                    2560      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002B88                          2561      
00002B88                          2562      *getting the destination mode and register
00002B88  E14E                    2563      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00002B8A  E54E                    2564      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
00002B8C  E04E                    2565      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00002B8E  EA4E                    2566      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00002B90                          2567  
00002B90  E14F                    2568      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00002B92  EB4F                    2569      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00002B94  E04F                    2570      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002B96  EA4F                    2571      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002B98                          2572      
00002B98                          2573      *error checking
00002B98  BC3C 0000               2574      CMP.B   #%000,D6
00002B9C  6700 FB70               2575      BEQ     FLAGINVALID 
00002BA0  BC3C 0001               2576      CMP.B   #%001,D6
00002BA4  6700 FB68               2577      BEQ     FLAGINVALID 
00002BA8  BC3C 0007               2578      CMP.B   #%111,D6
00002BAC  6600 000A               2579      BNE     continue3
00002BB0  BE3C 0004               2580      CMP.B   #%100,D7
00002BB4  6700 FB58               2581      BEQ     FLAGINVALID 
00002BB8                          2582      
00002BB8                          2583  continue3
00002BB8  CCFC 0006               2584      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002BBC  4EB4 6000               2585      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002BC0                          2586      
00002BC0  4E75                    2587      RTS
00002BC2                          2588  
00002BC2                          2589  
00002BC2                          2590  SUB_v1      *Source is Dn
00002BC2  49F9 000034EA           2591      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00002BC8                          2592      
00002BC8  4286                    2593      CLR.L   D6          *ZERO OUT D6
00002BCA  4287                    2594      CLR.L   D7          *ZERO OUT D7
00002BCC  2C03                    2595      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002BCE  2E03                    2596      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002BD0                          2597      *getting the source mode and register
00002BD0  E14E                    2598      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00002BD2  E54E                    2599      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
00002BD4  E04E                    2600      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00002BD6  EA4E                    2601      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00002BD8                          2602      
00002BD8  E14F                    2603      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00002BDA  EB4F                    2604      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00002BDC  E04F                    2605      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002BDE  EA4F                    2606      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002BE0                          2607      
00002BE0  CCFC 0006               2608      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002BE4  4EB4 6000               2609      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002BE8                          2610      
00002BE8  16FC 0020               2611      MOVE.B  #' ',(A3)+
00002BEC  16FC 002C               2612      MOVE.B  #',',(A3)+
00002BF0                          2613      
00002BF0  4286                    2614      CLR.L   D6          *ZERO OUT D6
00002BF2  4287                    2615      CLR.L   D7          *ZERO OUT D7
00002BF4                          2616      ;MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002BF4  2E03                    2617      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002BF6                          2618      
00002BF6                          2619      *getting the destination mode and register
00002BF6  1C3C 0000               2620      MOVE.B  #%000,D6    *DESTINATION MODE IS A DATA REGISTER
00002BFA                          2621  
00002BFA  E94F                    2622      LSL.W   #4,D7       *SHIFT TO THE LEFT 4
00002BFC  E04F                    2623      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002BFE  EA4F                    2624      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002C00                          2625      
00002C00                          2626       
00002C00  CCFC 0006               2627      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002C04  4EB4 6000               2628      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002C08                          2629      
00002C08  4E75                    2630      RTS
00002C0A                          2631  
00002C0A                          2632  
00002C0A                          2633  SUBA
00002C0A  49F9 000034EA           2634      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00002C10                          2635      
00002C10  4286                    2636      CLR.L   D6          *ZERO OUT D6
00002C12  4287                    2637      CLR.L   D7          *ZERO OUT D7
00002C14  2C03                    2638      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002C16  2E03                    2639      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002C18                          2640      *getting the source mode and register
00002C18  E14E                    2641      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00002C1A  E54E                    2642      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
00002C1C  E04E                    2643      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00002C1E  EA4E                    2644      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00002C20                          2645      
00002C20  E14F                    2646      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00002C22  EB4F                    2647      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00002C24  E04F                    2648      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002C26  EA4F                    2649      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002C28                          2650      
00002C28  CCFC 0006               2651      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002C2C  4EB4 6000               2652      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002C30                          2653      
00002C30  16FC 0020               2654      MOVE.B  #' ',(A3)+
00002C34  16FC 002C               2655      MOVE.B  #',',(A3)+
00002C38                          2656      
00002C38  4286                    2657      CLR.L   D6          *ZERO OUT D6
00002C3A  4287                    2658      CLR.L   D7          *ZERO OUT D7
00002C3C                          2659      *MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002C3C  2E03                    2660      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002C3E                          2661      
00002C3E                          2662      *getting the destination mode and register
00002C3E  1C3C 0001               2663      MOVE.B  #%001,D6    *DESTINATION IS 001 FOR ADDRESS
00002C42                          2664  
00002C42  E94F                    2665      LSL.W   #4,D7       *SHIFT TO THE LEFT 4
00002C44  E04F                    2666      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002C46  EA4F                    2667      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002C48                          2668      
00002C48                          2669       
00002C48  CCFC 0006               2670      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002C4C  4EB4 6000               2671      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002C50                          2672      
00002C50  4E75                    2673      RTS
00002C52                          2674  
00002C52                          2675  
00002C52                          2676  SUBI
00002C52  49F9 000034EA           2677      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00002C58                          2678      
00002C58  4286                    2679      CLR.L   D6          *ZERO OUT D6
00002C5A  4287                    2680      CLR.L   D7          *ZERO OUT D7
00002C5C  2C03                    2681      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002C5E  2E03                    2682      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002C60                          2683      *getting the size of the immediate data
00002C60  E14E                    2684      LSL.W   #8,D6
00002C62  E04E                    2685      LSR.W   #8,D6
00002C64  EC4E                    2686      LSR.W   #6,D6
00002C66                          2687  
00002C66  16FC 0023               2688      MOVE.B  #'#',(A3)+
00002C6A  BC3C 0002               2689      CMP.B   #%10,D6
00002C6E  6700 000C               2690      BEQ     comehere    
00002C72                          2691      
00002C72  4EB9 00003774           2692      JSR     getWord
00002C78  6000 0008               2693      BRA     mydest
00002C7C                          2694  
00002C7C                          2695  comehere
00002C7C  4EB9 000037A4           2696      JSR     getLong    
00002C82                          2697  mydest    
00002C82  16FC 0020               2698      MOVE.B  #' ',(A3)+
00002C86  16FC 002C               2699      MOVE.B  #',',(A3)+
00002C8A                          2700      
00002C8A  4286                    2701      CLR.L   D6          *ZERO OUT D6
00002C8C  4287                    2702      CLR.L   D7          *ZERO OUT D7
00002C8E  2C03                    2703      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002C90  2E03                    2704      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002C92                          2705      
00002C92                          2706      *getting the destination mode and register
00002C92  E14E                    2707      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00002C94  E54E                    2708      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
00002C96  E04E                    2709      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00002C98  EA4E                    2710      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00002C9A                          2711      
00002C9A  E14F                    2712      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00002C9C  EB4F                    2713      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00002C9E  E04F                    2714      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002CA0  EA4F                    2715      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002CA2                          2716      
00002CA2                          2717      *error checking 
00002CA2  BC3C 0001               2718      CMP.B   #%001,D6
00002CA6  6700 FA66               2719      BEQ     FLAGINVALID 
00002CAA  BC3C 0007               2720      CMP.B   #%111,D6
00002CAE  6600 000A               2721      BNE     continue4
00002CB2  BE3C 0004               2722      CMP.B   #%100,D7
00002CB6  6700 FA56               2723      BEQ     FLAGINVALID 
00002CBA                          2724  
00002CBA                          2725  continue4     
00002CBA  CCFC 0006               2726      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002CBE  4EB4 6000               2727      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002CC2                          2728      
00002CC2  4E75                    2729      RTS
00002CC4                          2730  
00002CC4                          2731  MULS
00002CC4  49F9 000034EA           2732      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00002CCA                          2733      
00002CCA  4286                    2734      CLR.L   D6          *ZERO OUT D6
00002CCC  4287                    2735      CLR.L   D7          *ZERO OUT D7
00002CCE  2C03                    2736      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002CD0  2E03                    2737      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002CD2                          2738      *getting the source mode and register
00002CD2  E14E                    2739      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00002CD4  E54E                    2740      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
00002CD6  E04E                    2741      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00002CD8  EA4E                    2742      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00002CDA                          2743      
00002CDA  E14F                    2744      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00002CDC  EB4F                    2745      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00002CDE  E04F                    2746      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002CE0  EA4F                    2747      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002CE2                          2748      
00002CE2                          2749      *error checking
00002CE2  BC3C 0001               2750      CMP.B   #%001,D6    
00002CE6  6700 FA26               2751      BEQ     FLAGINVALID 
00002CEA                          2752      
00002CEA  CCFC 0006               2753      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002CEE  4EB4 6000               2754      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002CF2                          2755      
00002CF2  16FC 0020               2756      MOVE.B  #' ',(A3)+
00002CF6  16FC 002C               2757      MOVE.B  #',',(A3)+
00002CFA                          2758      
00002CFA  4286                    2759      CLR.L   D6          *ZERO OUT D6
00002CFC  4287                    2760      CLR.L   D7          *ZERO OUT D7
00002CFE                          2761      ;MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002CFE  2E03                    2762      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002D00                          2763      
00002D00                          2764      *getting the destination mode and register
00002D00  1C3C 0000               2765      MOVE.B  #%000,D6    *DESTINATION MODE IS A DATA REGISTER
00002D04                          2766      
00002D04  E94F                    2767      LSL.W   #4,D7       *SHIFT TO THE LEFT 4
00002D06  E04F                    2768      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002D08  EA4F                    2769      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002D0A                          2770      
00002D0A  CCFC 0006               2771      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002D0E  4EB4 6000               2772      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002D12                          2773      
00002D12  4E75                    2774      RTS
00002D14                          2775      
00002D14                          2776  DIVS
00002D14  49F9 000034EA           2777      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00002D1A                          2778      
00002D1A  4286                    2779      CLR.L   D6          *ZERO OUT D6
00002D1C  4287                    2780      CLR.L   D7          *ZERO OUT D7
00002D1E  2C03                    2781      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002D20  2E03                    2782      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002D22                          2783      *getting the source mode and register
00002D22  E14E                    2784      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00002D24  E54E                    2785      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
00002D26  E04E                    2786      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00002D28  EA4E                    2787      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00002D2A                          2788      
00002D2A  E14F                    2789      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00002D2C  EB4F                    2790      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00002D2E  E04F                    2791      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002D30  EA4F                    2792      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002D32                          2793      
00002D32                          2794      *error checking
00002D32  BC3C 0001               2795      CMP.B   #%001,D6    
00002D36  6700 F9D6               2796      BEQ     FLAGINVALID 
00002D3A                          2797  
00002D3A  CCFC 0006               2798      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002D3E  4EB4 6000               2799      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002D42                          2800      
00002D42  16FC 0020               2801      MOVE.B  #' ',(A3)+
00002D46  16FC 002C               2802      MOVE.B  #',',(A3)+
00002D4A                          2803      
00002D4A  4286                    2804      CLR.L   D6          *ZERO OUT D6
00002D4C  4287                    2805      CLR.L   D7          *ZERO OUT D7
00002D4E                          2806      ;MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002D4E  2E03                    2807      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002D50                          2808      
00002D50                          2809      *getting the destination mode and register
00002D50  1C3C 0000               2810      MOVE.B  #%000,D6    *DESTINATION MODE IS A DATA REGISTER
00002D54                          2811      
00002D54  E94F                    2812      LSL.W   #4,D7       *SHIFT TO THE LEFT 4
00002D56  E04F                    2813      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002D58  EA4F                    2814      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002D5A                          2815      
00002D5A  CCFC 0006               2816      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002D5E  4EB4 6000               2817      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002D62                          2818      
00002D62  4E75                    2819      RTS
00002D64                          2820  
00002D64                          2821  LEA
00002D64  49F9 000034EA           2822      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00002D6A                          2823      
00002D6A  4286                    2824      CLR.L   D6          *ZERO OUT D6
00002D6C  4287                    2825      CLR.L   D7          *ZERO OUT D7
00002D6E  2C03                    2826      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002D70  2E03                    2827      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002D72                          2828      *getting the source mode and register
00002D72  E14E                    2829      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00002D74  E54E                    2830      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
00002D76  E04E                    2831      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00002D78  EA4E                    2832      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00002D7A                          2833      
00002D7A  E14F                    2834      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00002D7C  EB4F                    2835      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00002D7E  E04F                    2836      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002D80  EA4F                    2837      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002D82                          2838      
00002D82                          2839      *error checking
00002D82  BC3C 0001               2840      CMP.B   #%001,D6    
00002D86  6700 F986               2841      BEQ     FLAGINVALID 
00002D8A  BC3C 0000               2842      CMP.B   #%000,D6    
00002D8E  6700 F97E               2843      BEQ     FLAGINVALID 
00002D92  BC3C 0003               2844      CMP.B   #%011,D6    
00002D96  6700 F976               2845      BEQ     FLAGINVALID 
00002D9A  BC3C 0004               2846      CMP.B   #%100,D6    
00002D9E  6700 F96E               2847      BEQ     FLAGINVALID 
00002DA2  BC3C 0007               2848      CMP.B   #%111,D6
00002DA6  6600 000A               2849      BNE     continue5
00002DAA  BE3C 0004               2850      CMP.B   #%100,D7
00002DAE  6700 F95E               2851      BEQ     FLAGINVALID 
00002DB2                          2852  
00002DB2                          2853  continue5        
00002DB2  CCFC 0006               2854      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002DB6  4EB4 6000               2855      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002DBA                          2856      
00002DBA  16FC 0020               2857      MOVE.B  #' ',(A3)+
00002DBE  16FC 002C               2858      MOVE.B  #',',(A3)+
00002DC2                          2859      
00002DC2  4286                    2860      CLR.L   D6          *ZERO OUT D6
00002DC4  4287                    2861      CLR.L   D7          *ZERO OUT D7
00002DC6                          2862      ;MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002DC6  2E03                    2863      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002DC8                          2864      
00002DC8                          2865      *getting the destination mode and register
00002DC8  1C3C 0001               2866      MOVE.B  #%001,D6    *DESTINATION MODE IS AN ADDRESS REGISTER
00002DCC                          2867      
00002DCC  E94F                    2868      LSL.W   #4,D7       *SHIFT TO THE LEFT 4
00002DCE  E04F                    2869      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002DD0  EA4F                    2870      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002DD2                          2871      
00002DD2  CCFC 0006               2872      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002DD6  4EB4 6000               2873      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002DDA                          2874      
00002DDA  4E75                    2875      RTS
00002DDC                          2876      
00002DDC                          2877  AND_v1      *SOURCE IS <EA>
00002DDC  49F9 000034EA           2878      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00002DE2                          2879      
00002DE2  4286                    2880      CLR.L   D6          *ZERO OUT D6
00002DE4  4287                    2881      CLR.L   D7          *ZERO OUT D7
00002DE6  2C03                    2882      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002DE8  2E03                    2883      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002DEA                          2884      *getting the source mode and register
00002DEA  E14E                    2885      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00002DEC  E54E                    2886      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
00002DEE  E04E                    2887      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00002DF0  EA4E                    2888      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00002DF2                          2889      
00002DF2  E14F                    2890      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00002DF4  EB4F                    2891      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00002DF6  E04F                    2892      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002DF8  EA4F                    2893      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002DFA                          2894      
00002DFA                          2895      *error checking
00002DFA  BC3C 0001               2896      CMP.B   #%001,D6
00002DFE  6700 F90E               2897      BEQ     FLAGINVALID 
00002E02                          2898      
00002E02  CCFC 0006               2899      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002E06  4EB4 6000               2900      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002E0A                          2901      
00002E0A  16FC 0020               2902      MOVE.B  #' ',(A3)+
00002E0E  16FC 002C               2903      MOVE.B  #',',(A3)+
00002E12                          2904      
00002E12  4286                    2905      CLR.L   D6          *ZERO OUT D6
00002E14  4287                    2906      CLR.L   D7          *ZERO OUT D7
00002E16                          2907      ;MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002E16  2E03                    2908      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002E18                          2909      
00002E18                          2910      *getting the destination mode and register
00002E18  1C3C 0000               2911      MOVE.B  #%000,D6    *DESTINATION MODE IS A DATA REGISTER
00002E1C                          2912  
00002E1C  E94F                    2913      LSL.W   #4,D7       *SHIFT TO THE LEFT 4
00002E1E  E04F                    2914      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002E20  EA4F                    2915      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002E22                          2916      
00002E22                          2917       
00002E22  CCFC 0006               2918      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002E26  4EB4 6000               2919      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002E2A                          2920      
00002E2A  4E75                    2921      RTS
00002E2C                          2922  
00002E2C                          2923  
00002E2C                          2924  AND_v2      *SOURCE IS Dn
00002E2C  49F9 000034EA           2925      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00002E32                          2926      
00002E32  4286                    2927      CLR.L   D6          *ZERO OUT D6
00002E34  4287                    2928      CLR.L   D7          *ZERO OUT D7
00002E36                          2929      ;MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002E36  2E03                    2930      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002E38                          2931      *getting the source mode and register
00002E38  1C3C 0000               2932      MOVE.B  #%000,D6    *SOURCE MODE IS A DATA REGISTER
00002E3C                          2933      
00002E3C  E94F                    2934      LSL.W   #4,D7       *SHIFT TO THE LEFT 4
00002E3E  E04F                    2935      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002E40  EA4F                    2936      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002E42                          2937      
00002E42  CCFC 0006               2938      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002E46  4EB4 6000               2939      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002E4A                          2940      
00002E4A  16FC 0020               2941      MOVE.B  #' ',(A3)+
00002E4E  16FC 002C               2942      MOVE.B  #',',(A3)+
00002E52                          2943      
00002E52  4286                    2944      CLR.L   D6          *ZERO OUT D6
00002E54  4287                    2945      CLR.L   D7          *ZERO OUT D7
00002E56  2C03                    2946      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002E58  2E03                    2947      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002E5A                          2948      
00002E5A                          2949      *getting the destination mode and register
00002E5A  E14E                    2950      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00002E5C  E54E                    2951      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
00002E5E  E04E                    2952      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00002E60  EA4E                    2953      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00002E62                          2954  
00002E62  E14F                    2955      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00002E64  EB4F                    2956      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00002E66  E04F                    2957      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002E68  EA4F                    2958      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002E6A                          2959      
00002E6A                          2960      *error checking
00002E6A  BC3C 0000               2961      CMP.B   #%000,D6
00002E6E  6700 F89E               2962      BEQ     FLAGINVALID 
00002E72  BC3C 0001               2963      CMP.B   #%001,D6
00002E76  6700 F896               2964      BEQ     FLAGINVALID 
00002E7A  BC3C 0007               2965      CMP.B   #%111,D6
00002E7E  6600 000A               2966      BNE     continue6
00002E82  BE3C 0004               2967      CMP.B   #%100,D7
00002E86  6700 F886               2968      BEQ     FLAGINVALID 
00002E8A                          2969      
00002E8A                          2970  continue6
00002E8A  CCFC 0006               2971      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002E8E  4EB4 6000               2972      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002E92                          2973      
00002E92  4E75                    2974      RTS
00002E94                          2975  
00002E94                          2976  ORI
00002E94  49F9 000034EA           2977      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00002E9A                          2978      
00002E9A  4286                    2979      CLR.L   D6          *ZERO OUT D6
00002E9C  4287                    2980      CLR.L   D7          *ZERO OUT D7
00002E9E  2C03                    2981      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002EA0  2E03                    2982      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002EA2                          2983      *getting the size of the immediate data
00002EA2  E14E                    2984      LSL.W   #8,D6
00002EA4  E04E                    2985      LSR.W   #8,D6
00002EA6  EC4E                    2986      LSR.W   #6,D6
00002EA8                          2987  
00002EA8  16FC 0023               2988      MOVE.B  #'#',(A3)+
00002EAC  BC3C 0002               2989      CMP.B   #%10,D6
00002EB0  6700 000C               2990      BEQ     gohere
00002EB4                          2991      
00002EB4  4EB9 00003774           2992      JSR     getWord
00002EBA  6000 0008               2993      BRA     jump
00002EBE                          2994  
00002EBE                          2995  gohere    
00002EBE  4EB9 000037A4           2996      JSR     getLong
00002EC4                          2997      
00002EC4                          2998  jump    
00002EC4  16FC 0020               2999      MOVE.B  #' ',(A3)+
00002EC8  16FC 002C               3000      MOVE.B  #',',(A3)+
00002ECC                          3001      
00002ECC  4286                    3002      CLR.L   D6          *ZERO OUT D6
00002ECE  4287                    3003      CLR.L   D7          *ZERO OUT D7
00002ED0  2C03                    3004      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002ED2  2E03                    3005      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002ED4                          3006      
00002ED4                          3007      *getting the destination mode and register
00002ED4  E14E                    3008      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00002ED6  E54E                    3009      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
00002ED8  E04E                    3010      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00002EDA  EA4E                    3011      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00002EDC                          3012      
00002EDC  E14F                    3013      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00002EDE  EB4F                    3014      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00002EE0  E04F                    3015      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002EE2  EA4F                    3016      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002EE4                          3017      
00002EE4                          3018      *error checking 
00002EE4  BC3C 0001               3019      CMP.B   #%001,D6
00002EE8  6700 F824               3020      BEQ     FLAGINVALID 
00002EEC  BC3C 0007               3021      CMP.B   #%111,D6
00002EF0  6600 000A               3022      BNE     continue7
00002EF4  BE3C 0004               3023      CMP.B   #%100,D7
00002EF8  6700 F814               3024      BEQ     FLAGINVALID 
00002EFC                          3025  
00002EFC                          3026  continue7     
00002EFC  CCFC 0006               3027      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002F00  4EB4 6000               3028      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002F04                          3029      
00002F04  4E75                    3030      RTS
00002F06                          3031              
00002F06                          3032  NEG
00002F06  49F9 000034EA           3033      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00002F0C                          3034      
00002F0C                          3035      *this one does not have source address. Syntax: NEG  <EA>
00002F0C                          3036      
00002F0C  4286                    3037      CLR.L   D6          *ZERO OUT D6
00002F0E  4287                    3038      CLR.L   D7          *ZERO OUT D7
00002F10  2C03                    3039      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002F12  2E03                    3040      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002F14                          3041      
00002F14                          3042      *getting the destination mode and register
00002F14  E14E                    3043      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00002F16  E54E                    3044      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
00002F18  E04E                    3045      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00002F1A  EA4E                    3046      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00002F1C                          3047      
00002F1C  E14F                    3048      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00002F1E  EB4F                    3049      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00002F20  E04F                    3050      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002F22  EA4F                    3051      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002F24                          3052      
00002F24                          3053      *error checking 
00002F24  BC3C 0001               3054      CMP.B   #%001,D6
00002F28  6700 F7E4               3055      BEQ     FLAGINVALID 
00002F2C  BC3C 0007               3056      CMP.B   #%111,D6
00002F30  6600 000A               3057      BNE     continue8
00002F34  BE3C 0004               3058      CMP.B   #%100,D7
00002F38  6700 F7D4               3059      BEQ     FLAGINVALID 
00002F3C                          3060  
00002F3C                          3061  continue8     
00002F3C  CCFC 0006               3062      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002F40  4EB4 6000               3063      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002F44                          3064      
00002F44  4E75                    3065      RTS
00002F46                          3066  
00002F46                          3067  EOR
00002F46  49F9 000034EA           3068      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00002F4C                          3069      
00002F4C  4286                    3070      CLR.L   D6          *ZERO OUT D6
00002F4E  4287                    3071      CLR.L   D7          *ZERO OUT D7
00002F50                          3072      ;MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002F50  2E03                    3073      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002F52                          3074      *getting the size of the immediate data
00002F52  1C3C 0000               3075      MOVE.B  #%000,D6    *SOURCE IS A DATA REGISTER
00002F56                          3076      
00002F56  E94F                    3077      LSL.W   #4,D7
00002F58  E04F                    3078      LSR.W   #8,D7
00002F5A  EA4F                    3079      LSR.W   #5,D7
00002F5C                          3080      
00002F5C  CCFC 0006               3081      MULU    #6,D6
00002F60  4EB4 6000               3082      JSR     0(A4,D6)
00002F64                          3083      
00002F64  16FC 0020               3084      MOVE.B  #' ',(A3)+
00002F68  16FC 002C               3085      MOVE.B  #',',(A3)+
00002F6C                          3086      
00002F6C  4286                    3087      CLR.L   D6          *ZERO OUT D6
00002F6E  4287                    3088      CLR.L   D7          *ZERO OUT D7
00002F70  2C03                    3089      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002F72  2E03                    3090      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002F74                          3091      
00002F74                          3092      *getting the destination mode and register
00002F74  E14E                    3093      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00002F76  E54E                    3094      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
00002F78  E04E                    3095      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00002F7A  EA4E                    3096      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00002F7C                          3097      
00002F7C  E14F                    3098      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00002F7E  EB4F                    3099      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00002F80  E04F                    3100      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00002F82  EA4F                    3101      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00002F84                          3102      
00002F84                          3103      *error checking 
00002F84  BC3C 0001               3104      CMP.B   #%001,D6
00002F88  6700 F784               3105      BEQ     FLAGINVALID 
00002F8C  BC3C 0007               3106      CMP.B   #%111,D6
00002F90  6600 000A               3107      BNE     continue10
00002F94  BE3C 0004               3108      CMP.B   #%100,D7
00002F98  6700 F774               3109      BEQ     FLAGINVALID 
00002F9C                          3110  
00002F9C                          3111  continue10     
00002F9C  CCFC 0006               3112      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00002FA0  4EB4 6000               3113      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00002FA4                          3114      
00002FA4  4E75                    3115      RTS
00002FA6                          3116  
00002FA6                          3117      
00002FA6                          3118  EORI
00002FA6  49F9 000034EA           3119      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00002FAC                          3120      
00002FAC  4286                    3121      CLR.L   D6          *ZERO OUT D6
00002FAE  4287                    3122      CLR.L   D7          *ZERO OUT D7
00002FB0  2C03                    3123      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002FB2  2E03                    3124      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002FB4                          3125      *getting the size of the immediate data
00002FB4  E14E                    3126      LSL.W   #8,D6
00002FB6  E04E                    3127      LSR.W   #8,D6
00002FB8  EC4E                    3128      LSR.W   #6,D6
00002FBA                          3129  
00002FBA  16FC 0023               3130      MOVE.B  #'#',(A3)+
00002FBE  BC3C 0002               3131      CMP.B   #%10,D6
00002FC2  6700 001C               3132      BEQ     jmp1
00002FC6  BC3C 0000               3133      CMP.B   #%00,D6
00002FCA  6700 000A               3134      BEQ     jmp2
00002FCE  BC3C 0001               3135      CMP.B   #%01,D6
00002FD2  6700 0002               3136      BEQ     jmp2
00002FD6                          3137  
00002FD6  4EB9 00003774           3138  jmp2    JSR     getWord
00002FDC  6000 0008               3139          BRA     jmp3
00002FE0                          3140      
00002FE0  4EB9 000037A4           3141  jmp1    JSR     getLong
00002FE6                          3142      
00002FE6                          3143  jmp3    
00002FE6  16FC 0020               3144      MOVE.B  #' ',(A3)+
00002FEA  16FC 002C               3145      MOVE.B  #',',(A3)+
00002FEE                          3146      
00002FEE  4286                    3147      CLR.L   D6          *ZERO OUT D6
00002FF0  4287                    3148      CLR.L   D7          *ZERO OUT D7
00002FF2  2C03                    3149      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00002FF4  2E03                    3150      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00002FF6                          3151      
00002FF6                          3152      *getting the destination mode and register
00002FF6  E14E                    3153      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00002FF8  E54E                    3154      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
00002FFA  E04E                    3155      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00002FFC  EA4E                    3156      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00002FFE                          3157      
00002FFE  E14F                    3158      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00003000  EB4F                    3159      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00003002  E04F                    3160      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00003004  EA4F                    3161      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00003006                          3162      
00003006                          3163      *error checking 
00003006  BC3C 0001               3164      CMP.B   #%001,D6
0000300A  6700 F702               3165      BEQ     FLAGINVALID 
0000300E  BC3C 0007               3166      CMP.B   #%111,D6
00003012  6600 000A               3167      BNE     continue9
00003016  BE3C 0004               3168      CMP.B   #%100,D7
0000301A  6700 F6F2               3169      BEQ     FLAGINVALID 
0000301E                          3170  
0000301E                          3171  continue9     
0000301E  CCFC 0006               3172      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00003022  4EB4 6000               3173      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00003026                          3174      
00003026  4E75                    3175      RTS
00003028                          3176      
00003028                          3177  NOT
00003028  49F9 000034EA           3178      LEA     addressing_mode,A4  *load the jump table for addressing_mode
0000302E                          3179      
0000302E                          3180      *this one does not have source address. Syntax: NEG  <EA>
0000302E                          3181      
0000302E  4286                    3182      CLR.L   D6          *ZERO OUT D6
00003030  4287                    3183      CLR.L   D7          *ZERO OUT D7
00003032  2C03                    3184      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00003034  2E03                    3185      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00003036                          3186      
00003036                          3187      *getting the destination mode and register
00003036  E14E                    3188      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00003038  E54E                    3189      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
0000303A  E04E                    3190      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
0000303C  EA4E                    3191      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
0000303E                          3192      
0000303E  E14F                    3193      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00003040  EB4F                    3194      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00003042  E04F                    3195      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00003044  EA4F                    3196      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00003046                          3197      
00003046                          3198      *error checking 
00003046  BC3C 0001               3199      CMP.B   #%001,D6
0000304A  6700 F6C2               3200      BEQ     FLAGINVALID 
0000304E  BC3C 0007               3201      CMP.B   #%111,D6
00003052  6600 000A               3202      BNE     continue11
00003056  BE3C 0004               3203      CMP.B   #%100,D7
0000305A  6700 F6B2               3204      BEQ     FLAGINVALID 
0000305E                          3205  
0000305E                          3206  continue11     
0000305E  CCFC 0006               3207      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00003062  4EB4 6000               3208      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00003066                          3209      
00003066  4E75                    3210      RTS
00003068                          3211  
00003068                          3212  LSd_v1  *MEMORY SHIFT
00003068  49F9 000034EA           3213      LEA     addressing_mode,A4  *load the jump table for addressing_mode
0000306E                          3214      
0000306E                          3215      *this one does not have source address. Syntax: LSd  <EA>
0000306E                          3216      
0000306E  4286                    3217      CLR.L   D6          *ZERO OUT D6
00003070  4287                    3218      CLR.L   D7          *ZERO OUT D7
00003072  2C03                    3219      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00003074  2E03                    3220      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00003076                          3221      
00003076                          3222      *getting the destination mode and register
00003076  E14E                    3223      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
00003078  E54E                    3224      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
0000307A  E04E                    3225      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
0000307C  EA4E                    3226      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
0000307E                          3227      
0000307E  E14F                    3228      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00003080  EB4F                    3229      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00003082  E04F                    3230      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00003084  EA4F                    3231      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00003086                          3232      
00003086                          3233      *error checking 
00003086  BC3C 0001               3234      CMP.B   #%001,D6
0000308A  6700 F682               3235      BEQ     FLAGINVALID 
0000308E  BC3C 0000               3236      CMP.B   #%000,D6
00003092  6700 F67A               3237      BEQ     FLAGINVALID 
00003096  BC3C 0007               3238      CMP.B   #%111,D6
0000309A  6600 000A               3239      BNE     continue12
0000309E  BE3C 0004               3240      CMP.B   #%100,D7
000030A2  6700 F66A               3241      BEQ     FLAGINVALID 
000030A6                          3242  
000030A6                          3243  continue12     
000030A6  CCFC 0006               3244      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
000030AA  4EB4 6000               3245      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
000030AE                          3246      
000030AE  4E75                    3247      RTS
000030B0                          3248      
000030B0                          3249  LSd_v2  *REGISTER SHIFT
000030B0  49F9 000034EA           3250      LEA     addressing_mode,A4  *load the jump table for addressing_mode
000030B6                          3251      
000030B6  4286                    3252      CLR.L   D6          *ZERO OUT D6
000030B8  4287                    3253      CLR.L   D7          *ZERO OUT D7
000030BA  2C03                    3254      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
000030BC  2E03                    3255      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
000030BE                          3256      *getting the source mode and register
000030BE  E14E                    3257      LSL.W   #8,D6
000030C0  E54E                    3258      LSL.W   #2,D6
000030C2  E04E                    3259      LSR.W   #8,D6
000030C4  EE4E                    3260      LSR.W   #7,D6
000030C6  E94F                    3261      LSL.W   #4,D7
000030C8  E04F                    3262      LSR.W   #8,D7
000030CA  EA4F                    3263      LSR.W   #5,D7
000030CC                          3264      
000030CC  BC3C 0000               3265      CMP.B   #%0,D6
000030D0  6600 0018               3266      BNE     continue13
000030D4  16FC 0023               3267      MOVE.B  #'#',(A3)+
000030D8  45F9 00003820           3268      LEA     data_mode,A2    *load the jump table for data
000030DE  CEFC 0006               3269      MULU    #6,D7
000030E2  4EB2 7000               3270      JSR     0(A2,D7)
000030E6  6000 0010               3271      BRA     skip
000030EA                          3272      
000030EA                          3273  continue13
000030EA  4286                    3274      CLR.L   D6          *ZERO OUT D6
000030EC  1C3C 0000               3275      MOVE.B  #%000,D6
000030F0  CCFC 0006               3276      MULU    #6,D6
000030F4  4EB4 6000               3277      JSR     0(A4,D6)    
000030F8                          3278  skip    
000030F8  16FC 0020               3279      MOVE.B  #' ',(A3)+
000030FC  16FC 002C               3280      MOVE.B  #',',(A3)+
00003100                          3281      
00003100  4286                    3282      CLR.L   D6          *ZERO OUT D6
00003102  4287                    3283      CLR.L   D7          *ZERO OUT D7
00003104                          3284      *MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00003104  2E03                    3285      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00003106                          3286      
00003106                          3287      *getting the destination mode and register
00003106  1C3C 0000               3288      MOVE.B  #%000,D6    *MODE IS A DATA REGISTER
0000310A                          3289      
0000310A  E14F                    3290      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
0000310C  EB4F                    3291      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
0000310E  E04F                    3292      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00003110  EA4F                    3293      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00003112                          3294      
00003112  CCFC 0006               3295      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00003116  4EB4 6000               3296      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
0000311A                          3297      
0000311A  4E75                    3298      RTS
0000311C                          3299      
0000311C                          3300  ASd_v1  *MEMORY SHIFT
0000311C  49F9 000034EA           3301      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00003122                          3302      
00003122                          3303      *this one does not have source address. Syntax: ASd  <EA>
00003122                          3304      
00003122  4286                    3305      CLR.L   D6          *ZERO OUT D6
00003124  4287                    3306      CLR.L   D7          *ZERO OUT D7
00003126  2C03                    3307      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00003128  2E03                    3308      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
0000312A                          3309      
0000312A                          3310      *getting the destination mode and register
0000312A  E14E                    3311      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
0000312C  E54E                    3312      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
0000312E  E04E                    3313      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00003130  EA4E                    3314      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00003132                          3315      
00003132  E14F                    3316      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00003134  EB4F                    3317      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00003136  E04F                    3318      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00003138  EA4F                    3319      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
0000313A                          3320      
0000313A                          3321      *error checking 
0000313A  BC3C 0001               3322      CMP.B   #%001,D6
0000313E  6700 F5CE               3323      BEQ     FLAGINVALID 
00003142  BC3C 0000               3324      CMP.B   #%000,D6
00003146  6700 F5C6               3325      BEQ     FLAGINVALID 
0000314A  BC3C 0007               3326      CMP.B   #%111,D6
0000314E  6600 000A               3327      BNE     continue14
00003152  BE3C 0004               3328      CMP.B   #%100,D7
00003156  6700 F5B6               3329      BEQ     FLAGINVALID 
0000315A                          3330  
0000315A                          3331  continue14     
0000315A  CCFC 0006               3332      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
0000315E  4EB4 6000               3333      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00003162                          3334      
00003162  4E75                    3335      RTS
00003164                          3336      
00003164                          3337  ASd_v2  *REGISTER SHIFT
00003164  49F9 000034EA           3338      LEA     addressing_mode,A4  *load the jump table for addressing_mode
0000316A                          3339      
0000316A  4286                    3340      CLR.L   D6          *ZERO OUT D6
0000316C  4287                    3341      CLR.L   D7          *ZERO OUT D7
0000316E  2C03                    3342      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00003170  2E03                    3343      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00003172                          3344      *getting the source mode and register
00003172  E14E                    3345      LSL.W   #8,D6
00003174  E54E                    3346      LSL.W   #2,D6
00003176  E04E                    3347      LSR.W   #8,D6
00003178  EE4E                    3348      LSR.W   #7,D6
0000317A  E94F                    3349      LSL.W   #4,D7
0000317C  E04F                    3350      LSR.W   #8,D7
0000317E  EA4F                    3351      LSR.W   #5,D7
00003180                          3352      
00003180  BC3C 0000               3353      CMP.B   #%0,D6
00003184  6600 0018               3354      BNE     continue15
00003188  16FC 0023               3355      MOVE.B  #'#',(A3)+
0000318C  45F9 00003820           3356      LEA     data_mode,A2    *load the jump table for data
00003192  CEFC 0006               3357      MULU    #6,D7
00003196  4EB2 7000               3358      JSR     0(A2,D7)
0000319A  6000 0010               3359      BRA     skip1
0000319E                          3360      
0000319E                          3361  continue15
0000319E  4286                    3362      CLR.L   D6          *ZERO OUT D6
000031A0  1C3C 0000               3363      MOVE.B  #%000,D6
000031A4  CCFC 0006               3364      MULU    #6,D6
000031A8  4EB4 6000               3365      JSR     0(A4,D6)    
000031AC                          3366  skip1    
000031AC  16FC 0020               3367      MOVE.B  #' ',(A3)+
000031B0  16FC 002C               3368      MOVE.B  #',',(A3)+
000031B4                          3369      
000031B4  4286                    3370      CLR.L   D6          *ZERO OUT D6
000031B6  4287                    3371      CLR.L   D7          *ZERO OUT D7
000031B8                          3372      ;MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
000031B8  2E03                    3373      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
000031BA                          3374      
000031BA                          3375      *getting the destination mode and register
000031BA  1C3C 0000               3376      MOVE.B  #%000,D6    *MODE IS A DATA REGISTER
000031BE                          3377      
000031BE  E14F                    3378      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
000031C0  EB4F                    3379      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
000031C2  E04F                    3380      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
000031C4  EA4F                    3381      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
000031C6                          3382      
000031C6  CCFC 0006               3383      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
000031CA  4EB4 6000               3384      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
000031CE                          3385      
000031CE  4E75                    3386      RTS
000031D0                          3387      
000031D0                          3388  ROd_v1  *MEMORY SHIFT
000031D0  49F9 000034EA           3389      LEA     addressing_mode,A4  *load the jump table for addressing_mode
000031D6                          3390      
000031D6                          3391      *this one does not have source address. Syntax: ASd  <EA>
000031D6                          3392      
000031D6  4286                    3393      CLR.L   D6          *ZERO OUT D6
000031D8  4287                    3394      CLR.L   D7          *ZERO OUT D7
000031DA  2C03                    3395      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
000031DC  2E03                    3396      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
000031DE                          3397      
000031DE                          3398      *getting the destination mode and register
000031DE  E14E                    3399      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
000031E0  E54E                    3400      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
000031E2  E04E                    3401      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
000031E4  EA4E                    3402      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
000031E6                          3403      
000031E6  E14F                    3404      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
000031E8  EB4F                    3405      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
000031EA  E04F                    3406      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
000031EC  EA4F                    3407      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
000031EE                          3408      
000031EE                          3409      *error checking 
000031EE  BC3C 0001               3410      CMP.B   #%001,D6
000031F2  6700 F51A               3411      BEQ     FLAGINVALID 
000031F6  BC3C 0000               3412      CMP.B   #%000,D6
000031FA  6700 F512               3413      BEQ     FLAGINVALID 
000031FE  BC3C 0007               3414      CMP.B   #%111,D6
00003202  6600 000A               3415      BNE     continue16
00003206  BE3C 0004               3416      CMP.B   #%100,D7
0000320A  6700 F502               3417      BEQ     FLAGINVALID 
0000320E                          3418  
0000320E                          3419  continue16     
0000320E  CCFC 0006               3420      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00003212  4EB4 6000               3421      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00003216                          3422      
00003216  4E75                    3423      RTS
00003218                          3424      
00003218                          3425  ROd_v2  *REGISTER SHIFT
00003218  49F9 000034EA           3426      LEA     addressing_mode,A4  *load the jump table for addressing_mode
0000321E                          3427      
0000321E  4286                    3428      CLR.L   D6          *ZERO OUT D6
00003220  4287                    3429      CLR.L   D7          *ZERO OUT D7
00003222  2C03                    3430      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00003224  2E03                    3431      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00003226                          3432      *getting the source mode and register
00003226  E14E                    3433      LSL.W   #8,D6
00003228  E54E                    3434      LSL.W   #2,D6
0000322A  E04E                    3435      LSR.W   #8,D6
0000322C  EE4E                    3436      LSR.W   #7,D6
0000322E  E94F                    3437      LSL.W   #4,D7
00003230  E04F                    3438      LSR.W   #8,D7
00003232  EA4F                    3439      LSR.W   #5,D7
00003234                          3440      
00003234  BC3C 0000               3441      CMP.B   #%0,D6
00003238  6600 0018               3442      BNE     continue17
0000323C  16FC 0023               3443      MOVE.B  #'#',(A3)+
00003240  45F9 00003820           3444      LEA     data_mode,A2    *load the jump table for data
00003246  CEFC 0006               3445      MULU    #6,D7
0000324A  4EB2 7000               3446      JSR     0(A2,D7)
0000324E  6000 0010               3447      BRA     skip2
00003252                          3448      
00003252                          3449  continue17
00003252  4286                    3450      CLR.L   D6          *ZERO OUT D6
00003254  1C3C 0000               3451      MOVE.B  #%000,D6
00003258  CCFC 0006               3452      MULU    #6,D6
0000325C  4EB4 6000               3453      JSR     0(A4,D6)    
00003260                          3454  skip2    
00003260  16FC 0020               3455      MOVE.B  #' ',(A3)+
00003264  16FC 002C               3456      MOVE.B  #',',(A3)+
00003268                          3457      
00003268  4286                    3458      CLR.L   D6          *ZERO OUT D6
0000326A  4287                    3459      CLR.L   D7          *ZERO OUT D7
0000326C                          3460      ;MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
0000326C  2E03                    3461      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
0000326E                          3462      
0000326E                          3463      *getting the destination mode and register
0000326E  1C3C 0000               3464      MOVE.B  #%000,D6    *MODE IS A DATA REGISTER
00003272                          3465      
00003272  E14F                    3466      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00003274  EB4F                    3467      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00003276  E04F                    3468      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00003278  EA4F                    3469      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
0000327A                          3470      
0000327A  CCFC 0006               3471      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
0000327E  4EB4 6000               3472      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00003282                          3473      
00003282  4E75                    3474      RTS
00003284                          3475  
00003284                          3476  BTST_v1     *Dn -> <EA>
00003284  49F9 000034EA           3477      LEA     addressing_mode,A4  *load the jump table for addressing_mode
0000328A                          3478      
0000328A  4286                    3479      CLR.L   D6          *ZERO OUT D6
0000328C  4287                    3480      CLR.L   D7          *ZERO OUT D7
0000328E                          3481      ;MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
0000328E  2E03                    3482      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00003290                          3483      *getting the source mode and register
00003290  1C3C 0000               3484      MOVE.B  #%000,D6
00003294                          3485      
00003294  E94F                    3486      LSL.W   #4,D7       *SHIFT TO THE LEFT 4
00003296  E04F                    3487      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00003298  EA4F                    3488      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
0000329A                          3489      
0000329A  CCFC 0006               3490      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
0000329E  4EB4 6000               3491      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
000032A2                          3492      
000032A2  16FC 0020               3493      MOVE.B  #' ',(A3)+
000032A6  16FC 002C               3494      MOVE.B  #',',(A3)+
000032AA                          3495      
000032AA  4286                    3496      CLR.L   D6          *ZERO OUT D6
000032AC  4287                    3497      CLR.L   D7          *ZERO OUT D7
000032AE  2C03                    3498      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
000032B0  2E03                    3499      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
000032B2                          3500      
000032B2                          3501      *getting the destination mode and register
000032B2  E14E                    3502      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
000032B4  E54E                    3503      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
000032B6  E04E                    3504      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
000032B8  EA4E                    3505      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
000032BA                          3506  
000032BA  E14F                    3507      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
000032BC  EB4F                    3508      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
000032BE  E04F                    3509      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
000032C0  EA4F                    3510      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
000032C2                          3511      
000032C2                          3512      *error checking
000032C2  BC3C 0001               3513      CMP.B   #%001,D6    
000032C6  6700 F446               3514      BEQ     FLAGINVALID 
000032CA                          3515       
000032CA  CCFC 0006               3516      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
000032CE  4EB4 6000               3517      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
000032D2                          3518      
000032D2  4E75                    3519      RTS
000032D4                          3520          
000032D4                          3521  BTST_v2     *#<DATA> -> <EA>
000032D4  49F9 000034EA           3522      LEA     addressing_mode,A4  *load the jump table for addressing_mode
000032DA                          3523      
000032DA  4286                    3524      CLR.L   D6          *ZERO OUT D6
000032DC  4287                    3525      CLR.L   D7          *ZERO OUT D7
000032DE  2C03                    3526      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
000032E0  2E03                    3527      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
000032E2                          3528      *getting the source mode and register
000032E2  16FC 0023               3529      MOVE.B  #'#',(A3)+
000032E6  4EB9 00003774           3530      JSR     getWord
000032EC                          3531      
000032EC  16FC 0020               3532      MOVE.B  #' ',(A3)+
000032F0  16FC 002C               3533      MOVE.B  #',',(A3)+
000032F4                          3534      
000032F4  4286                    3535      CLR.L   D6          *ZERO OUT D6
000032F6  4287                    3536      CLR.L   D7          *ZERO OUT D7
000032F8  2C03                    3537      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
000032FA  2E03                    3538      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
000032FC                          3539      
000032FC                          3540      *getting the destination mode and register
000032FC  E14E                    3541      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
000032FE  E54E                    3542      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
00003300  E04E                    3543      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00003302  EA4E                    3544      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00003304                          3545  
00003304  E14F                    3546      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00003306  EB4F                    3547      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00003308  E04F                    3548      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
0000330A  EA4F                    3549      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
0000330C                          3550      
0000330C                          3551      *error checking
0000330C  BC3C 0001               3552      CMP.B   #%001,D6    
00003310  6700 F3FC               3553      BEQ     FLAGINVALID 
00003314                          3554       
00003314  CCFC 0006               3555      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00003318  4EB4 6000               3556      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
0000331C                          3557      
0000331C  4E75                    3558      RTS
0000331E                          3559      
0000331E                          3560  CMP
0000331E  49F9 000034EA           3561      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00003324                          3562      
00003324  4286                    3563      CLR.L   D6          *ZERO OUT D6
00003326  4287                    3564      CLR.L   D7          *ZERO OUT D7
00003328  2C03                    3565      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
0000332A  2E03                    3566      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
0000332C                          3567      *getting the source mode and register
0000332C  E14E                    3568      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
0000332E  E54E                    3569      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
00003330  E04E                    3570      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
00003332  EA4E                    3571      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
00003334                          3572      
00003334  E14F                    3573      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00003336  EB4F                    3574      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00003338  E04F                    3575      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
0000333A  EA4F                    3576      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
0000333C                          3577      
0000333C  CCFC 0006               3578      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00003340  4EB4 6000               3579      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00003344                          3580      
00003344  16FC 0020               3581      MOVE.B  #' ',(A3)+
00003348  16FC 002C               3582      MOVE.B  #',',(A3)+
0000334C                          3583      
0000334C  4286                    3584      CLR.L   D6          *ZERO OUT D6
0000334E  4287                    3585      CLR.L   D7          *ZERO OUT D7
00003350                          3586      ;MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00003350  2E03                    3587      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00003352                          3588      
00003352                          3589      *getting the destination mode and register
00003352  1C3C 0000               3590      MOVE.B  #%000,D6    *DESTINATION IS A DATA REGISTER
00003356                          3591  
00003356  E94F                    3592      LSL.W   #4,D7       *SHIFT TO THE LEFT 4
00003358  E04F                    3593      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
0000335A  EA4F                    3594      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
0000335C                          3595      
0000335C                          3596       
0000335C  CCFC 0006               3597      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
00003360  4EB4 6000               3598      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
00003364                          3599      
00003364  4E75                    3600      RTS
00003366                          3601  
00003366                          3602  
00003366                          3603  CMPI
00003366  49F9 000034EA           3604          LEA     addressing_mode,A4  *load the jump table for addressing_mode
0000336C                          3605      
0000336C  4286                    3606      CLR.L   D6          *ZERO OUT D6
0000336E  4287                    3607      CLR.L   D7          *ZERO OUT D7
00003370  2C03                    3608      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00003372  2E03                    3609      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00003374                          3610      *getting the source mode and register
00003374  E14E                    3611      LSL.W   #8,D6
00003376  E04E                    3612      LSR.W   #8,D6
00003378  EC4E                    3613      LSR.W   #6,D6
0000337A                          3614  
0000337A  16FC 0023               3615      MOVE.B  #'#',(A3)+
0000337E  BC3C 0002               3616      CMP.B   #%10,D6
00003382  6700 001C               3617      BEQ     jmp4
00003386  BC3C 0000               3618      CMP.B   #%00,D6
0000338A  6700 000A               3619      BEQ     jmp5
0000338E  BC3C 0001               3620      CMP.B   #%01,D6
00003392  6700 0002               3621      BEQ     jmp5
00003396                          3622  
00003396  4EB9 00003774           3623  jmp5    JSR     getWord
0000339C  6000 0008               3624          BRA     jmp6
000033A0                          3625      
000033A0  4EB9 000037A4           3626  jmp4    JSR     getLong
000033A6                          3627      
000033A6                          3628  jmp6
000033A6  16FC 0020               3629      MOVE.B  #' ',(A3)+
000033AA  16FC 002C               3630      MOVE.B  #',',(A3)+
000033AE                          3631      
000033AE  4286                    3632      CLR.L   D6          *ZERO OUT D6
000033B0  4287                    3633      CLR.L   D7          *ZERO OUT D7
000033B2  2C03                    3634      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
000033B4  2E03                    3635      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
000033B6                          3636      
000033B6                          3637      *getting the destination mode and register
000033B6  E14E                    3638      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
000033B8  E54E                    3639      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
000033BA  E04E                    3640      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
000033BC  EA4E                    3641      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
000033BE                          3642      
000033BE  E14F                    3643      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
000033C0  EB4F                    3644      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
000033C2  E04F                    3645      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
000033C4  EA4F                    3646      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
000033C6                          3647      
000033C6                          3648      *error checking
000033C6  BC3C 0001               3649      CMP.B   #%001,D6    
000033CA  6700 F342               3650      BEQ     FLAGINVALID 
000033CE  BC3C 0007               3651      CMP.B   #%111,D6
000033D2  6600 000A               3652      BNE     continue18
000033D6  BE3C 0004               3653      CMP.B   #%100,D7
000033DA  6700 F332               3654      BEQ     FLAGINVALID 
000033DE                          3655      
000033DE                          3656      
000033DE                          3657  continue18    
000033DE  CCFC 0006               3658      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
000033E2  4EB4 6000               3659      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
000033E6                          3660      
000033E6  4E75                    3661      RTS
000033E8                          3662  
000033E8                          3663  
000033E8                          3664  CMPA
000033E8  49F9 000034EA           3665      LEA     addressing_mode,A4  *load the jump table for addressing_mode
000033EE                          3666      
000033EE  4286                    3667      CLR.L   D6          *ZERO OUT D6
000033F0  4287                    3668      CLR.L   D7          *ZERO OUT D7
000033F2  2C03                    3669      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
000033F4  2E03                    3670      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
000033F6                          3671      *getting the source mode and register
000033F6  E14E                    3672      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
000033F8  E54E                    3673      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
000033FA  E04E                    3674      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
000033FC  EA4E                    3675      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
000033FE                          3676      
000033FE  E14F                    3677      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
00003400  EB4F                    3678      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
00003402  E04F                    3679      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00003404  EA4F                    3680      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00003406                          3681      
00003406  CCFC 0006               3682      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
0000340A  4EB4 6000               3683      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
0000340E                          3684      
0000340E  16FC 0020               3685      MOVE.B  #' ',(A3)+
00003412  16FC 002C               3686      MOVE.B  #',',(A3)+
00003416                          3687      
00003416  4286                    3688      CLR.L   D6          *ZERO OUT D6
00003418  4287                    3689      CLR.L   D7          *ZERO OUT D7
0000341A                          3690      ;MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
0000341A  2E03                    3691      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
0000341C                          3692      
0000341C                          3693      *getting the destination mode and register
0000341C  1C3C 0001               3694      MOVE.B  #%001,D6    *DESTINATION IS A DATA REGISTER
00003420                          3695  
00003420  E94F                    3696      LSL.W   #4,D7       *SHIFT TO THE LEFT 4
00003422  E04F                    3697      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
00003424  EA4F                    3698      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
00003426                          3699      
00003426                          3700       
00003426  CCFC 0006               3701      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
0000342A  4EB4 6000               3702      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
0000342E                          3703      
0000342E  4E75                    3704      RTS
00003430                          3705  
00003430                          3706  
00003430                          3707  Bcc
00003430  4286                    3708      CLR.L   D6          *ZERO OUT D6
00003432  4287                    3709      CLR.L   D7          *ZERO OUT D7
00003434  2C03                    3710      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
00003436  2E03                    3711      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00003438                          3712      
00003438  E14F                    3713      LSL.W   #8,D7
0000343A  E04F                    3714      LSR.W   #8,D7
0000343C                          3715      
0000343C  16FC 0024               3716      MOVE.B #'$',(A3)+ 
00003440  BE3C 0000               3717      CMP.B #$0,D7 * Does the branch specify a 16 bit offset?
00003444  6700 003A               3718      BEQ branchw 
00003448  BE3C 00FF               3719      CMP.B #$FF,D7 * Does the branch specify a 32 bit offset?
0000344C  6700 003A               3720      BEQ branchl 
00003450  4EB9 0000375C           3721      JSR getByte * Branch must be default 8 bit offset
00003456  4E75                    3722      RTS
00003458                          3723       
00003458                          3724      
00003458                          3725  BRANCH
00003458  4286                    3726      CLR.L   D6          *ZERO OUT D6
0000345A  4287                    3727      CLR.L   D7          *ZERO OUT D7
0000345C  2C03                    3728      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
0000345E  2E03                    3729      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
00003460                          3730      
00003460  E14F                    3731      LSL.W   #8,D7
00003462  E04F                    3732      LSR.W   #8,D7
00003464                          3733      
00003464  16FC 0024               3734      MOVE.B #'$',(A3)+ 
00003468  BE3C 0000               3735      CMP.B #$0,D7 * Does the branch specify a 16 bit offset?
0000346C  6700 0012               3736      BEQ branchw 
00003470  BE3C 00FF               3737      CMP.B #$FF,D7 * Does the branch specify a 32 bit offset?
00003474  6700 0012               3738      BEQ branchl 
00003478  4EB9 0000375C           3739      JSR getByte * Branch must be default 8 bit offset
0000347E  4E75                    3740      RTS
00003480                          3741      
00003480                          3742  branchw 
00003480  4EB9 00003774           3743      JSR getword * Get the 16 bit offset word
00003486  4E75                    3744      RTS
00003488                          3745  branchl 
00003488  4EB9 000037A4           3746      JSR getlong * Get the 32 bit offset long
0000348E  4E75                    3747      RTS
00003490                          3748      
00003490                          3749  JSR
00003490  49F9 000034EA           3750      LEA     addressing_mode,A4  *load the jump table for addressing_mode
00003496                          3751      
00003496  4286                    3752      CLR.L   D6          *ZERO OUT D6
00003498  4287                    3753      CLR.L   D7          *ZERO OUT D7
0000349A  2C03                    3754      MOVE.L  D3,D6       *COPY DOWN THE WHOLE 16BIT BINARY TO D6
0000349C  2E03                    3755      MOVE.L  D3,D7       *COPY DOWN THE WHOLE 16BIT BINARY TO D7
0000349E                          3756      *getting the destination mode and register
0000349E  E14E                    3757      LSL.W   #8,D6       *SHIFT TO THE LEFT 8
000034A0  E54E                    3758      LSL.W   #2,D6       *SHIFT TO THE LEFT 2
000034A2  E04E                    3759      LSR.W   #8,D6       *SHIFT TO THE RIGHT 8
000034A4  EA4E                    3760      LSR.W   #5,D6       *SHIFT TO THE RIGHT 5
000034A6                          3761      
000034A6  E14F                    3762      LSL.W   #8,D7       *SHIFT TO THE LEFT 8
000034A8  EB4F                    3763      LSL.W   #5,D7       *SHIFT TO THE LEFT 5
000034AA  E04F                    3764      LSR.W   #8,D7       *SHIFT TO THE RIGHT 8
000034AC  EA4F                    3765      LSR.W   #5,D7       *SHIFT TO THE RIGHT 5
000034AE                          3766      
000034AE                          3767      *error checking
000034AE  BC3C 0000               3768      CMP.B   #%000,D6    
000034B2  6700 F25A               3769      BEQ     FLAGINVALID
000034B6  BC3C 0001               3770      CMP.B   #%001,D6    
000034BA  6700 F252               3771      BEQ     FLAGINVALID
000034BE  BC3C 0003               3772      CMP.B   #%011,D6    
000034C2  6700 F24A               3773      BEQ     FLAGINVALID
000034C6  BC3C 0004               3774      CMP.B   #%100,D6    
000034CA  6700 F242               3775      BEQ     FLAGINVALID
000034CE  BC3C 0007               3776      CMP.B   #%111,D6
000034D2  6600 000A               3777      BNE     continue19
000034D6  BE3C 0004               3778      CMP.B   #%100,D7
000034DA  6700 F232               3779      BEQ     FLAGINVALID
000034DE                          3780      
000034DE                          3781  continue19
000034DE  CCFC 0006               3782      MULU    #6,D6       *FORM OFFSET - SEE ADDENDUM
000034E2  4EB4 6000               3783      JSR     0(A4,D6)    *JUMP INDIRECT WITH INDEX
000034E6  4E75                    3784      RTS
000034E8                          3785      
000034E8                          3786  RTS
000034E8  4E75                    3787      RTS
000034EA                          3788   
000034EA                          3789  addressing_mode 
000034EA  4EF9 0000351A           3790      JMP addresing_mode000 * Register is Dn
000034F0  4EF9 0000352E           3791      JMP addresing_mode001 * Register is An
000034F6  4EF9 00003542           3792      JMP addresing_mode010 * Register is (An)
000034FC  4EF9 0000355E           3793      JMP addresing_mode011 * Register is (An)+
00003502  4EF9 0000357E           3794      JMP addresing_mode100 * Register is -(An)
00003508  4EF9 0000359E           3795      JMP addresing_mode101 * Register is (d16,An)
0000350E  4EF9 000035A4           3796      JMP addresing_mode110 * Register is (d8,An,Xn)
00003514  4EF9 000035AA           3797      JMP addresing_mode111 * Register is (XXX).W or (XXX).L
0000351A                          3798      
0000351A                          3799  addresing_mode000
0000351A  45F9 000035BA           3800      LEA     register_mode,A2    *load the jump table for register_mode
00003520  16FC 0044               3801      MOVE.B  #'D',(A3)+
00003524  CEFC 0006               3802      MULU    #6,D7
00003528  4EB2 7000               3803      JSR     0(A2,D7)    
0000352C  4E75                    3804      RTS
0000352E                          3805      
0000352E                          3806  addresing_mode001
0000352E  45F9 000035BA           3807      LEA     register_mode,A2    *load the jump table for register_mode
00003534  16FC 0041               3808      MOVE.B  #'A',(A3)+
00003538  CEFC 0006               3809      MULU    #6,D7
0000353C  4EB2 7000               3810      JSR     0(A2,D7)
00003540  4E75                    3811      RTS
00003542                          3812      
00003542                          3813  addresing_mode010
00003542  45F9 000035BA           3814      LEA     register_mode,A2    *load the jump table for register_mode
00003548  16FC 0028               3815      MOVE.B  #'(',(A3)+
0000354C  16FC 0041               3816      MOVE.B  #'A',(A3)+
00003550  CEFC 0006               3817      MULU    #6,D7
00003554  4EB2 7000               3818      JSR     0(A2,D7)
00003558  16FC 0029               3819      MOVE.B  #')',(A3)+
0000355C  4E75                    3820      RTS
0000355E                          3821      
0000355E                          3822  addresing_mode011
0000355E  45F9 000035BA           3823      LEA     register_mode,A2    *load the jump table for register_mode
00003564  16FC 0028               3824      MOVE.B  #'(',(A3)+
00003568  16FC 0041               3825      MOVE.B  #'A',(A3)+
0000356C  CEFC 0006               3826      MULU    #6,D7
00003570  4EB2 7000               3827      JSR     0(A2,D7)
00003574  16FC 0029               3828      MOVE.B  #')',(A3)+
00003578  16FC 002B               3829      MOVE.B  #'+',(A3)+
0000357C  4E75                    3830      RTS
0000357E                          3831      
0000357E                          3832  addresing_mode100
0000357E  45F9 000035BA           3833      LEA     register_mode,A2    *load the jump table for register_mode
00003584  16FC 002D               3834      MOVE.B  #'-',(A3)+
00003588  16FC 0028               3835      MOVE.B  #'(',(A3)+
0000358C  16FC 0041               3836      MOVE.B  #'A',(A3)+
00003590  CEFC 0006               3837      MULU    #6,D7
00003594  4EB2 7000               3838      JSR     0(A2,D7)
00003598  16FC 0029               3839      MOVE.B  #')',(A3)+
0000359C  4E75                    3840      RTS
0000359E                          3841      
0000359E                          3842  addresing_mode101
0000359E  6000 F16E               3843      BRA     FLAGINVALID
000035A2  4E75                    3844      RTS            * Nothing to return!
000035A4                          3845      
000035A4                          3846  addresing_mode110
000035A4  6000 F168               3847      BRA     FLAGINVALID
000035A8  4E75                    3848      RTS            * Nothing to return!
000035AA                          3849  
000035AA                          3850  addresing_mode111
000035AA  45F9 0000361A           3851      LEA     ab_mode,A2  * load in the absolute address table
000035B0  CEFC 0006               3852      MULU    #6,D7
000035B4  4EB2 7000               3853      JSR     0(A2,D7)
000035B8  4E75                    3854      RTS
000035BA                          3855      
000035BA                          3856  register_mode 
000035BA  4EF9 000035EA           3857      JMP register_mode000 * Register is 0
000035C0  4EF9 000035F0           3858      JMP register_mode001 * Register is 1
000035C6  4EF9 000035F6           3859      JMP register_mode010 * Register is 2
000035CC  4EF9 000035FC           3860      JMP register_mode011 * Register is 3
000035D2  4EF9 00003602           3861      JMP register_mode100 * Register is 4
000035D8  4EF9 00003608           3862      JMP register_mode101 * Register is 5
000035DE  4EF9 0000360E           3863      JMP register_mode110 * Register is 6
000035E4  4EF9 00003614           3864      JMP register_mode111 * Register is 7
000035EA                          3865      
000035EA                          3866  register_mode000 
000035EA  16FC 0030               3867      MOVE.B #'0',(A3)+ * Prints 0 for the register number 
000035EE  4E75                    3868      RTS   
000035F0                          3869  register_mode001 
000035F0  16FC 0031               3870      MOVE.B #'1',(A3)+ * Prints 1 for the register number
000035F4  4E75                    3871      RTS   
000035F6                          3872  register_mode010 
000035F6  16FC 0032               3873      MOVE.B #'2',(A3)+ * Prints 2 for the register number
000035FA  4E75                    3874      RTS
000035FC                          3875  register_mode011 
000035FC  16FC 0033               3876      MOVE.B #'3',(A3)+ * Prints 3 for the register number
00003600  4E75                    3877      RTS
00003602                          3878  register_mode100 
00003602  16FC 0034               3879      MOVE.B #'4',(A3)+ * Prints 4 for the register number
00003606  4E75                    3880      RTS
00003608                          3881  register_mode101 
00003608  16FC 0035               3882      MOVE.B #'5',(A3)+ * Prints 5 for the register number
0000360C  4E75                    3883      RTS
0000360E                          3884  register_mode110 
0000360E  16FC 0036               3885      MOVE.B #'6',(A3)+ * Prints 6 for the register number
00003612  4E75                    3886      RTS
00003614                          3887  register_mode111 
00003614  16FC 0037               3888      MOVE.B #'7',(A3)+ * Prints 7 for the register number
00003618  4E75                    3889      RTS
0000361A                          3890      
0000361A                          3891  ab_mode 
0000361A  4EF9 0000364A           3892      JMP ab_mode000 * Register mode is 000
00003620  4EF9 0000368A           3893      JMP ab_mode001 * Register mode is 001
00003626  4EF9 0000371E           3894      JMP ab_mode010 * Register mode is 010
0000362C  4EF9 00003724           3895      JMP ab_mode011 * Register mode is 011
00003632  4EF9 00003702           3896      JMP ab_mode100 * Register mode is 100
00003638  4EF9 0000372A           3897      JMP ab_mode101 * Register mode is 101
0000363E  4EF9 00003730           3898      JMP ab_mode110 * Register mode is 110
00003644  4EF9 00003736           3899      JMP ab_mode111 * Register mode is 111    
0000364A                          3900  
0000364A                          3901  ab_mode000 
0000364A  4286                    3902      CLR.L   D6
0000364C  16FC 0024               3903      MOVE.B  #'$',(A3)+
00003650  3C15                    3904      MOVE.W  (A5),D6
00003652  E04E                    3905      LSR.W   #8,D6
00003654  E84E                    3906      LSR.W   #4,D6
00003656  4EB9 0000373C           3907      JSR     print_absoluteAdd 
0000365C  3C15                    3908      MOVE.W  (A5),D6
0000365E  E94E                    3909      LSL.W   #4,D6
00003660  E04E                    3910      LSR.W   #8,D6
00003662  E84E                    3911      LSR.W   #4,D6
00003664  4EB9 0000373C           3912      JSR     print_absoluteAdd
0000366A  3C15                    3913      MOVE.W  (A5),D6
0000366C  E14E                    3914      LSL.W   #8,D6
0000366E  E04E                    3915      LSR.W   #8,D6
00003670  E84E                    3916      LSR.W   #4,D6
00003672  4EB9 0000373C           3917      JSR     print_absoluteAdd
00003678  3C1D                    3918      MOVE.W  (A5)+,D6
0000367A  E14E                    3919      LSL.W   #8,D6
0000367C  E94E                    3920      LSL.W   #4,D6
0000367E  E04E                    3921      LSR.W   #8,D6
00003680  E84E                    3922      LSR.W   #4,D6
00003682  4EB9 0000373C           3923      JSR     print_absoluteAdd
00003688  4E75                    3924      RTS
0000368A                          3925  ab_mode001 
0000368A  4286                    3926      CLR.L   D6
0000368C  16FC 0024               3927      MOVE.B  #'$',(A3)+
00003690  3C15                    3928      MOVE.W  (A5),D6
00003692  E04E                    3929      LSR.W   #8,D6
00003694  E84E                    3930      LSR.W   #4,D6
00003696  4EB9 0000373C           3931      JSR     print_absoluteAdd 
0000369C  3C15                    3932      MOVE.W  (A5),D6
0000369E  E94E                    3933      LSL.W   #4,D6
000036A0  E04E                    3934      LSR.W   #8,D6
000036A2  E84E                    3935      LSR.W   #4,D6
000036A4  4EB9 0000373C           3936      JSR     print_absoluteAdd
000036AA  3C15                    3937      MOVE.W  (A5),D6
000036AC  E14E                    3938      LSL.W   #8,D6
000036AE  E04E                    3939      LSR.W   #8,D6
000036B0  E84E                    3940      LSR.W   #4,D6
000036B2  4EB9 0000373C           3941      JSR     print_absoluteAdd
000036B8  3C1D                    3942      MOVE.W  (A5)+,D6
000036BA  E14E                    3943      LSL.W   #8,D6
000036BC  E94E                    3944      LSL.W   #4,D6
000036BE  E04E                    3945      LSR.W   #8,D6
000036C0  E84E                    3946      LSR.W   #4,D6
000036C2  4EB9 0000373C           3947      JSR     print_absoluteAdd
000036C8  3C15                    3948      MOVE.W  (A5),D6
000036CA  E04E                    3949      LSR.W   #8,D6
000036CC  E84E                    3950      LSR.W   #4,D6
000036CE  4EB9 0000373C           3951      JSR     print_absoluteAdd 
000036D4  3C15                    3952      MOVE.W  (A5),D6
000036D6  E94E                    3953      LSL.W   #4,D6
000036D8  E04E                    3954      LSR.W   #8,D6
000036DA  E84E                    3955      LSR.W   #4,D6
000036DC  4EB9 0000373C           3956      JSR     print_absoluteAdd
000036E2  3C15                    3957      MOVE.W  (A5),D6
000036E4  E14E                    3958      LSL.W   #8,D6
000036E6  E04E                    3959      LSR.W   #8,D6
000036E8  E84E                    3960      LSR.W   #4,D6
000036EA  4EB9 0000373C           3961      JSR     print_absoluteAdd
000036F0  3C1D                    3962      MOVE.W  (A5)+,D6
000036F2  E94E                    3963      LSL.W   #4,D6
000036F4  E14E                    3964      LSL.W   #8,D6
000036F6  E04E                    3965      LSR.W   #8,D6
000036F8  E84E                    3966      LSR.W   #4,D6
000036FA  4EB9 0000373C           3967      JSR     print_absoluteAdd
00003700  4E75                    3968      RTS
00003702                          3969  ab_mode100 
00003702  16FC 0023               3970      MOVE.B  #'#',(A3)+   
00003706  BA3C 0001               3971      CMP.B   #%1,D5
0000370A  6700 000A               3972      BEQ     longhelper
0000370E  4EB9 00003774           3973      JSR     getWord
00003714  4E75                    3974      RTS
00003716                          3975  longhelper
00003716  4EB9 000037A4           3976      JSR     getLong
0000371C  4E75                    3977      RTS    
0000371E                          3978      
0000371E                          3979  ab_mode010 
0000371E  6000 EFEE               3980      BRA     FLAGINVALID
00003722  4E75                    3981      RTS            * Nothing to return!
00003724                          3982  ab_mode011 
00003724  6000 EFE8               3983      BRA     FLAGINVALID
00003728  4E75                    3984      RTS            * Nothing to return!
0000372A                          3985  ab_mode101 
0000372A  6000 EFE2               3986      BRA     FLAGINVALID
0000372E  4E75                    3987      RTS            * Nothing to return!
00003730                          3988  ab_mode110 
00003730  6000 EFDC               3989      BRA     FLAGINVALID
00003734  4E75                    3990      RTS            * Nothing to return!
00003736                          3991  ab_mode111 
00003736  6000 EFD6               3992      BRA     FLAGINVALID
0000373A  4E75                    3993      RTS            * Nothing to return!
0000373C                          3994  
0000373C                          3995  print_absoluteAdd 
0000373C  BC3C 000A               3996      CMP.B #$0A,D6 * Check to see if it's a number
00003740  6D00 000A               3997      BLT num       * It's a number, print out in ASCII
00003744  BC3C 0009               3998      CMP.B #$9,D6  * Check to see if it's a letter
00003748  6E00 000A               3999      BGT char      * It's a letter, print out in ASCII
0000374C                          4000  num 
0000374C  0606 0030               4001      ADDI.B #48,D6 * Add 48 to print in ASCII
00003750  16C6                    4002      MOVE.B D6,(A3)+ 
00003752  4E75                    4003      RTS
00003754                          4004  char
00003754  0606 0037               4005      ADDI.B #55,D6 * Add 55 to print in ASCII
00003758  16C6                    4006      MOVE.B D6,(A3)+ 
0000375A  4E75                    4007      RTS
0000375C                          4008      
0000375C                          4009  getByte
0000375C  3C07                    4010      MOVE.W  D7,D6
0000375E  0246 00FF               4011      ANDI.W  #$00FF,D6
00003762  E84E                    4012      LSR.W   #4,D6
00003764  4EB8 373C               4013      JSR     print_absoluteAdd
00003768  3C07                    4014      MOVE.W  D7,D6
0000376A  0246 000F               4015      ANDI.W  #$000F,D6
0000376E  4EB8 373C               4016      JSR     print_absoluteAdd
00003772  4E75                    4017      RTS    
00003774                          4018  
00003774                          4019  getWord
00003774  4246                    4020      CLR     D6
00003776  3C15                    4021      MOVE.W  (A5),D6 * Load data from the next address
00003778  E04E                    4022      LSR.W   #8,D6 
0000377A  E84E                    4023      LSR.W   #4,D6 
0000377C  4EB8 373C               4024      JSR     print_absoluteAdd * Go encode and write the first character
00003780  3C15                    4025      MOVE.W  (A5),D6 * Reload data from the next address
00003782  0246 0FFF               4026      ANDI.W  #$0FFF,D6 
00003786  E04E                    4027      LSR.W   #8,D6 
00003788  4EB8 373C               4028      JSR     print_absoluteAdd * Go encode and write the second character
0000378C  3C15                    4029      MOVE.W  (A5),D6 * Reload data from the next address
0000378E  0246 00FF               4030      ANDI.W  #$00FF,D6 
00003792  E84E                    4031      LSR.W   #4,D6 
00003794  4EB8 373C               4032      JSR     print_absoluteAdd * Go encode and write the second character
00003798  3C1D                    4033      MOVE.W  (A5)+,D6  * Reload data from the next address      
0000379A  0246 000F               4034      ANDI.W  #$000F,D6 
0000379E  4EB8 373C               4035      JSR     print_absoluteAdd * Go encode and write the second character
000037A2  4E75                    4036      RTS 
000037A4                          4037  getLong
000037A4  4246                    4038      CLR     D6
000037A6  2C15                    4039      MOVE.L  (A5),D6 * Load data from the next address
000037A8  103C 001C               4040      MOVE.B  #28,D0
000037AC  E0AE                    4041      LSR.L   D0,D6  
000037AE  4EB8 373C               4042      JSR     print_absoluteAdd * Go encode and write the first character
000037B2  2C15                    4043      MOVE.L  (A5),D6 * Reload data from the next address
000037B4  0286 0FFFFFFF           4044      ANDI.L  #$0FFFFFFF,D6 * Mask out the first character
000037BA  103C 0018               4045      MOVE.B  #24,D0
000037BE  E0AE                    4046      LSR.L   D0,D6 * Get the second character
000037C0  4EB8 373C               4047      JSR     print_absoluteAdd * Go encode and write the third chracter
000037C4  2C15                    4048      MOVE.L  (A5),D6 * Reload data from the next address
000037C6  0286 00FFFFFF           4049      ANDI.L  #$00FFFFFF,D6 * Mask out the first two characters
000037CC  103C 0014               4050      MOVE.B  #20,D0
000037D0  E0AE                    4051      LSR.L   D0,D6  
000037D2  4EB8 373C               4052      JSR     print_absoluteAdd * Go encode and write the third chracter
000037D6  2C15                    4053      MOVE.L  (A5),D6 * Reload data from the next address
000037D8  0286 000FFFFF           4054      ANDI.L  #$000FFFFF,D6
000037DE  E08E                    4055      LSR.L   #8,D6 
000037E0  E08E                    4056      LSR.L   #8,D6 
000037E2  4EB8 373C               4057      JSR     print_absoluteAdd * Go encode and write the fourth chracter
000037E6  2C15                    4058      MOVE.L  (A5),D6 * Reload data from the next address
000037E8  0286 0000FFFF           4059      ANDI.L  #$0000FFFF,D6 
000037EE  E08E                    4060      LSR.L   #8,D6 
000037F0  E88E                    4061      LSR.L   #4,D6 
000037F2  4EB8 373C               4062      JSR     print_absoluteAdd * Go encode and write the fifth chracter
000037F6  2C15                    4063      MOVE.L  (A5),D6 * Reload data from the next address
000037F8  0286 00000FFF           4064      ANDI.L  #$00000FFF,D6 
000037FE  E08E                    4065      LSR.L   #8,D6 
00003800  4EB8 373C               4066      JSR     print_absoluteAdd * Go encode and write the sixth chracter
00003804  2C15                    4067      MOVE.L  (A5),D6 * Reload data from the next address
00003806  0286 000000FF           4068      ANDI.L  #$000000FF,D6 
0000380C  E88E                    4069      LSR.L   #4,D6 
0000380E  4EB8 373C               4070      JSR     print_absoluteAdd * Go encode and write the seventh chracter
00003812  2C1D                    4071      MOVE.L  (A5)+,D6 * Reload data from the next address
00003814  0286 0000000F           4072      ANDI.L  #$0000000F,D6 
0000381A  4EB8 373C               4073      JSR     print_absoluteAdd * Go encode and write the eigth chracter
0000381E  4E75                    4074      RTS 
00003820                          4075  
00003820                          4076  data_mode 
00003820  4EF9 00003850           4077      JMP data_mode000 * Register is 8
00003826  4EF9 00003856           4078      JMP data_mode001 * Register is 1
0000382C  4EF9 0000385C           4079      JMP data_mode010 * Register is 2
00003832  4EF9 00003862           4080      JMP data_mode011 * Register is 3
00003838  4EF9 00003868           4081      JMP data_mode100 * Register is 4
0000383E  4EF9 0000386E           4082      JMP data_mode101 * Register is 5
00003844  4EF9 00003874           4083      JMP data_mode110 * Register is 6
0000384A  4EF9 0000387A           4084      JMP data_mode111 * Register is 7
00003850                          4085      
00003850                          4086  data_mode000 
00003850  16FC 0038               4087      MOVE.B #'8',(A3)+ * Prints 0 for the register number 
00003854  4E75                    4088      RTS   
00003856                          4089  data_mode001 
00003856  16FC 0031               4090      MOVE.B #'1',(A3)+ * Prints 1 for the register number
0000385A  4E75                    4091      RTS   
0000385C                          4092  data_mode010 
0000385C  16FC 0032               4093      MOVE.B #'2',(A3)+ * Prints 2 for the register number
00003860  4E75                    4094      RTS
00003862                          4095  data_mode011 
00003862  16FC 0033               4096      MOVE.B #'3',(A3)+ * Prints 3 for the register number
00003866  4E75                    4097      RTS
00003868                          4098  data_mode100 
00003868  16FC 0034               4099      MOVE.B #'4',(A3)+ * Prints 4 for the register number
0000386C  4E75                    4100      RTS
0000386E                          4101  data_mode101 
0000386E  16FC 0035               4102      MOVE.B #'5',(A3)+ * Prints 5 for the register number
00003872  4E75                    4103      RTS
00003874                          4104  data_mode110 
00003874  16FC 0036               4105      MOVE.B #'6',(A3)+ * Prints 6 for the register number
00003878  4E75                    4106      RTS
0000387A                          4107  data_mode111 
0000387A  16FC 0037               4108      MOVE.B #'7',(A3)+ * Prints 7 for the register number
0000387E  4E75                    4109      RTS
00003880                          4110   
00003880                          4111  PRINT
00003880  43F9 00003890           4112          LEA     buffer,A1  
00003886  103C 000E               4113          MOVE.B  #14,D0
0000388A  4E4F                    4114          TRAP    #15 
0000388C  FFFF FFFF               4115      SIMHALT             ; halt simulator
00003890                          4116  
00003890                          4117  * Put variables and constants here
00003890                          4118  buffer      DS.B        80
000038E0= 00                      4119  EmptyStr    DC.B        '',0
000038E1= 31 30 30 30 20 20 ...   4120  INVALIDSTR  DC.B        '1000   DATA   $WXYZ',0
000038F5  =0000000D               4121  CR          EQU     $0D
000038F5  =0000000A               4122  LF          EQU     $0A
000038F5= 20 0D 0A                4123  INTRO       DC.B   ' ',CR,LF
000038F8= 20 20 5F 20 20 20 ...   4124              DC.B   '  _     _ _   _   _        ___           _ _                            ',CR,LF
00003942= 20 7C 20 7C 20 20 ...   4125              DC.B   ' | |   (_) |_| |_| | ___  |_ _|_ __   __| (_) __ _ _ __                 ',CR,LF
0000398C= 20 7C 20 7C 20 20 ...   4126              DC.B   ' | |   | | __| __| |/ _ \  | ||  _ \ / _` | |/ _` |  _ \                ',CR,LF
000039D6= 20 7C 20 7C 5F 5F ...   4127              DC.B   ' | |___| | |_| |_| |  __/  | || | | | (_| | | (_| | | | |               ',CR,LF
00003A20= 20 7C 5F 5F 5F 5F ...   4128              DC.B   ' |_____|_|\__|\__|_|\___| |___|_| |_|\__,_|_|\__,_|_| |_|               ',CR,LF
00003A6A= 20 20 20 20 20 20 ...   4129              DC.B   '                  _   ____  _         _____     _                _      ',CR,LF
00003AB4= 20 20 20 5F 5F 20 ...   4130              DC.B   '   __ _ _ __   __| | | __ )(_) __ _  |  ___| __(_) ___ _ __   __| |___  ',CR,LF
00003AFE= 20 20 2F 20 5F 60 ...   4131              DC.B   '  / _` |  _ \ / _` | |  _ \| |/ _` | | |_ |  __| |/ _ \  _ \ / _` / __| ',CR,LF
00003B48= 20 7C 20 28 5F 7C ...   4132              DC.B   ' | (_| | | | | (_| | | |_) | | (_| | |  _|| |  | |  __/ | | | (_| \__ \ ',CR,LF
00003B92= 20 20 5C 5F 5F 2C ...   4133              DC.B   '  \__,_|_| |_|\__,_| |____/|_|\__, | |_|  |_|  |_|\___|_| |_|\__,_|___/ ',CR,LF
00003BDC= 20 20 20 20 20 20 ...   4134              DC.B   '                              |___/                                     ',CR,LF
00003C26= 20 20 5F 5F 5F 5F ...   4135              DC.B   '  ____ ___ ____    _    ____ ____  _____ __  __ ____  _     _____ ____  ',CR,LF
00003C70= 20 7C 20 20 5F 20 ...   4136              DC.B   ' |  _ \_ _/ ___|  / \  / ___/ ___|| ____|  \/  | __ )| |   | ____|  _ \ ',CR,LF
00003CBA= 20 7C 20 7C 20 7C ...   4137              DC.B   ' | | | | |\___ \ / _ \ \___ \___ \|  _| | |\/| |  _ \| |   |  _| | |_) |',CR,LF
00003D04= 20 7C 20 7C 5F 7C ...   4138              DC.B   ' | |_| | | ___) / ___ \ ___) |__) | |___| |  | | |_) | |___| |___|  _ < ',CR,LF
00003D4E= 20 7C 5F 5F 5F 5F ...   4139              DC.B   ' |____/___|____/_/   \_\____/____/|_____|_|  |_|____/|_____|_____|_| \_\',CR,LF
00003D98= 20 20 20 20 20 20 ...   4140              DC.B   '                                                                        ',CR,LF,CR,LF,0
00003DE5                          4141  LINECOUNT   DS.B    1
00003DE6                          4142  STARTINPUT  DS.B    80                  
00003E36                          4143  ENDINPUT    DS.B    80                  
00003E86  =00007000               4144  MINSTART    EQU    $7000 MIN ADDRESS
00003E86  =00FFFFFE               4145  MAXEND      EQU    $00FFFFFE MAX ADDRESS
00003E86= 59 6F 75 20 6D 75 ...   4146  ODDADDRMSG  DC.B    'You must enter an even address. Try again!',CR,LF,0
00003EB3= 54 6F 6F 20 6C 6F ...   4147  TOOLOWMSG   DC.B    'Too low! Please enter an address >= $7000',CR,LF,0
00003EDF= 54 6F 6F 20 48 69 ...   4148  TOOHIGHMSG  DC.B    'Too High! Please enter an address <= $00FFFFFE',CR,LF,0    
00003F10= 45 6E 64 69 6E 67 ...   4149  HIGHLOWMSG  DC.B    'Ending address be lower than starting address!',CR,LF,0
00003F41= 45 6E 74 65 72 20 ...   4150  STARTADDRMS DC.B    'Enter an even starting address between $7000 and $00FFFFE(MUST BE CAPS): ',0
00003F8B= 45 6E 74 65 72 20 ...   4151  ENDADDRMSG  DC.B    'Enter an even ending address $7000 and $00FFFFE(MUST BE CAPS): ',0
00003FCB= 41 64 64 72 65 73 ...   4152  FAILMESSAGE DC.B    'Address entered is invalid. Please try again!',CR,LF,0
00003FFB= 20 20 20 20 5F 5F ...   4153  ENDMSG      DC.B   '    ____________________________________________________________    ',CR,LF
00004041= 20 20 20 28 20 20 ...   4154              DC.B   '   (                                               __           )   ',CR,LF
00004087= 20 20 20 7C 20 5F ...   4155              DC.B   '   | _____  _              _      __ __           |  |  _    _  |   ',CR,LF
000040CD= 20 20 20 7C 7C 5F ...   4156              DC.B   '   ||_   _|| |_  ___  ___ | |_   |  |  | ___  _ _ |  | (  \/ *) |   ',CR,LF
00004113= 20 20 20 7C 20 20 ...   4157              DC.B   '   |  | |  |   || . ||   ||  _|  |_   _|| . || | ||__|  \   */  |   ',CR,LF
00004159= 20 20 20 7C 20 20 ...   4158              DC.B   '   |  |_|  |_|_||__,||_|_||_,_|    |_|  |___||___||__|    \/    |   ',CR,LF
0000419F= 20 20 20 28 5F 20 ...   4159              DC.B   '   (_  _________________________________________________________)   ',CR,LF
000041E5= 20 20 20 20 20 5C ...   4160              DC.B   '     \/                                                             ',CR,LF
0000422B= 20 20 20 28 5C 5F ...   4161              DC.B   '   (\__/)                                                           ',CR,LF
00004271= 20 20 20 28 3D 5E ...   4162              DC.B   '   (=^_^)                                                           ',CR,LF
000042B7= 20 20 20 28 22 29 ...   4163              DC.B   '   (")_(")                                                          ',CR,LF,CR,LF,0
00004300= 52 65 61 63 68 20 ...   4164  ENDPROMPT   DC.B    'Reach the end!!!!! Press [r] to restart, or [q] to quit', CR, LF, 0
0000433A= 50 72 65 73 73 20 ...   4165  KEYENTER    DC.B    'Press [Enter] to Continue, [r] to restart, or [q] to quit', CR, LF, 0
00004376= 00000001                4166  BADBUFFER   DC.L    1
0000437A= 20 20 0D 0A 00          4167  END_LINE    DC.B    '  ', CR, LF, 0
0000437F                          4168      END    START        LAST LINE

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AB_MODE             361A
AB_MODE000          364A
AB_MODE001          368A
AB_MODE010          371E
AB_MODE011          3724
AB_MODE100          3702
AB_MODE101          372A
AB_MODE110          3730
AB_MODE111          3736
ADDA                2AB2
ADDALOP             1B7A
ADDAOP              1B9E
ADDAWOP             1B56
ADDB_V1OP           1A96
ADDB_V2OP           1AB6
ADDL_V1OP           1B16
ADDL_V2OP           1B36
ADDQ                2AFA
ADDQBOP             216A
ADDQLOP             21B2
ADDQWOP             218E
ADDRESING_MODE000   351A
ADDRESING_MODE001   352E
ADDRESING_MODE010   3542
ADDRESING_MODE011   355E
ADDRESING_MODE100   357E
ADDRESING_MODE101   359E
ADDRESING_MODE110   35A4
ADDRESING_MODE111   35AA
ADDRESSING_MODE     34EA
ADDW_V1OP           1AD6
ADDW_V2OP           1AF6
ADD_V1              2A02
ADD_V2              2A4A
ANDB_V1OP           1BB6
ANDB_V2OP           1BD6
ANDL_V1OP           1C36
ANDL_V2OP           1C56
ANDW_V1OP           1BF6
ANDW_V2OP           1C16
AND_V1              2DDC
AND_V2              2E2C
ASCHEX              10EA
ASD_V1              311C
ASD_V2              3164
ASHIFT_REGOP        18A2
ASLB_REGOP          25DE
ASLL_REGOP          261E
ASLW_REGOP          25FE
ASL_MEMOP           26E6
ASL_REGOP           269E
ASRB_REGOP          263E
ASRL_REGOP          267E
ASRW_REGOP          265E
ASR_MEMOP           26FA
ASR_REGOP           26C4
BADBUFFER           4376
BCC                 3430
BEQOP               1F5E
BHIOP               1F9A
BLTOP               1F86
BNEOP               1F72
BRANCH              3458
BRANCHL             3488
BRANCHW             3480
BRAOP               1FAE
BTST_V1             3284
BTST_V1OP           207E
BTST_V2             32D4
BTST_V2OP           2096
BUFFER              3890
CHAR                3754
CHECKLENGTH         111A
CMP                 331E
CMPA                33E8
CMPALOP             235A
CMPAWOP             2336
CMPBOP              22D6
CMPI                3366
CMPIBOP             226A
CMPILOP             22B2
CMPIWOP             228E
CMPLOP              2316
CMPWOP              22F6
COMEHERE            2C7C
CONTINUE            2AA8
CONTINUE10          2F9C
CONTINUE11          305E
CONTINUE12          30A6
CONTINUE13          30EA
CONTINUE14          315A
CONTINUE15          319E
CONTINUE16          320E
CONTINUE17          3252
CONTINUE18          33DE
CONTINUE19          34DE
CONTINUE2           2B50
CONTINUE3           2BB8
CONTINUE4           2CBA
CONTINUE5           2DB2
CONTINUE6           2E8A
CONTINUE7           2EFC
CONTINUE8           2F3C
CONTINUE9           301E
COUNTER             110C
CR                  D
DATA_MODE           3820
DATA_MODE000        3850
DATA_MODE001        3856
DATA_MODE010        385C
DATA_MODE011        3862
DATA_MODE100        3868
DATA_MODE101        386E
DATA_MODE110        3874
DATA_MODE111        387A
DIVS                2D14
DIVSOP              21E6
DONE                11C8
EMPTYSTR            38E0
END                 1424
ENDADDR             106E
ENDADDRMSG          3F8B
ENDGETKEY           1204
ENDINPUT            3E36
ENDMSG              3FFB
ENDOFPAGE           140A
ENDPROMPT           4300
END_LINE            437A
EOR                 2F46
EORBOP              220A
EORI                2FA6
EORIBOP             1D56
EORILOP             1D9E
EORIWOP             1D7A
EORLOP              224A
EORWOP              222A
EVENTEST            1136
EVENTESTFAIL        1150
FAILMESSAGE         3FCB
FLAGINVALID         270E
GETBYTE             375C
GETKEY              11CA
GETLONG             37A4
GETWORD             3774
GOHERE              2EBE
HANDLINGINVALIDS    1372
HELP111             2920
HELP112             281E
HELP113             28C4
HELP114             297A
HELP115             29E6
HIGHLOWCHECK        11A8
HIGHLOWFAIL         11B4
HIGHLOWMSG          3F10
INPUTFAIL           1132
INTRO               38F5
INVALIDSTR          38E1
JMP1                2FE0
JMP2                2FD6
JMP3                2FE6
JMP4                33A0
JMP5                3396
JMP6                33A6
JSR                 3490
JSROP               1F36
JTABLESETUP         143E
JUMP                2EC4
KEYENTER            433A
LEA                 2D64
LEAOP               21D6
LETTERCONV          10FC
LF                  A
LINECOUNT           3DE5
LONGHELPER          3716
LSD_V1              3068
LSD_V2              30B0
LSHIFT_REGOP        188C
LSLB_REGOP          24AE
LSLL_REGOP          24EE
LSLW_REGOP          24CE
LSL_MEMOP           25B6
LSL_REGOP           256E
LSRB_REGOP          250E
LSRL_REGOP          254E
LSRW_REGOP          252E
LSR_MEMOP           25CA
LSR_REGOP           2594
MAINLOOP            129A
MAXEND              FFFFFE
MEMSHIFT            1834
MINSTART            7000
MOVE                2716
MOVEA               2776
MOVEALOP            200A
MOVEAWOP            2056
MOVEBOP             1FC2
MOVELOP             1FE6
MOVEM_0L            2874
MOVEM_0OP           20AE
MOVEM_0W            27CE
MOVEM_0WOP          2122
MOVEM_1L            2996
MOVEM_1OP           20E8
MOVEM_1W            292A
MOVEM_1WOP          2146
MOVEWOP             2032
MULS                2CC4
MULSOP              1C76
MYDEST              2C82
NEG                 2F06
NEGBOP              1C9A
NEGLOP              1CD6
NEGWOP              1CB6
NEXT2               1046
NEXT3               105E
NEXTEND2            10A2
NEXTEND3            10BA
NOT                 3028
NOTBOP              1CF6
NOTLOP              1D36
NOTWOP              1D16
NUM                 374C
NUMCONV             1104
ODDADDRMSG          3E86
OPCODESETUP         128C
ORI                 2E94
ORIBOP              1A3A
ORILOP              1A76
ORIWOP              1A56
OUTERLOOP           1322
PRIME0000           1576
PRIME0001           15B2
PRIME0010           15CA
PRIME0011           15E2
PRIME0100           15FA
PRIME0101           163E
PRIME0110           1668
PRIME0111           16A2
PRIME1000           16AA
PRIME1001           16C4
PRIME1010           170E
PRIME1011           1716
PRIME1100           1760
PRIME1101           17AA
PRIME1110           17F4
PRIME1111           18B8
PRINT               3880
PRINT_ABSOLUTEADD   373C
PUSHADDR            1344
RANGETEST           1162
REGISTER_MODE       35BA
REGISTER_MODE000    35EA
REGISTER_MODE001    35F0
REGISTER_MODE010    35F6
REGISTER_MODE011    35FC
REGISTER_MODE100    3602
REGISTER_MODE101    3608
REGISTER_MODE110    360E
REGISTER_MODE111    3614
RESTART             1236
ROD_V1              31D0
ROD_V2              3218
ROLB_REGOP          23A6
ROLL_REGOP          23E6
ROLW_REGOP          23C6
ROL_MEMOP           237E
ROL_REGOP           2466
RORB_REGOP          2406
RORL_REGOP          2446
RORW_REGOP          2426
ROR_MEMOP           2392
ROR_REGOP           248C
ROTATE_REGOP        1876
RTS                 34E8
RTSOP               1F4A
SETUPBADDATA        134C
SKIP                30F8
SKIP1               31AC
SKIP2               3260
START               1000
STARTADDR           1014
STARTADDRMS         3F41
STARTINPUT          3DE6
SUBA                2C0A
SUBALOP             1F12
SUBAWOP             1EEE
SUBB_V1OP           1E2E
SUBB_V2OP           1E4E
SUBI                2C52
SUBIBOP             1DC2
SUBILOP             1E0A
SUBIWOP             1DE6
SUBL_V1OP           1EAE
SUBL_V2OP           1ECE
SUBTAB1_0000        18C0
SUBTAB1_0001        18EA
SUBTAB1_0010        18F2
SUBTAB1_0011        18FA
SUBTAB1_0100        1902
SUBTAB1_0101        1928
SUBTAB1_0110        192C
SUBTAB1_0111        1930
SUBTAB1_1000        1934
SUBTAB1_1001        1938
SUBTAB1_1010        193C
SUBTAB1_1011        1962
SUBTAB1_1100        1966
SUBTAB1_1101        198C
SUBTAB1_1110        1990
SUBTAB1_1111        1994
SUBTAB2_0000        1998
SUBTAB2_0001        199C
SUBTAB2_0010        19A0
SUBTAB2_0011        19A4
SUBTAB2_0100        19A8
SUBTAB2_0101        19CE
SUBTAB2_0110        19D2
SUBTAB2_0111        19F8
SUBTAB2_1000        19FC
SUBTAB2_1001        1A00
SUBTAB2_1010        1A04
SUBTAB2_1011        1A08
SUBTAB2_1100        1A0C
SUBTAB2_1101        1A10
SUBTAB2_1110        1A14
SUBTAB2_1111        1A36
SUBW_V1OP           1E6E
SUBW_V2OP           1E8E
SUB_V1              2BC2
SUB_V2              2B5A
TABLE0000           14B6
TABLE0100           1516
TABLEPRIME          1456
THEEND              1434
TOOHIGH             1194
TOOHIGHMSG          3EDF
TOOLOW              1180
TOOLOWMSG           3EB3
WHATEVER            276C
